swagger: '2.0'
info:
  title: Storage API v2 (MinIO-backed)
  version: '2.0'
  description: |
    Next-gen storage endpoints backed by MinIO for blog content and profile images.

    Notes:
    - Blog uploads store under `posts/{id}/` with a unique filename (UUID + original extension).
      The response returns `fileName` you must use for subsequent GET/HEAD/PUT/DELETE requests.
    - Profile image is a single canonical object per user at `profiles/{userId}/profile`.
    - Public reads are allowed for GET operations; writes and deletes require Bearer auth.
    - Fast-load: image uploads store BlurHash and intrinsic dimensions. GET/HEAD include
      X-Blurhash, X-Image-Width, X-Image-Height headers. Use `/meta` to fetch JSON with these,
      and `/url` to fetch a presigned/CDN URL for direct delivery.
host: themonkeys.tech
basePath: /api/v2/storage
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: 'Use: Bearer <JWT>'
paths:
  /posts/{id}:
    post:
      tags: [Blog Files v2]
      summary: Upload a file for a blog
      description: Uploads a file under `posts/{id}/` with a unique stored name.
      consumes: [multipart/form-data]
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Blog ID
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
        - in: formData
          name: file
          required: true
          type: file
          description: The file to upload
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ObjectWriteResponse'
          examples:
            application/json:
              bucket: themonkeys-storage
              object: posts/123/1d9a1a94-5c52-4f1b-b2c4-5d2c9b38a5dc.png
              fileName: 1d9a1a94-5c52-4f1b-b2c4-5d2c9b38a5dc.png
              etag: '"a1b2c3..."'
              size: 102400
              contentType: image/png
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }
      security:
        - BearerAuth: []
    get:
      tags: [Blog Files v2]
      summary: List files for a blog
      description: Lists objects under `posts/{id}/`.
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Blog ID
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PostFileListResponse'
        '401': { description: Unauthorized }
        '500': { description: Server error }
      security:
        - BearerAuth: []

  /posts/{id}/{fileName}:
    get:
      tags: [Blog Files v2]
      summary: Get a blog file
      produces:
        - application/octet-stream
        - image/png
        - image/jpeg
        - image/webp
        - text/plain
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: path
          name: fileName
          required: true
          type: string
      responses:
        '200':
          description: File stream
          schema:
            type: file
          headers:
            ETag: { type: string }
            Last-Modified: { type: string }
            Cache-Control: { type: string }
            X-Blurhash: { type: string, description: BlurHash placeholder string }
            X-Image-Width: { type: string, description: intrinsic width }
            X-Image-Height: { type: string, description: intrinsic height }
        '404': { description: Not found }
        '500': { description: Server error }
    head:
      tags: [Blog Files v2]
      summary: Get metadata (HEAD) for a blog file
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: path
          name: fileName
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
      responses:
        '200':
          description: Metadata available in response headers
          headers:
            ETag: { type: string }
            Last-Modified: { type: string }
            Cache-Control: { type: string }
            X-Blurhash: { type: string }
            X-Image-Width: { type: string }
            X-Image-Height: { type: string }
        '401': { description: Unauthorized }
        '404': { description: Not found }
      security:
        - BearerAuth: []
    put:
      tags: [Blog Files v2]
      summary: Replace an existing blog file
      consumes: [multipart/form-data]
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: path
          name: fileName
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
        - in: formData
          name: file
          required: true
          type: file
      responses:
        '200':
          description: Updated
          schema:
            $ref: '#/definitions/ObjectWriteResponse'
        '401': { description: Unauthorized }
        '404': { description: Not found }
        '500': { description: Server error }
      security:
        - BearerAuth: []
    delete:
      tags: [Blog Files v2]
      summary: Delete a blog file
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: path
          name: fileName
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
      responses:
        '200':
          description: Deleted
          schema:
            $ref: '#/definitions/DeleteResponse'
        '401': { description: Unauthorized }
        '404': { description: Not found }
        '500': { description: Server error }
      security:
        - BearerAuth: []

  /posts/{id}/{fileName}/meta:
    get:
      tags: [Fast load]
      summary: Get JSON metadata for a blog file (BlurHash, size, url)
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: path
          name: fileName
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FileMetaResponse'
        '404': { description: Not found }

  /posts/{id}/{fileName}/url:
    get:
      tags: [Fast load]
      summary: Get a presigned or CDN URL for a blog file
      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: path
          name: fileName
          required: true
          type: string
        - in: query
          name: expires
          required: false
          type: integer
          format: int32
          description: Expiry in seconds (default 600, max 604800)
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UrlResponse'
        '404': { description: Not found }
        '500': { description: Server error }

  /profiles/{userId}/profile:
    get:
      tags: [Profile pic v2]
      summary: Get profile image
      produces:
        - application/octet-stream
        - image/png
        - image/jpeg
        - image/webp
      parameters:
        - in: path
          name: userId
          required: true
          type: string
      responses:
        '200':
          description: Image stream
          schema:
            type: file
          headers:
            ETag: { type: string }
            Last-Modified: { type: string }
            Cache-Control: { type: string }
            X-Blurhash: { type: string }
            X-Image-Width: { type: string }
            X-Image-Height: { type: string }
        '404': { description: Not found }
        '500': { description: Server error }
    head:
      tags: [Profile pic v2]
      summary: Get metadata (HEAD) for profile image
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
      responses:
        '200':
          description: Metadata available in response headers
          headers:
            ETag: { type: string }
            Last-Modified: { type: string }
            Cache-Control: { type: string }
            X-Blurhash: { type: string }
            X-Image-Width: { type: string }
            X-Image-Height: { type: string }
        '401': { description: Unauthorized }
        '404': { description: Not found }
      security:
        - BearerAuth: []
    post:
      tags: [Profile pic v2]
      summary: Upload profile image
      consumes: [multipart/form-data]
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
        - in: formData
          name: profile_pic
          required: true
          type: file
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ObjectWriteResponse'
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Server error }
      security:
        - BearerAuth: []
    put:
      tags: [Profile pic v2]
      summary: Replace profile image
      consumes: [multipart/form-data]
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
        - in: formData
          name: profile_pic
          required: true
          type: file
      responses:
        '200':
          description: Updated
          schema:
            $ref: '#/definitions/ObjectWriteResponse'
        '401': { description: Unauthorized }
        '404': { description: Not found }
        '500': { description: Server error }
      security:
        - BearerAuth: []
    delete:
      tags: [Profile pic v2]
      summary: Delete profile image
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          description: 'Bearer <JWT>'
      responses:
        '200':
          description: Deleted
          schema:
            $ref: '#/definitions/DeleteResponse'
        '401': { description: Unauthorized }
        '404': { description: Not found }
        '500': { description: Server error }
      security:
        - BearerAuth: []

  /profiles/{userId}/profile/meta:
    get:
      tags: [Fast load]
      summary: Get JSON metadata for profile image (BlurHash, size, url)
      parameters:
        - in: path
          name: userId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/FileMetaResponse'
        '404': { description: Not found }

  /profiles/{userId}/profile/url:
    get:
      tags: [Fast load]
      summary: Get a presigned or CDN URL for profile image
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: query
          name: expires
          required: false
          type: integer
          format: int32
          description: Expiry in seconds (default 600, max 604800)
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UrlResponse'
        '404': { description: Not found }
        '500': { description: Server error }

definitions:
  ObjectWriteResponse:
    type: object
    properties:
      bucket:
        type: string
      object:
        type: string
        description: Full object key in the bucket
      fileName:
        type: string
        description: Unique stored filename (for blog uploads)
      etag:
        type: string
      size:
        type: integer
        format: int64
      contentType:
        type: string
  DeleteResponse:
    type: object
    properties:
      message:
        type: string
      object:
        type: string
  PostFileListResponse:
    type: object
    properties:
      files:
        type: array
        items:
          type: object
          properties:
            object:
              type: string
            fileName:
              type: string
            size:
              type: integer
              format: int64
            etag:
              type: string
            lastModified:
              type: string
              format: date-time
  FileMetaResponse:
    type: object
    properties:
      object: { type: string }
      etag: { type: string }
      size: { type: integer, format: int64 }
      contentType: { type: string }
      lastModified: { type: string, format: date-time }
      cacheControl: { type: string }
      blurhash: { type: string }
      width: { type: integer, format: int32 }
      height: { type: integer, format: int32 }
      url: { type: string }
  UrlResponse:
    type: object
    properties:
      url: { type: string }
      expiresIn: { type: integer, format: int32 }
