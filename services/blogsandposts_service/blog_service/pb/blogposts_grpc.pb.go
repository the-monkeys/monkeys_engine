// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: services/blogsandposts_service/blog_service/pb/blogposts.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogResponse, error)
	GetBlogs(ctx context.Context, in *GetBlogsRequest, opts ...grpc.CallOption) (BlogService_GetBlogsClient, error)
	GetBlogById(ctx context.Context, in *GetBlogByIdReq, opts ...grpc.CallOption) (*GetBlogByIdResp, error)
	EditBlog(ctx context.Context, in *EditBlogReq, opts ...grpc.CallOption) (*EditBlogRes, error)
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentRes, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogResponse, error) {
	out := new(CreateBlogResponse)
	err := c.cc.Invoke(ctx, "/Blog.BlogService/CreateBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetBlogs(ctx context.Context, in *GetBlogsRequest, opts ...grpc.CallOption) (BlogService_GetBlogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[0], "/Blog.BlogService/GetBlogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &blogServiceGetBlogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlogService_GetBlogsClient interface {
	Recv() (*GetBlogsResponse, error)
	grpc.ClientStream
}

type blogServiceGetBlogsClient struct {
	grpc.ClientStream
}

func (x *blogServiceGetBlogsClient) Recv() (*GetBlogsResponse, error) {
	m := new(GetBlogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blogServiceClient) GetBlogById(ctx context.Context, in *GetBlogByIdReq, opts ...grpc.CallOption) (*GetBlogByIdResp, error) {
	out := new(GetBlogByIdResp)
	err := c.cc.Invoke(ctx, "/Blog.BlogService/GetBlogById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) EditBlog(ctx context.Context, in *EditBlogReq, opts ...grpc.CallOption) (*EditBlogRes, error) {
	out := new(EditBlogRes)
	err := c.cc.Invoke(ctx, "/Blog.BlogService/EditBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentRes, error) {
	out := new(CreateCommentRes)
	err := c.cc.Invoke(ctx, "/Blog.BlogService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility
type BlogServiceServer interface {
	CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogResponse, error)
	GetBlogs(*GetBlogsRequest, BlogService_GetBlogsServer) error
	GetBlogById(context.Context, *GetBlogByIdReq) (*GetBlogByIdResp, error)
	EditBlog(context.Context, *EditBlogReq) (*EditBlogRes, error)
	CreateComment(context.Context, *CreateCommentReq) (*CreateCommentRes, error)
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogServiceServer struct {
}

func (UnimplementedBlogServiceServer) CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogs(*GetBlogsRequest, BlogService_GetBlogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlogs not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogById(context.Context, *GetBlogByIdReq) (*GetBlogByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogById not implemented")
}
func (UnimplementedBlogServiceServer) EditBlog(context.Context, *EditBlogReq) (*EditBlogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBlog not implemented")
}
func (UnimplementedBlogServiceServer) CreateComment(context.Context, *CreateCommentReq) (*CreateCommentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blog.BlogService/CreateBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateBlog(ctx, req.(*CreateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetBlogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).GetBlogs(m, &blogServiceGetBlogsServer{stream})
}

type BlogService_GetBlogsServer interface {
	Send(*GetBlogsResponse) error
	grpc.ServerStream
}

type blogServiceGetBlogsServer struct {
	grpc.ServerStream
}

func (x *blogServiceGetBlogsServer) Send(m *GetBlogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlogService_GetBlogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetBlogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blog.BlogService/GetBlogById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetBlogById(ctx, req.(*GetBlogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_EditBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).EditBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blog.BlogService/EditBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).EditBlog(ctx, req.(*EditBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Blog.BlogService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blog.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlog",
			Handler:    _BlogService_CreateBlog_Handler,
		},
		{
			MethodName: "GetBlogById",
			Handler:    _BlogService_GetBlogById_Handler,
		},
		{
			MethodName: "EditBlog",
			Handler:    _BlogService_EditBlog_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _BlogService_CreateComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlogs",
			Handler:       _BlogService_GetBlogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/blogsandposts_service/blog_service/pb/blogposts.proto",
}
