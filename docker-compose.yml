services:
  the_monkeys_db:
    container_name: "the-monkeys-psql"
    image: bitnami/postgresql:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRESQL_PRIMARY_DB_DB_PASSWORD}
      POSTGRES_USER: ${POSTGRESQL_PRIMARY_DB_DB_USERNAME}
      POSTGRES_DB: ${POSTGRESQL_PRIMARY_DB_DB_NAME}
      POSTGRESQL_ENABLE_LDAP: no
    ports:
      - "${POSTGRESQL_PRIMARY_DB_DB_PORT}:${POSTGRESQL_PRIMARY_DB_INTERNAL_PORT}"
    networks:
      - monkeys-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
      - ./postgres_backup:/backup_source
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRESQL_PRIMARY_DB_DB_USERNAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  db-migrations:
    container_name: "the-monkeys-migrate"
    image: migrate/migrate:v4.15.2
    volumes:
      - ./schema:/migrations
    networks:
      - monkeys-network
    entrypoint: [ "migrate", "-path", "/migrations", "-database", "postgres://${POSTGRESQL_PRIMARY_DB_DB_USERNAME}:${POSTGRESQL_PRIMARY_DB_DB_PASSWORD}@${POSTGRESQL_PRIMARY_DB_DB_HOST}:5432/${POSTGRESQL_PRIMARY_DB_DB_NAME}?sslmode=disable" ]
    command: [ "up" ]
    depends_on:
      the_monkeys_db:
        condition: service_healthy
    restart: on-failure

  elasticsearch-node1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    container_name: elasticsearch-node1
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - ELASTIC_PASSWORD=${OPENSEARCH_OS_PASSWORD}
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - path.repo=/usr/share/elasticsearch/snapshots
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch-data1:/usr/share/elasticsearch/data
      - ./elasticsearch_snapshots:/usr/share/elasticsearch/snapshots
    ports:
      - "${OPENSEARCH_HTTP_PORT}:${OPENSEARCH_HTTP_INTERNAL_PORT}"
      - "${OPENSEARCH_TRANSPORT_PORT}:${OPENSEARCH_TRANSPORT_INTERNAL_PORT}"
    networks:
      - monkeys-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${OPENSEARCH_HTTP_INTERNAL_PORT}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: the-monkeys-rabbitmq
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_INTERNAL_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_INTERNAL_PORT}"
    networks:
      - monkeys-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DISK_FREE_LIMIT: "50MB"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  minio:
    image: minio/minio:latest
    container_name: the-monkeys-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - monkeys-network
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always

  the_monkeys_gateway:
    container_name: "the-monkeys-gateway"
    image: golang:1.24.4
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - minio
    volumes:
      - .:/go/src/app
    ports:
      - "${THE_MONKEYS_GATEWAY_HTTP_PORT}:${THE_MONKEYS_GATEWAY_INTERNAL_PORT}"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_gateway/main.go
    restart: always
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${THE_MONKEYS_GATEWAY_INTERNAL_PORT}/healthz" ]
      interval: 300s
      timeout: 10s
      retries: 3

  the_monkeys_authz:
    container_name: "the-monkeys-auth"
    build:
      context: .
      dockerfile: microservices/the_monkeys_authz/Dockerfile
    # For production, you can switch to:
    # dockerfile: microservices/the_monkeys_authz/Dockerfile.distroless
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
    ports:
      - "${MICROSERVICES_AUTHZ_PORT}:${MICROSERVICES_AUTHZ_INTERNAL_PORT}"
    restart: unless-stopped
    env_file:
      - .env
    # Security: Run as non-root user
    user: "1001:1001"
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'
    # Health check is built into Dockerfile, but can override here
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  the_monkeys_storage:
    container_name: "the_monkeys_storage"
    build:
      context: .
      dockerfile: microservices/the_monkeys_storage/Dockerfile
    # For production, you can switch to:
    # dockerfile: microservices/the_monkeys_storage/Dockerfile.distroless
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
    volumes:
      - the_monkeys_profile:/profile
      - blogs_volume:/blogs
    ports:
      - "${MICROSERVICES_STORAGE_PORT}:${MICROSERVICES_STORAGE_INTERNAL_PORT}"
    restart: unless-stopped
    env_file:
      - .env
    # Security: Run as non-root user
    user: "1001:1001"
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.7'
        reservations:
          memory: 128M
          cpus: '0.2'
    # Health check
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=localhost:50054"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  the_monkeys_user:
    container_name: "the-monkeys-user"
    build:
      context: .
      dockerfile: microservices/the_monkeys_users/Dockerfile
    # For production, you can switch to:
    # dockerfile: microservices/the_monkeys_users/Dockerfile.distroless
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
    ports:
      - "${MICROSERVICES_USER_PORT}:${MICROSERVICES_USER_INTERNAL_PORT}"
    restart: unless-stopped
    env_file:
      - .env
    # Security: Run as non-root user
    user: "1001:1001"
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.7'
        reservations:
          memory: 128M
          cpus: '0.2'
    # Health check
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=localhost:50053"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  the_monkeys_blog:
    container_name: "the-monkeys-blog"
    build:
      context: .
      dockerfile: microservices/the_monkeys_blog/Dockerfile
    # For production, you can switch to:
    # dockerfile: microservices/the_monkeys_blog/Dockerfile.distroless
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - elasticsearch-node1
    ports:
      - "${MICROSERVICES_BLOG_PORT}:${MICROSERVICES_BLOG_INTERNAL_PORT}"
    restart: unless-stopped
    env_file:
      - .env
    # Security: Run as non-root user
    user: "1001:1001"
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.7'
        reservations:
          memory: 128M
          cpus: '0.2'
    # Health check
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=localhost:50052"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  the_monkeys_notification:
    container_name: "the_monkeys_notification"
    image: golang:1.24.4
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - elasticsearch-node1
      - the_monkeys_blog
      - the_monkeys_user
    volumes:
      - .:/go/src/app
    ports:
      - "${MICROSERVICES_NOTIFICATION_PORT}:${MICROSERVICES_NOTIFICATION_INTERNAL_PORT}"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_notification/main.go
    restart: always
    env_file:
      - .env

  the_monkeys_ai_engine:
    container_name: "the_monkeys_ai_engine"
    image: python:3.10
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - the_monkeys_db
    volumes:
      - .:/app
    ports:
      - "${MICROSERVICES_AI_ENGINE_PORT}:${MICROSERVICES_AI_ENGINE_INTERNAL_PORT}"
      - "${MICROSERVICES_AI_ENGINE_HEALTH_PORT}:${MICROSERVICES_AI_ENGINE_HEALTH_INTERNAL_PORT}"  # Health check endpoint (gRPC port + 1000)
    working_dir: /app
    command: >
      bash -c "echo 'Starting setup...' && 
        echo 'Installing system dependencies...' &&
        apt-get update && apt-get install -y curl &&
        echo 'Installing requirements...' &&
        pip install -r requirements.txt && 
        cd /app && 
        echo 'Generating proto files...' &&
        cd microservices/the_monkeys_ai &&
        python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. gw_recom.proto &&
        echo 'Proto files generated successfully!' &&
        ls -la && # Show files in directory
        cd /app &&
        echo 'Running main.py...' &&
        PYTHONPATH=/app python -u microservices/the_monkeys_ai/main.py 2>&1"
    restart: always
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MICROSERVICES_AI_ENGINE_HEALTH_INTERNAL_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  monkeys-network:
    driver: bridge

volumes:
  postgres_data:
  the_monkeys_profile:
  blogs_volume:
  rabbitmq_data:
  elasticsearch-data1:
    driver: local
  minio_data:
    driver: local