services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: the-monkeys-rabbitmq
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_INTERNAL_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_INTERNAL_PORT}"
    networks:
      - monkeys-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DISK_FREE_LIMIT: "50MB"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  minio:
    image: minio/minio:latest
    container_name: the-monkeys-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - monkeys-network
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always

  the_monkeys_gateway:
    container_name: "the-monkeys-gateway"
    image: golang:1.24.4
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - minio
    volumes:
      - .:/go/src/app
    ports:
      - "${THE_MONKEYS_GATEWAY_HTTP_PORT}:${THE_MONKEYS_GATEWAY_INTERNAL_PORT}"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_gateway/main.go
    restart: always
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${THE_MONKEYS_GATEWAY_INTERNAL_PORT}/healthz" ]
      interval: 300s
      timeout: 10s
      retries: 3

  the_monkeys_authz:
    container_name: "the-monkeys-auth"
    image: golang:1.24.4
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
    volumes:
      - .:/go/src/app
    ports:
      - "${MICROSERVICES_AUTHZ_PORT}:${MICROSERVICES_AUTHZ_INTERNAL_PORT}"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_authz/main.go
    restart: always
    env_file:
      - .env

  the_monkeys_storage:
    container_name: "the_monkeys_storage"
    image: golang:1.24.4
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - minio
    volumes:
      - .:/go/src/app
      - the_monkeys_profile:/profile
      - blogs_volume:/blogs
    ports:
      - "${MICROSERVICES_STORAGE_PORT}:${MICROSERVICES_STORAGE_INTERNAL_PORT}"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_storage/main.go
    restart: always
    env_file:
      - .env

  the_monkeys_user:
    container_name: "the-monkeys-user"
    image: golang:1.24.4
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
    volumes:
      - .:/go/src/app
    ports:
      - "${MICROSERVICES_USER_PORT}:${MICROSERVICES_USER_INTERNAL_PORT}"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_users/main.go
    restart: always
    env_file:
      - .env

  the_monkeys_blog:
    container_name: "the-monkeys-blog"
    image: golang:1.24.4
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
    volumes:
      - .:/go/src/app
    ports:
      - "${MICROSERVICES_BLOG_PORT}:${MICROSERVICES_BLOG_INTERNAL_PORT}"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_blog/main.go
    restart: always
    env_file:
      - .env

  the_monkeys_notification:
    container_name: "the_monkeys_notification"
    image: golang:1.24.4
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - the_monkeys_blog
      - the_monkeys_user
    volumes:
      - .:/go/src/app
    ports:
      - "${MICROSERVICES_NOTIFICATION_PORT}:${MICROSERVICES_NOTIFICATION_INTERNAL_PORT}"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_notification/main.go
    restart: always
    env_file:
      - .env

  the_monkeys_ai_engine:
    container_name: "the_monkeys_ai_engine"
    image: python:3.10
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
    volumes:
      - .:/app
    ports:
      - "${MICROSERVICES_AI_ENGINE_PORT}:${MICROSERVICES_AI_ENGINE_INTERNAL_PORT}"
      - "${MICROSERVICES_AI_ENGINE_HEALTH_PORT}:${MICROSERVICES_AI_ENGINE_HEALTH_INTERNAL_PORT}"  # Health check endpoint (gRPC port + 1000)
    working_dir: /app
    command: >
      bash -c "echo 'Starting setup...' && 
        echo 'Installing system dependencies...' &&
        apt-get update && apt-get install -y curl &&
        echo 'Installing requirements...' &&
        pip install -r requirements.txt && 
        cd /app && 
        echo 'Generating proto files...' &&
        cd microservices/the_monkeys_ai &&
        python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. gw_recom.proto &&
        echo 'Proto files generated successfully!' &&
        ls -la && # Show files in directory
        cd /app &&
        echo 'Running main.py...' &&
        PYTHONPATH=/app python -u microservices/the_monkeys_ai/main.py 2>&1"
    restart: always
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MICROSERVICES_AI_ENGINE_HEALTH_INTERNAL_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  monkeys-network:
    driver: bridge

volumes:
  the_monkeys_profile:
  blogs_volume:
  rabbitmq_data:
  minio_data:
    driver: local