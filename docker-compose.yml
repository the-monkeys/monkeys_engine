services:
  the_monkeys_db:
    container_name: "the-monkeys-psql"
    image: bitnami/postgresql:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: Secret
      POSTGRES_USER: root
      POSTGRES_DB: the_monkeys_user_dev
    ports:
      - 1234:5432
    networks:
      - monkeys-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-migrations:
    container_name: "the-monkeys-migrate"
    image: migrate/migrate:v4.15.2
    volumes:
      - ./schema:/migrations
    networks:
      - monkeys-network
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://root:Secret@the_monkeys_db:5432/the_monkeys_user_dev?sslmode=disable"
      ]
    command: ["up"]
    depends_on:
      the_monkeys_db:
        condition: service_healthy
    restart: on-failure

  elasticsearch-node1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
    container_name: elasticsearch-node1
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - ELASTIC_PASSWORD=a!Too5hortPassword@1
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch-data1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - monkeys-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: the-monkeys-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - monkeys-network
    environment:
      RABBITMQ_DEFAULT_USER: myuser
      RABBITMQ_DEFAULT_PASS: mypassword
      RABBITMQ_DISK_FREE_LIMIT: "50MB"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  the_monkeys_cache:
    container_name: "the_monkeys_cache"
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - monkeys-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: always

  the_monkeys_gateway:
    container_name: "the-monkeys-gateway"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - the_monkeys_cache
    volumes:
      - .:/go/src/app
    ports:
      - "8081:8081"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_gateway/main.go
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/healthz"]
      interval: 300s
      timeout: 10s
      retries: 3

  the_monkeys_authz:
    container_name: "the-monkeys-auth"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - the_monkeys_cache
    volumes:
      - .:/go/src/app
    ports:
      - "50051:50051"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_authz/main.go
    restart: always

  the_monkeys_storage:
    container_name: "the_monkeys_storage"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - the_monkeys_cache
    volumes:
      - .:/go/src/app
      - the_monkeys_profile:/profile
      - blogs_volume:/blogs
    ports:
      - "50054:50054"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_storage/main.go
    restart: always

  the_monkeys_user:
    container_name: "the-monkeys-user"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - the_monkeys_cache
    volumes:
      - .:/go/src/app
    ports:
      - "50053:50053"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_users/main.go
    restart: always

  the_monkeys_blog:
    container_name: "the-monkeys-blog"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - elasticsearch-node1
      - the_monkeys_cache
    volumes:
      - .:/go/src/app
    ports:
      - "50052:50052"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_blog/main.go
    restart: always

  the_monkeys_notification:
    container_name: "the_monkeys_notification"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - elasticsearch-node1
      - the_monkeys_blog
      - the_monkeys_user
      - the_monkeys_cache
    volumes:
      - .:/go/src/app
    ports:
      - "50055:50055"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_notification/main.go
    restart: always

  the_monkeys_cache_svc:
    container_name: "the_monkeys_cache_svc"
    image: golang:latest
    networks:
      - monkeys-network
    depends_on:
      - rabbitmq
      - db-migrations
      - the_monkeys_db
      - elasticsearch-node1
      - the_monkeys_blog
      - the_monkeys_user
      - the_monkeys_cache
    volumes:
      - .:/go/src/app
    ports:
      - "50056:50056"
    working_dir: /go/src/app
    command: go run microservices/the_monkeys_cache/main.go
    restart: always

networks:
  monkeys-network:
    driver: bridge

volumes:
  postgres_data:
  the_monkeys_profile:
  blogs_volume:
  rabbitmq_data:
  elasticsearch-data1:
    driver: local
  redis_data:
