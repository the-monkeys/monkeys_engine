// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: apis/serviceconn/gateway_file_service/pb/gw_file_svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UploadBlogFile_UploadProfilePic_FullMethodName = "/auth_svc.UploadBlogFile/UploadProfilePic"
	UploadBlogFile_GetProfilePic_FullMethodName    = "/auth_svc.UploadBlogFile/GetProfilePic"
	UploadBlogFile_DeleteProfilePic_FullMethodName = "/auth_svc.UploadBlogFile/DeleteProfilePic"
	UploadBlogFile_UploadBlogFile_FullMethodName   = "/auth_svc.UploadBlogFile/UploadBlogFile"
	UploadBlogFile_GetBlogFile_FullMethodName      = "/auth_svc.UploadBlogFile/GetBlogFile"
	UploadBlogFile_DeleteBlogFile_FullMethodName   = "/auth_svc.UploadBlogFile/DeleteBlogFile"
)

// UploadBlogFileClient is the client API for UploadBlogFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadBlogFileClient interface {
	// Lets an user upload profile pic into the file server
	UploadProfilePic(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadProfilePicReq, UploadProfilePicRes], error)
	// Lets an user get profile pic into the file server
	GetProfilePic(ctx context.Context, in *GetProfilePicReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetProfilePicRes], error)
	// Lets a user delete the profile picture
	DeleteProfilePic(ctx context.Context, in *DeleteProfilePicReq, opts ...grpc.CallOption) (*DeleteProfilePicRes, error)
	UploadBlogFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBlogFileReq, UploadBlogFileRes], error)
	GetBlogFile(ctx context.Context, in *GetBlogFileReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBlogFileRes], error)
	DeleteBlogFile(ctx context.Context, in *DeleteBlogFileReq, opts ...grpc.CallOption) (*DeleteBlogFileRes, error)
}

type uploadBlogFileClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadBlogFileClient(cc grpc.ClientConnInterface) UploadBlogFileClient {
	return &uploadBlogFileClient{cc}
}

func (c *uploadBlogFileClient) UploadProfilePic(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadProfilePicReq, UploadProfilePicRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UploadBlogFile_ServiceDesc.Streams[0], UploadBlogFile_UploadProfilePic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadProfilePicReq, UploadProfilePicRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadBlogFile_UploadProfilePicClient = grpc.ClientStreamingClient[UploadProfilePicReq, UploadProfilePicRes]

func (c *uploadBlogFileClient) GetProfilePic(ctx context.Context, in *GetProfilePicReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetProfilePicRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UploadBlogFile_ServiceDesc.Streams[1], UploadBlogFile_GetProfilePic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetProfilePicReq, GetProfilePicRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadBlogFile_GetProfilePicClient = grpc.ServerStreamingClient[GetProfilePicRes]

func (c *uploadBlogFileClient) DeleteProfilePic(ctx context.Context, in *DeleteProfilePicReq, opts ...grpc.CallOption) (*DeleteProfilePicRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProfilePicRes)
	err := c.cc.Invoke(ctx, UploadBlogFile_DeleteProfilePic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadBlogFileClient) UploadBlogFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBlogFileReq, UploadBlogFileRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UploadBlogFile_ServiceDesc.Streams[2], UploadBlogFile_UploadBlogFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadBlogFileReq, UploadBlogFileRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadBlogFile_UploadBlogFileClient = grpc.ClientStreamingClient[UploadBlogFileReq, UploadBlogFileRes]

func (c *uploadBlogFileClient) GetBlogFile(ctx context.Context, in *GetBlogFileReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBlogFileRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UploadBlogFile_ServiceDesc.Streams[3], UploadBlogFile_GetBlogFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlogFileReq, GetBlogFileRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadBlogFile_GetBlogFileClient = grpc.ServerStreamingClient[GetBlogFileRes]

func (c *uploadBlogFileClient) DeleteBlogFile(ctx context.Context, in *DeleteBlogFileReq, opts ...grpc.CallOption) (*DeleteBlogFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlogFileRes)
	err := c.cc.Invoke(ctx, UploadBlogFile_DeleteBlogFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadBlogFileServer is the server API for UploadBlogFile service.
// All implementations must embed UnimplementedUploadBlogFileServer
// for forward compatibility.
type UploadBlogFileServer interface {
	// Lets an user upload profile pic into the file server
	UploadProfilePic(grpc.ClientStreamingServer[UploadProfilePicReq, UploadProfilePicRes]) error
	// Lets an user get profile pic into the file server
	GetProfilePic(*GetProfilePicReq, grpc.ServerStreamingServer[GetProfilePicRes]) error
	// Lets a user delete the profile picture
	DeleteProfilePic(context.Context, *DeleteProfilePicReq) (*DeleteProfilePicRes, error)
	UploadBlogFile(grpc.ClientStreamingServer[UploadBlogFileReq, UploadBlogFileRes]) error
	GetBlogFile(*GetBlogFileReq, grpc.ServerStreamingServer[GetBlogFileRes]) error
	DeleteBlogFile(context.Context, *DeleteBlogFileReq) (*DeleteBlogFileRes, error)
	mustEmbedUnimplementedUploadBlogFileServer()
}

// UnimplementedUploadBlogFileServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploadBlogFileServer struct{}

func (UnimplementedUploadBlogFileServer) UploadProfilePic(grpc.ClientStreamingServer[UploadProfilePicReq, UploadProfilePicRes]) error {
	return status.Errorf(codes.Unimplemented, "method UploadProfilePic not implemented")
}
func (UnimplementedUploadBlogFileServer) GetProfilePic(*GetProfilePicReq, grpc.ServerStreamingServer[GetProfilePicRes]) error {
	return status.Errorf(codes.Unimplemented, "method GetProfilePic not implemented")
}
func (UnimplementedUploadBlogFileServer) DeleteProfilePic(context.Context, *DeleteProfilePicReq) (*DeleteProfilePicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfilePic not implemented")
}
func (UnimplementedUploadBlogFileServer) UploadBlogFile(grpc.ClientStreamingServer[UploadBlogFileReq, UploadBlogFileRes]) error {
	return status.Errorf(codes.Unimplemented, "method UploadBlogFile not implemented")
}
func (UnimplementedUploadBlogFileServer) GetBlogFile(*GetBlogFileReq, grpc.ServerStreamingServer[GetBlogFileRes]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlogFile not implemented")
}
func (UnimplementedUploadBlogFileServer) DeleteBlogFile(context.Context, *DeleteBlogFileReq) (*DeleteBlogFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogFile not implemented")
}
func (UnimplementedUploadBlogFileServer) mustEmbedUnimplementedUploadBlogFileServer() {}
func (UnimplementedUploadBlogFileServer) testEmbeddedByValue()                        {}

// UnsafeUploadBlogFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadBlogFileServer will
// result in compilation errors.
type UnsafeUploadBlogFileServer interface {
	mustEmbedUnimplementedUploadBlogFileServer()
}

func RegisterUploadBlogFileServer(s grpc.ServiceRegistrar, srv UploadBlogFileServer) {
	// If the following call pancis, it indicates UnimplementedUploadBlogFileServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UploadBlogFile_ServiceDesc, srv)
}

func _UploadBlogFile_UploadProfilePic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadBlogFileServer).UploadProfilePic(&grpc.GenericServerStream[UploadProfilePicReq, UploadProfilePicRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadBlogFile_UploadProfilePicServer = grpc.ClientStreamingServer[UploadProfilePicReq, UploadProfilePicRes]

func _UploadBlogFile_GetProfilePic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProfilePicReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UploadBlogFileServer).GetProfilePic(m, &grpc.GenericServerStream[GetProfilePicReq, GetProfilePicRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadBlogFile_GetProfilePicServer = grpc.ServerStreamingServer[GetProfilePicRes]

func _UploadBlogFile_DeleteProfilePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfilePicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadBlogFileServer).DeleteProfilePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadBlogFile_DeleteProfilePic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadBlogFileServer).DeleteProfilePic(ctx, req.(*DeleteProfilePicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadBlogFile_UploadBlogFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadBlogFileServer).UploadBlogFile(&grpc.GenericServerStream[UploadBlogFileReq, UploadBlogFileRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadBlogFile_UploadBlogFileServer = grpc.ClientStreamingServer[UploadBlogFileReq, UploadBlogFileRes]

func _UploadBlogFile_GetBlogFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlogFileReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UploadBlogFileServer).GetBlogFile(m, &grpc.GenericServerStream[GetBlogFileReq, GetBlogFileRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UploadBlogFile_GetBlogFileServer = grpc.ServerStreamingServer[GetBlogFileRes]

func _UploadBlogFile_DeleteBlogFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadBlogFileServer).DeleteBlogFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadBlogFile_DeleteBlogFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadBlogFileServer).DeleteBlogFile(ctx, req.(*DeleteBlogFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadBlogFile_ServiceDesc is the grpc.ServiceDesc for UploadBlogFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadBlogFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_svc.UploadBlogFile",
	HandlerType: (*UploadBlogFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteProfilePic",
			Handler:    _UploadBlogFile_DeleteProfilePic_Handler,
		},
		{
			MethodName: "DeleteBlogFile",
			Handler:    _UploadBlogFile_DeleteBlogFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadProfilePic",
			Handler:       _UploadBlogFile_UploadProfilePic_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetProfilePic",
			Handler:       _UploadBlogFile_GetProfilePic_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadBlogFile",
			Handler:       _UploadBlogFile_UploadBlogFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetBlogFile",
			Handler:       _UploadBlogFile_GetBlogFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/serviceconn/gateway_file_service/pb/gw_file_svc.proto",
}
