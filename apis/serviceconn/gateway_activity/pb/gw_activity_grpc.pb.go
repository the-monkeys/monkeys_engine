// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: apis/serviceconn/gateway_activity/pb/gw_activity.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivityService_TrackActivity_FullMethodName                  = "/activity_svc.ActivityService/TrackActivity"
	ActivityService_GetUserActivities_FullMethodName              = "/activity_svc.ActivityService/GetUserActivities"
	ActivityService_GetActivityAnalytics_FullMethodName           = "/activity_svc.ActivityService/GetActivityAnalytics"
	ActivityService_TrackSecurityEvent_FullMethodName             = "/activity_svc.ActivityService/TrackSecurityEvent"
	ActivityService_GetSecurityEvents_FullMethodName              = "/activity_svc.ActivityService/GetSecurityEvents"
	ActivityService_GetUserBehaviorAnalytics_FullMethodName       = "/activity_svc.ActivityService/GetUserBehaviorAnalytics"
	ActivityService_GetReadingBehavior_FullMethodName             = "/activity_svc.ActivityService/GetReadingBehavior"
	ActivityService_TrackRecommendationInteraction_FullMethodName = "/activity_svc.ActivityService/TrackRecommendationInteraction"
	ActivityService_GetRecommendationAnalytics_FullMethodName     = "/activity_svc.ActivityService/GetRecommendationAnalytics"
	ActivityService_GetContentAnalytics_FullMethodName            = "/activity_svc.ActivityService/GetContentAnalytics"
	ActivityService_TrackContentInteraction_FullMethodName        = "/activity_svc.ActivityService/TrackContentInteraction"
	ActivityService_TrackUserJourney_FullMethodName               = "/activity_svc.ActivityService/TrackUserJourney"
	ActivityService_GetUserJourneyAnalytics_FullMethodName        = "/activity_svc.ActivityService/GetUserJourneyAnalytics"
	ActivityService_TrackNotificationEvent_FullMethodName         = "/activity_svc.ActivityService/TrackNotificationEvent"
	ActivityService_GetNotificationAnalytics_FullMethodName       = "/activity_svc.ActivityService/GetNotificationAnalytics"
	ActivityService_TrackFinancialEvent_FullMethodName            = "/activity_svc.ActivityService/TrackFinancialEvent"
	ActivityService_GetFinancialEvents_FullMethodName             = "/activity_svc.ActivityService/GetFinancialEvents"
	ActivityService_TrackIntegrationEvent_FullMethodName          = "/activity_svc.ActivityService/TrackIntegrationEvent"
	ActivityService_GetIntegrationEvents_FullMethodName           = "/activity_svc.ActivityService/GetIntegrationEvents"
	ActivityService_TrackIncidentEvent_FullMethodName             = "/activity_svc.ActivityService/TrackIncidentEvent"
	ActivityService_GetIncidentEvents_FullMethodName              = "/activity_svc.ActivityService/GetIncidentEvents"
	ActivityService_TrackComplianceEvent_FullMethodName           = "/activity_svc.ActivityService/TrackComplianceEvent"
	ActivityService_GetComplianceEvents_FullMethodName            = "/activity_svc.ActivityService/GetComplianceEvents"
	ActivityService_TrackSearchActivity_FullMethodName            = "/activity_svc.ActivityService/TrackSearchActivity"
	ActivityService_GetSearchAnalytics_FullMethodName             = "/activity_svc.ActivityService/GetSearchAnalytics"
	ActivityService_TrackPerformanceEvent_FullMethodName          = "/activity_svc.ActivityService/TrackPerformanceEvent"
	ActivityService_GetPerformanceAnalytics_FullMethodName        = "/activity_svc.ActivityService/GetPerformanceAnalytics"
	ActivityService_HealthCheck_FullMethodName                    = "/activity_svc.ActivityService/HealthCheck"
)

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Activity Service - handles all user activity tracking
type ActivityServiceClient interface {
	// Core activity tracking
	TrackActivity(ctx context.Context, in *TrackActivityRequest, opts ...grpc.CallOption) (*TrackActivityResponse, error)
	GetUserActivities(ctx context.Context, in *GetUserActivitiesRequest, opts ...grpc.CallOption) (*GetUserActivitiesResponse, error)
	GetActivityAnalytics(ctx context.Context, in *GetActivityAnalyticsRequest, opts ...grpc.CallOption) (*GetActivityAnalyticsResponse, error)
	// Security events
	TrackSecurityEvent(ctx context.Context, in *TrackSecurityEventRequest, opts ...grpc.CallOption) (*TrackSecurityEventResponse, error)
	GetSecurityEvents(ctx context.Context, in *GetSecurityEventsRequest, opts ...grpc.CallOption) (*GetSecurityEventsResponse, error)
	// User behavior analytics
	GetUserBehaviorAnalytics(ctx context.Context, in *GetUserBehaviorAnalyticsRequest, opts ...grpc.CallOption) (*GetUserBehaviorAnalyticsResponse, error)
	GetReadingBehavior(ctx context.Context, in *GetReadingBehaviorRequest, opts ...grpc.CallOption) (*GetReadingBehaviorResponse, error)
	// Recommendation tracking
	TrackRecommendationInteraction(ctx context.Context, in *TrackRecommendationInteractionRequest, opts ...grpc.CallOption) (*TrackRecommendationInteractionResponse, error)
	GetRecommendationAnalytics(ctx context.Context, in *GetRecommendationAnalyticsRequest, opts ...grpc.CallOption) (*GetRecommendationAnalyticsResponse, error)
	// Content analytics
	GetContentAnalytics(ctx context.Context, in *GetContentAnalyticsRequest, opts ...grpc.CallOption) (*GetContentAnalyticsResponse, error)
	TrackContentInteraction(ctx context.Context, in *TrackContentInteractionRequest, opts ...grpc.CallOption) (*TrackContentInteractionResponse, error)
	// User journey tracking
	TrackUserJourney(ctx context.Context, in *TrackUserJourneyRequest, opts ...grpc.CallOption) (*TrackUserJourneyResponse, error)
	GetUserJourneyAnalytics(ctx context.Context, in *GetUserJourneyAnalyticsRequest, opts ...grpc.CallOption) (*GetUserJourneyAnalyticsResponse, error)
	// Notification tracking
	TrackNotificationEvent(ctx context.Context, in *TrackNotificationEventRequest, opts ...grpc.CallOption) (*TrackNotificationEventResponse, error)
	GetNotificationAnalytics(ctx context.Context, in *GetNotificationAnalyticsRequest, opts ...grpc.CallOption) (*GetNotificationAnalyticsResponse, error)
	// Financial event tracking
	TrackFinancialEvent(ctx context.Context, in *TrackFinancialEventRequest, opts ...grpc.CallOption) (*TrackFinancialEventResponse, error)
	GetFinancialEvents(ctx context.Context, in *GetFinancialEventsRequest, opts ...grpc.CallOption) (*GetFinancialEventsResponse, error)
	// Integration events
	TrackIntegrationEvent(ctx context.Context, in *TrackIntegrationEventRequest, opts ...grpc.CallOption) (*TrackIntegrationEventResponse, error)
	GetIntegrationEvents(ctx context.Context, in *GetIntegrationEventsRequest, opts ...grpc.CallOption) (*GetIntegrationEventsResponse, error)
	// Incident tracking
	TrackIncidentEvent(ctx context.Context, in *TrackIncidentEventRequest, opts ...grpc.CallOption) (*TrackIncidentEventResponse, error)
	GetIncidentEvents(ctx context.Context, in *GetIncidentEventsRequest, opts ...grpc.CallOption) (*GetIncidentEventsResponse, error)
	// Compliance events
	TrackComplianceEvent(ctx context.Context, in *TrackComplianceEventRequest, opts ...grpc.CallOption) (*TrackComplianceEventResponse, error)
	GetComplianceEvents(ctx context.Context, in *GetComplianceEventsRequest, opts ...grpc.CallOption) (*GetComplianceEventsResponse, error)
	// Search activity tracking
	TrackSearchActivity(ctx context.Context, in *TrackSearchActivityRequest, opts ...grpc.CallOption) (*TrackSearchActivityResponse, error)
	GetSearchAnalytics(ctx context.Context, in *GetSearchAnalyticsRequest, opts ...grpc.CallOption) (*GetSearchAnalyticsResponse, error)
	// Performance tracking
	TrackPerformanceEvent(ctx context.Context, in *TrackPerformanceEventRequest, opts ...grpc.CallOption) (*TrackPerformanceEventResponse, error)
	GetPerformanceAnalytics(ctx context.Context, in *GetPerformanceAnalyticsRequest, opts ...grpc.CallOption) (*GetPerformanceAnalyticsResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) TrackActivity(ctx context.Context, in *TrackActivityRequest, opts ...grpc.CallOption) (*TrackActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackActivityResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetUserActivities(ctx context.Context, in *GetUserActivitiesRequest, opts ...grpc.CallOption) (*GetUserActivitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserActivitiesResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetUserActivities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetActivityAnalytics(ctx context.Context, in *GetActivityAnalyticsRequest, opts ...grpc.CallOption) (*GetActivityAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivityAnalyticsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetActivityAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackSecurityEvent(ctx context.Context, in *TrackSecurityEventRequest, opts ...grpc.CallOption) (*TrackSecurityEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackSecurityEventResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackSecurityEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetSecurityEvents(ctx context.Context, in *GetSecurityEventsRequest, opts ...grpc.CallOption) (*GetSecurityEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecurityEventsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetSecurityEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetUserBehaviorAnalytics(ctx context.Context, in *GetUserBehaviorAnalyticsRequest, opts ...grpc.CallOption) (*GetUserBehaviorAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBehaviorAnalyticsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetUserBehaviorAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetReadingBehavior(ctx context.Context, in *GetReadingBehaviorRequest, opts ...grpc.CallOption) (*GetReadingBehaviorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReadingBehaviorResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetReadingBehavior_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackRecommendationInteraction(ctx context.Context, in *TrackRecommendationInteractionRequest, opts ...grpc.CallOption) (*TrackRecommendationInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackRecommendationInteractionResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackRecommendationInteraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetRecommendationAnalytics(ctx context.Context, in *GetRecommendationAnalyticsRequest, opts ...grpc.CallOption) (*GetRecommendationAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecommendationAnalyticsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetRecommendationAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetContentAnalytics(ctx context.Context, in *GetContentAnalyticsRequest, opts ...grpc.CallOption) (*GetContentAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContentAnalyticsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetContentAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackContentInteraction(ctx context.Context, in *TrackContentInteractionRequest, opts ...grpc.CallOption) (*TrackContentInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackContentInteractionResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackContentInteraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackUserJourney(ctx context.Context, in *TrackUserJourneyRequest, opts ...grpc.CallOption) (*TrackUserJourneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackUserJourneyResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackUserJourney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetUserJourneyAnalytics(ctx context.Context, in *GetUserJourneyAnalyticsRequest, opts ...grpc.CallOption) (*GetUserJourneyAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserJourneyAnalyticsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetUserJourneyAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackNotificationEvent(ctx context.Context, in *TrackNotificationEventRequest, opts ...grpc.CallOption) (*TrackNotificationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackNotificationEventResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackNotificationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetNotificationAnalytics(ctx context.Context, in *GetNotificationAnalyticsRequest, opts ...grpc.CallOption) (*GetNotificationAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationAnalyticsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetNotificationAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackFinancialEvent(ctx context.Context, in *TrackFinancialEventRequest, opts ...grpc.CallOption) (*TrackFinancialEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackFinancialEventResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackFinancialEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetFinancialEvents(ctx context.Context, in *GetFinancialEventsRequest, opts ...grpc.CallOption) (*GetFinancialEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinancialEventsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetFinancialEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackIntegrationEvent(ctx context.Context, in *TrackIntegrationEventRequest, opts ...grpc.CallOption) (*TrackIntegrationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackIntegrationEventResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackIntegrationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetIntegrationEvents(ctx context.Context, in *GetIntegrationEventsRequest, opts ...grpc.CallOption) (*GetIntegrationEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntegrationEventsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetIntegrationEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackIncidentEvent(ctx context.Context, in *TrackIncidentEventRequest, opts ...grpc.CallOption) (*TrackIncidentEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackIncidentEventResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackIncidentEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetIncidentEvents(ctx context.Context, in *GetIncidentEventsRequest, opts ...grpc.CallOption) (*GetIncidentEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIncidentEventsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetIncidentEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackComplianceEvent(ctx context.Context, in *TrackComplianceEventRequest, opts ...grpc.CallOption) (*TrackComplianceEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackComplianceEventResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackComplianceEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetComplianceEvents(ctx context.Context, in *GetComplianceEventsRequest, opts ...grpc.CallOption) (*GetComplianceEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComplianceEventsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetComplianceEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackSearchActivity(ctx context.Context, in *TrackSearchActivityRequest, opts ...grpc.CallOption) (*TrackSearchActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackSearchActivityResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackSearchActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetSearchAnalytics(ctx context.Context, in *GetSearchAnalyticsRequest, opts ...grpc.CallOption) (*GetSearchAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchAnalyticsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetSearchAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) TrackPerformanceEvent(ctx context.Context, in *TrackPerformanceEventRequest, opts ...grpc.CallOption) (*TrackPerformanceEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackPerformanceEventResponse)
	err := c.cc.Invoke(ctx, ActivityService_TrackPerformanceEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetPerformanceAnalytics(ctx context.Context, in *GetPerformanceAnalyticsRequest, opts ...grpc.CallOption) (*GetPerformanceAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPerformanceAnalyticsResponse)
	err := c.cc.Invoke(ctx, ActivityService_GetPerformanceAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ActivityService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations must embed UnimplementedActivityServiceServer
// for forward compatibility.
//
// Activity Service - handles all user activity tracking
type ActivityServiceServer interface {
	// Core activity tracking
	TrackActivity(context.Context, *TrackActivityRequest) (*TrackActivityResponse, error)
	GetUserActivities(context.Context, *GetUserActivitiesRequest) (*GetUserActivitiesResponse, error)
	GetActivityAnalytics(context.Context, *GetActivityAnalyticsRequest) (*GetActivityAnalyticsResponse, error)
	// Security events
	TrackSecurityEvent(context.Context, *TrackSecurityEventRequest) (*TrackSecurityEventResponse, error)
	GetSecurityEvents(context.Context, *GetSecurityEventsRequest) (*GetSecurityEventsResponse, error)
	// User behavior analytics
	GetUserBehaviorAnalytics(context.Context, *GetUserBehaviorAnalyticsRequest) (*GetUserBehaviorAnalyticsResponse, error)
	GetReadingBehavior(context.Context, *GetReadingBehaviorRequest) (*GetReadingBehaviorResponse, error)
	// Recommendation tracking
	TrackRecommendationInteraction(context.Context, *TrackRecommendationInteractionRequest) (*TrackRecommendationInteractionResponse, error)
	GetRecommendationAnalytics(context.Context, *GetRecommendationAnalyticsRequest) (*GetRecommendationAnalyticsResponse, error)
	// Content analytics
	GetContentAnalytics(context.Context, *GetContentAnalyticsRequest) (*GetContentAnalyticsResponse, error)
	TrackContentInteraction(context.Context, *TrackContentInteractionRequest) (*TrackContentInteractionResponse, error)
	// User journey tracking
	TrackUserJourney(context.Context, *TrackUserJourneyRequest) (*TrackUserJourneyResponse, error)
	GetUserJourneyAnalytics(context.Context, *GetUserJourneyAnalyticsRequest) (*GetUserJourneyAnalyticsResponse, error)
	// Notification tracking
	TrackNotificationEvent(context.Context, *TrackNotificationEventRequest) (*TrackNotificationEventResponse, error)
	GetNotificationAnalytics(context.Context, *GetNotificationAnalyticsRequest) (*GetNotificationAnalyticsResponse, error)
	// Financial event tracking
	TrackFinancialEvent(context.Context, *TrackFinancialEventRequest) (*TrackFinancialEventResponse, error)
	GetFinancialEvents(context.Context, *GetFinancialEventsRequest) (*GetFinancialEventsResponse, error)
	// Integration events
	TrackIntegrationEvent(context.Context, *TrackIntegrationEventRequest) (*TrackIntegrationEventResponse, error)
	GetIntegrationEvents(context.Context, *GetIntegrationEventsRequest) (*GetIntegrationEventsResponse, error)
	// Incident tracking
	TrackIncidentEvent(context.Context, *TrackIncidentEventRequest) (*TrackIncidentEventResponse, error)
	GetIncidentEvents(context.Context, *GetIncidentEventsRequest) (*GetIncidentEventsResponse, error)
	// Compliance events
	TrackComplianceEvent(context.Context, *TrackComplianceEventRequest) (*TrackComplianceEventResponse, error)
	GetComplianceEvents(context.Context, *GetComplianceEventsRequest) (*GetComplianceEventsResponse, error)
	// Search activity tracking
	TrackSearchActivity(context.Context, *TrackSearchActivityRequest) (*TrackSearchActivityResponse, error)
	GetSearchAnalytics(context.Context, *GetSearchAnalyticsRequest) (*GetSearchAnalyticsResponse, error)
	// Performance tracking
	TrackPerformanceEvent(context.Context, *TrackPerformanceEventRequest) (*TrackPerformanceEventResponse, error)
	GetPerformanceAnalytics(context.Context, *GetPerformanceAnalyticsRequest) (*GetPerformanceAnalyticsResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedActivityServiceServer()
}

// UnimplementedActivityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActivityServiceServer struct{}

func (UnimplementedActivityServiceServer) TrackActivity(context.Context, *TrackActivityRequest) (*TrackActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackActivity not implemented")
}
func (UnimplementedActivityServiceServer) GetUserActivities(context.Context, *GetUserActivitiesRequest) (*GetUserActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivities not implemented")
}
func (UnimplementedActivityServiceServer) GetActivityAnalytics(context.Context, *GetActivityAnalyticsRequest) (*GetActivityAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityAnalytics not implemented")
}
func (UnimplementedActivityServiceServer) TrackSecurityEvent(context.Context, *TrackSecurityEventRequest) (*TrackSecurityEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackSecurityEvent not implemented")
}
func (UnimplementedActivityServiceServer) GetSecurityEvents(context.Context, *GetSecurityEventsRequest) (*GetSecurityEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityEvents not implemented")
}
func (UnimplementedActivityServiceServer) GetUserBehaviorAnalytics(context.Context, *GetUserBehaviorAnalyticsRequest) (*GetUserBehaviorAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBehaviorAnalytics not implemented")
}
func (UnimplementedActivityServiceServer) GetReadingBehavior(context.Context, *GetReadingBehaviorRequest) (*GetReadingBehaviorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadingBehavior not implemented")
}
func (UnimplementedActivityServiceServer) TrackRecommendationInteraction(context.Context, *TrackRecommendationInteractionRequest) (*TrackRecommendationInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackRecommendationInteraction not implemented")
}
func (UnimplementedActivityServiceServer) GetRecommendationAnalytics(context.Context, *GetRecommendationAnalyticsRequest) (*GetRecommendationAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationAnalytics not implemented")
}
func (UnimplementedActivityServiceServer) GetContentAnalytics(context.Context, *GetContentAnalyticsRequest) (*GetContentAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentAnalytics not implemented")
}
func (UnimplementedActivityServiceServer) TrackContentInteraction(context.Context, *TrackContentInteractionRequest) (*TrackContentInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackContentInteraction not implemented")
}
func (UnimplementedActivityServiceServer) TrackUserJourney(context.Context, *TrackUserJourneyRequest) (*TrackUserJourneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackUserJourney not implemented")
}
func (UnimplementedActivityServiceServer) GetUserJourneyAnalytics(context.Context, *GetUserJourneyAnalyticsRequest) (*GetUserJourneyAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJourneyAnalytics not implemented")
}
func (UnimplementedActivityServiceServer) TrackNotificationEvent(context.Context, *TrackNotificationEventRequest) (*TrackNotificationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackNotificationEvent not implemented")
}
func (UnimplementedActivityServiceServer) GetNotificationAnalytics(context.Context, *GetNotificationAnalyticsRequest) (*GetNotificationAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationAnalytics not implemented")
}
func (UnimplementedActivityServiceServer) TrackFinancialEvent(context.Context, *TrackFinancialEventRequest) (*TrackFinancialEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackFinancialEvent not implemented")
}
func (UnimplementedActivityServiceServer) GetFinancialEvents(context.Context, *GetFinancialEventsRequest) (*GetFinancialEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialEvents not implemented")
}
func (UnimplementedActivityServiceServer) TrackIntegrationEvent(context.Context, *TrackIntegrationEventRequest) (*TrackIntegrationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackIntegrationEvent not implemented")
}
func (UnimplementedActivityServiceServer) GetIntegrationEvents(context.Context, *GetIntegrationEventsRequest) (*GetIntegrationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationEvents not implemented")
}
func (UnimplementedActivityServiceServer) TrackIncidentEvent(context.Context, *TrackIncidentEventRequest) (*TrackIncidentEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackIncidentEvent not implemented")
}
func (UnimplementedActivityServiceServer) GetIncidentEvents(context.Context, *GetIncidentEventsRequest) (*GetIncidentEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncidentEvents not implemented")
}
func (UnimplementedActivityServiceServer) TrackComplianceEvent(context.Context, *TrackComplianceEventRequest) (*TrackComplianceEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackComplianceEvent not implemented")
}
func (UnimplementedActivityServiceServer) GetComplianceEvents(context.Context, *GetComplianceEventsRequest) (*GetComplianceEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComplianceEvents not implemented")
}
func (UnimplementedActivityServiceServer) TrackSearchActivity(context.Context, *TrackSearchActivityRequest) (*TrackSearchActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackSearchActivity not implemented")
}
func (UnimplementedActivityServiceServer) GetSearchAnalytics(context.Context, *GetSearchAnalyticsRequest) (*GetSearchAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchAnalytics not implemented")
}
func (UnimplementedActivityServiceServer) TrackPerformanceEvent(context.Context, *TrackPerformanceEventRequest) (*TrackPerformanceEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackPerformanceEvent not implemented")
}
func (UnimplementedActivityServiceServer) GetPerformanceAnalytics(context.Context, *GetPerformanceAnalyticsRequest) (*GetPerformanceAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceAnalytics not implemented")
}
func (UnimplementedActivityServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedActivityServiceServer) mustEmbedUnimplementedActivityServiceServer() {}
func (UnimplementedActivityServiceServer) testEmbeddedByValue()                         {}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	// If the following call pancis, it indicates UnimplementedActivityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_TrackActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackActivity(ctx, req.(*TrackActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetUserActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetUserActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetUserActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetUserActivities(ctx, req.(*GetUserActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetActivityAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetActivityAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetActivityAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetActivityAnalytics(ctx, req.(*GetActivityAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackSecurityEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackSecurityEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackSecurityEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackSecurityEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackSecurityEvent(ctx, req.(*TrackSecurityEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetSecurityEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetSecurityEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetSecurityEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetSecurityEvents(ctx, req.(*GetSecurityEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetUserBehaviorAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBehaviorAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetUserBehaviorAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetUserBehaviorAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetUserBehaviorAnalytics(ctx, req.(*GetUserBehaviorAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetReadingBehavior_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadingBehaviorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetReadingBehavior(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetReadingBehavior_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetReadingBehavior(ctx, req.(*GetReadingBehaviorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackRecommendationInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRecommendationInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackRecommendationInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackRecommendationInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackRecommendationInteraction(ctx, req.(*TrackRecommendationInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetRecommendationAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetRecommendationAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetRecommendationAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetRecommendationAnalytics(ctx, req.(*GetRecommendationAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetContentAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetContentAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetContentAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetContentAnalytics(ctx, req.(*GetContentAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackContentInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackContentInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackContentInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackContentInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackContentInteraction(ctx, req.(*TrackContentInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackUserJourney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackUserJourneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackUserJourney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackUserJourney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackUserJourney(ctx, req.(*TrackUserJourneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetUserJourneyAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJourneyAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetUserJourneyAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetUserJourneyAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetUserJourneyAnalytics(ctx, req.(*GetUserJourneyAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackNotificationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackNotificationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackNotificationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackNotificationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackNotificationEvent(ctx, req.(*TrackNotificationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetNotificationAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetNotificationAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetNotificationAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetNotificationAnalytics(ctx, req.(*GetNotificationAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackFinancialEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackFinancialEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackFinancialEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackFinancialEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackFinancialEvent(ctx, req.(*TrackFinancialEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetFinancialEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetFinancialEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetFinancialEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetFinancialEvents(ctx, req.(*GetFinancialEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackIntegrationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackIntegrationEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackIntegrationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackIntegrationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackIntegrationEvent(ctx, req.(*TrackIntegrationEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetIntegrationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetIntegrationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetIntegrationEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetIntegrationEvents(ctx, req.(*GetIntegrationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackIncidentEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackIncidentEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackIncidentEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackIncidentEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackIncidentEvent(ctx, req.(*TrackIncidentEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetIncidentEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetIncidentEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetIncidentEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetIncidentEvents(ctx, req.(*GetIncidentEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackComplianceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackComplianceEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackComplianceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackComplianceEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackComplianceEvent(ctx, req.(*TrackComplianceEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetComplianceEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComplianceEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetComplianceEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetComplianceEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetComplianceEvents(ctx, req.(*GetComplianceEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackSearchActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackSearchActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackSearchActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackSearchActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackSearchActivity(ctx, req.(*TrackSearchActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetSearchAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetSearchAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetSearchAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetSearchAnalytics(ctx, req.(*GetSearchAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_TrackPerformanceEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackPerformanceEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).TrackPerformanceEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_TrackPerformanceEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).TrackPerformanceEvent(ctx, req.(*TrackPerformanceEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetPerformanceAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetPerformanceAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetPerformanceAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetPerformanceAnalytics(ctx, req.(*GetPerformanceAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity_svc.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackActivity",
			Handler:    _ActivityService_TrackActivity_Handler,
		},
		{
			MethodName: "GetUserActivities",
			Handler:    _ActivityService_GetUserActivities_Handler,
		},
		{
			MethodName: "GetActivityAnalytics",
			Handler:    _ActivityService_GetActivityAnalytics_Handler,
		},
		{
			MethodName: "TrackSecurityEvent",
			Handler:    _ActivityService_TrackSecurityEvent_Handler,
		},
		{
			MethodName: "GetSecurityEvents",
			Handler:    _ActivityService_GetSecurityEvents_Handler,
		},
		{
			MethodName: "GetUserBehaviorAnalytics",
			Handler:    _ActivityService_GetUserBehaviorAnalytics_Handler,
		},
		{
			MethodName: "GetReadingBehavior",
			Handler:    _ActivityService_GetReadingBehavior_Handler,
		},
		{
			MethodName: "TrackRecommendationInteraction",
			Handler:    _ActivityService_TrackRecommendationInteraction_Handler,
		},
		{
			MethodName: "GetRecommendationAnalytics",
			Handler:    _ActivityService_GetRecommendationAnalytics_Handler,
		},
		{
			MethodName: "GetContentAnalytics",
			Handler:    _ActivityService_GetContentAnalytics_Handler,
		},
		{
			MethodName: "TrackContentInteraction",
			Handler:    _ActivityService_TrackContentInteraction_Handler,
		},
		{
			MethodName: "TrackUserJourney",
			Handler:    _ActivityService_TrackUserJourney_Handler,
		},
		{
			MethodName: "GetUserJourneyAnalytics",
			Handler:    _ActivityService_GetUserJourneyAnalytics_Handler,
		},
		{
			MethodName: "TrackNotificationEvent",
			Handler:    _ActivityService_TrackNotificationEvent_Handler,
		},
		{
			MethodName: "GetNotificationAnalytics",
			Handler:    _ActivityService_GetNotificationAnalytics_Handler,
		},
		{
			MethodName: "TrackFinancialEvent",
			Handler:    _ActivityService_TrackFinancialEvent_Handler,
		},
		{
			MethodName: "GetFinancialEvents",
			Handler:    _ActivityService_GetFinancialEvents_Handler,
		},
		{
			MethodName: "TrackIntegrationEvent",
			Handler:    _ActivityService_TrackIntegrationEvent_Handler,
		},
		{
			MethodName: "GetIntegrationEvents",
			Handler:    _ActivityService_GetIntegrationEvents_Handler,
		},
		{
			MethodName: "TrackIncidentEvent",
			Handler:    _ActivityService_TrackIncidentEvent_Handler,
		},
		{
			MethodName: "GetIncidentEvents",
			Handler:    _ActivityService_GetIncidentEvents_Handler,
		},
		{
			MethodName: "TrackComplianceEvent",
			Handler:    _ActivityService_TrackComplianceEvent_Handler,
		},
		{
			MethodName: "GetComplianceEvents",
			Handler:    _ActivityService_GetComplianceEvents_Handler,
		},
		{
			MethodName: "TrackSearchActivity",
			Handler:    _ActivityService_TrackSearchActivity_Handler,
		},
		{
			MethodName: "GetSearchAnalytics",
			Handler:    _ActivityService_GetSearchAnalytics_Handler,
		},
		{
			MethodName: "TrackPerformanceEvent",
			Handler:    _ActivityService_TrackPerformanceEvent_Handler,
		},
		{
			MethodName: "GetPerformanceAnalytics",
			Handler:    _ActivityService_GetPerformanceAnalytics_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ActivityService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/serviceconn/gateway_activity/pb/gw_activity.proto",
}
