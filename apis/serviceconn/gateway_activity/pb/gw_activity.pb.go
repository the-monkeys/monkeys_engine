// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v4.25.1
// source: apis/serviceconn/gateway_activity/pb/gw_activity.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type ActivityCategory int32

const (
	ActivityCategory_CATEGORY_UNSPECIFIED    ActivityCategory = 0
	ActivityCategory_CATEGORY_AUTHENTICATION ActivityCategory = 1
	ActivityCategory_CATEGORY_AUTHORIZATION  ActivityCategory = 2
	ActivityCategory_CATEGORY_CONTENT        ActivityCategory = 3
	ActivityCategory_CATEGORY_SOCIAL         ActivityCategory = 4
	ActivityCategory_CATEGORY_SEARCH         ActivityCategory = 5
	ActivityCategory_CATEGORY_NAVIGATION     ActivityCategory = 6
	ActivityCategory_CATEGORY_RECOMMENDATION ActivityCategory = 7
	ActivityCategory_CATEGORY_ANALYTICS      ActivityCategory = 8
	ActivityCategory_CATEGORY_SECURITY       ActivityCategory = 9
	ActivityCategory_CATEGORY_SYSTEM         ActivityCategory = 10
	ActivityCategory_CATEGORY_NOTIFICATION   ActivityCategory = 11
	ActivityCategory_CATEGORY_COMPLIANCE     ActivityCategory = 12
	ActivityCategory_CATEGORY_FINANCIAL      ActivityCategory = 13
	ActivityCategory_CATEGORY_INTEGRATION    ActivityCategory = 14
	ActivityCategory_CATEGORY_INCIDENT       ActivityCategory = 15
)

// Enum value maps for ActivityCategory.
var (
	ActivityCategory_name = map[int32]string{
		0:  "CATEGORY_UNSPECIFIED",
		1:  "CATEGORY_AUTHENTICATION",
		2:  "CATEGORY_AUTHORIZATION",
		3:  "CATEGORY_CONTENT",
		4:  "CATEGORY_SOCIAL",
		5:  "CATEGORY_SEARCH",
		6:  "CATEGORY_NAVIGATION",
		7:  "CATEGORY_RECOMMENDATION",
		8:  "CATEGORY_ANALYTICS",
		9:  "CATEGORY_SECURITY",
		10: "CATEGORY_SYSTEM",
		11: "CATEGORY_NOTIFICATION",
		12: "CATEGORY_COMPLIANCE",
		13: "CATEGORY_FINANCIAL",
		14: "CATEGORY_INTEGRATION",
		15: "CATEGORY_INCIDENT",
	}
	ActivityCategory_value = map[string]int32{
		"CATEGORY_UNSPECIFIED":    0,
		"CATEGORY_AUTHENTICATION": 1,
		"CATEGORY_AUTHORIZATION":  2,
		"CATEGORY_CONTENT":        3,
		"CATEGORY_SOCIAL":         4,
		"CATEGORY_SEARCH":         5,
		"CATEGORY_NAVIGATION":     6,
		"CATEGORY_RECOMMENDATION": 7,
		"CATEGORY_ANALYTICS":      8,
		"CATEGORY_SECURITY":       9,
		"CATEGORY_SYSTEM":         10,
		"CATEGORY_NOTIFICATION":   11,
		"CATEGORY_COMPLIANCE":     12,
		"CATEGORY_FINANCIAL":      13,
		"CATEGORY_INTEGRATION":    14,
		"CATEGORY_INCIDENT":       15,
	}
)

func (x ActivityCategory) Enum() *ActivityCategory {
	p := new(ActivityCategory)
	*p = x
	return p
}

func (x ActivityCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[0].Descriptor()
}

func (ActivityCategory) Type() protoreflect.EnumType {
	return &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[0]
}

func (x ActivityCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityCategory.Descriptor instead.
func (ActivityCategory) EnumDescriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{0}
}

type Severity int32

const (
	Severity_SEVERITY_UNSPECIFIED Severity = 0
	Severity_SEVERITY_LOW         Severity = 1
	Severity_SEVERITY_MEDIUM      Severity = 2
	Severity_SEVERITY_HIGH        Severity = 3
	Severity_SEVERITY_CRITICAL    Severity = 4
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "SEVERITY_LOW",
		2: "SEVERITY_MEDIUM",
		3: "SEVERITY_HIGH",
		4: "SEVERITY_CRITICAL",
	}
	Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"SEVERITY_LOW":         1,
		"SEVERITY_MEDIUM":      2,
		"SEVERITY_HIGH":        3,
		"SEVERITY_CRITICAL":    4,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[1].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[1]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{1}
}

type JourneyStage int32

const (
	JourneyStage_JOURNEY_STAGE_UNSPECIFIED  JourneyStage = 0
	JourneyStage_JOURNEY_STAGE_ONBOARDING   JourneyStage = 1
	JourneyStage_JOURNEY_STAGE_ACTIVATION   JourneyStage = 2
	JourneyStage_JOURNEY_STAGE_ENGAGEMENT   JourneyStage = 3
	JourneyStage_JOURNEY_STAGE_RETENTION    JourneyStage = 4
	JourneyStage_JOURNEY_STAGE_CHURN        JourneyStage = 5
	JourneyStage_JOURNEY_STAGE_REACTIVATION JourneyStage = 6
)

// Enum value maps for JourneyStage.
var (
	JourneyStage_name = map[int32]string{
		0: "JOURNEY_STAGE_UNSPECIFIED",
		1: "JOURNEY_STAGE_ONBOARDING",
		2: "JOURNEY_STAGE_ACTIVATION",
		3: "JOURNEY_STAGE_ENGAGEMENT",
		4: "JOURNEY_STAGE_RETENTION",
		5: "JOURNEY_STAGE_CHURN",
		6: "JOURNEY_STAGE_REACTIVATION",
	}
	JourneyStage_value = map[string]int32{
		"JOURNEY_STAGE_UNSPECIFIED":  0,
		"JOURNEY_STAGE_ONBOARDING":   1,
		"JOURNEY_STAGE_ACTIVATION":   2,
		"JOURNEY_STAGE_ENGAGEMENT":   3,
		"JOURNEY_STAGE_RETENTION":    4,
		"JOURNEY_STAGE_CHURN":        5,
		"JOURNEY_STAGE_REACTIVATION": 6,
	}
)

func (x JourneyStage) Enum() *JourneyStage {
	p := new(JourneyStage)
	*p = x
	return p
}

func (x JourneyStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JourneyStage) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[2].Descriptor()
}

func (JourneyStage) Type() protoreflect.EnumType {
	return &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[2]
}

func (x JourneyStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JourneyStage.Descriptor instead.
func (JourneyStage) EnumDescriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{2}
}

type Platform int32

const (
	Platform_PLATFORM_UNSPECIFIED Platform = 0
	Platform_PLATFORM_WEB         Platform = 1
	Platform_PLATFORM_MOBILE      Platform = 2
	Platform_PLATFORM_TABLET      Platform = 3
	Platform_PLATFORM_API         Platform = 4
	Platform_PLATFORM_DESKTOP     Platform = 5
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "PLATFORM_UNSPECIFIED",
		1: "PLATFORM_WEB",
		2: "PLATFORM_MOBILE",
		3: "PLATFORM_TABLET",
		4: "PLATFORM_API",
		5: "PLATFORM_DESKTOP",
	}
	Platform_value = map[string]int32{
		"PLATFORM_UNSPECIFIED": 0,
		"PLATFORM_WEB":         1,
		"PLATFORM_MOBILE":      2,
		"PLATFORM_TABLET":      3,
		"PLATFORM_API":         4,
		"PLATFORM_DESKTOP":     5,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[3].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[3]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{3}
}

type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNSPECIFIED DeviceType = 0
	DeviceType_DEVICE_TYPE_DESKTOP     DeviceType = 1
	DeviceType_DEVICE_TYPE_MOBILE      DeviceType = 2
	DeviceType_DEVICE_TYPE_TABLET      DeviceType = 3
	DeviceType_DEVICE_TYPE_BOT         DeviceType = 4
	DeviceType_DEVICE_TYPE_UNKNOWN     DeviceType = 5
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_UNSPECIFIED",
		1: "DEVICE_TYPE_DESKTOP",
		2: "DEVICE_TYPE_MOBILE",
		3: "DEVICE_TYPE_TABLET",
		4: "DEVICE_TYPE_BOT",
		5: "DEVICE_TYPE_UNKNOWN",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNSPECIFIED": 0,
		"DEVICE_TYPE_DESKTOP":     1,
		"DEVICE_TYPE_MOBILE":      2,
		"DEVICE_TYPE_TABLET":      3,
		"DEVICE_TYPE_BOT":         4,
		"DEVICE_TYPE_UNKNOWN":     5,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[4].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[4]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{4}
}

type NotificationChannel int32

const (
	NotificationChannel_NOTIFICATION_CHANNEL_UNSPECIFIED NotificationChannel = 0
	NotificationChannel_NOTIFICATION_CHANNEL_EMAIL       NotificationChannel = 1
	NotificationChannel_NOTIFICATION_CHANNEL_PUSH        NotificationChannel = 2
	NotificationChannel_NOTIFICATION_CHANNEL_IN_APP      NotificationChannel = 3
	NotificationChannel_NOTIFICATION_CHANNEL_SMS         NotificationChannel = 4
	NotificationChannel_NOTIFICATION_CHANNEL_WEBHOOK     NotificationChannel = 5
)

// Enum value maps for NotificationChannel.
var (
	NotificationChannel_name = map[int32]string{
		0: "NOTIFICATION_CHANNEL_UNSPECIFIED",
		1: "NOTIFICATION_CHANNEL_EMAIL",
		2: "NOTIFICATION_CHANNEL_PUSH",
		3: "NOTIFICATION_CHANNEL_IN_APP",
		4: "NOTIFICATION_CHANNEL_SMS",
		5: "NOTIFICATION_CHANNEL_WEBHOOK",
	}
	NotificationChannel_value = map[string]int32{
		"NOTIFICATION_CHANNEL_UNSPECIFIED": 0,
		"NOTIFICATION_CHANNEL_EMAIL":       1,
		"NOTIFICATION_CHANNEL_PUSH":        2,
		"NOTIFICATION_CHANNEL_IN_APP":      3,
		"NOTIFICATION_CHANNEL_SMS":         4,
		"NOTIFICATION_CHANNEL_WEBHOOK":     5,
	}
)

func (x NotificationChannel) Enum() *NotificationChannel {
	p := new(NotificationChannel)
	*p = x
	return p
}

func (x NotificationChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[5].Descriptor()
}

func (NotificationChannel) Type() protoreflect.EnumType {
	return &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[5]
}

func (x NotificationChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationChannel.Descriptor instead.
func (NotificationChannel) EnumDescriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{5}
}

type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_UNSPECIFIED   NotificationType = 0
	NotificationType_NOTIFICATION_TYPE_MARKETING     NotificationType = 1
	NotificationType_NOTIFICATION_TYPE_TRANSACTIONAL NotificationType = 2
	NotificationType_NOTIFICATION_TYPE_SYSTEM        NotificationType = 3
	NotificationType_NOTIFICATION_TYPE_ALERT         NotificationType = 4
	NotificationType_NOTIFICATION_TYPE_SECURITY      NotificationType = 5
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0: "NOTIFICATION_TYPE_UNSPECIFIED",
		1: "NOTIFICATION_TYPE_MARKETING",
		2: "NOTIFICATION_TYPE_TRANSACTIONAL",
		3: "NOTIFICATION_TYPE_SYSTEM",
		4: "NOTIFICATION_TYPE_ALERT",
		5: "NOTIFICATION_TYPE_SECURITY",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED":   0,
		"NOTIFICATION_TYPE_MARKETING":     1,
		"NOTIFICATION_TYPE_TRANSACTIONAL": 2,
		"NOTIFICATION_TYPE_SYSTEM":        3,
		"NOTIFICATION_TYPE_ALERT":         4,
		"NOTIFICATION_TYPE_SECURITY":      5,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[6].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes[6]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{6}
}

// Core Messages
type ActivityEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId  string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SessionId  string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Category   ActivityCategory       `protobuf:"varint,5,opt,name=category,proto3,enum=activity_svc.ActivityCategory" json:"category,omitempty"`
	Action     string                 `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	Resource   string                 `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
	ResourceId string                 `protobuf:"bytes,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ClientInfo *ClientInfo            `protobuf:"bytes,9,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	Metadata   *structpb.Struct       `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Success    bool                   `protobuf:"varint,11,opt,name=success,proto3" json:"success,omitempty"`
	DurationMs int64                  `protobuf:"varint,12,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ActivityEvent) Reset() {
	*x = ActivityEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityEvent) ProtoMessage() {}

func (x *ActivityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityEvent.ProtoReflect.Descriptor instead.
func (*ActivityEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{0}
}

func (x *ActivityEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActivityEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActivityEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ActivityEvent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ActivityEvent) GetCategory() ActivityCategory {
	if x != nil {
		return x.Category
	}
	return ActivityCategory_CATEGORY_UNSPECIFIED
}

func (x *ActivityEvent) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ActivityEvent) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ActivityEvent) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ActivityEvent) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *ActivityEvent) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ActivityEvent) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActivityEvent) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ActivityEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ActivityEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type SecurityEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId   string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	EventType   string                 `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Severity    Severity               `protobuf:"varint,5,opt,name=severity,proto3,enum=activity_svc.Severity" json:"severity,omitempty"`
	Description string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Context     *SecurityContext       `protobuf:"bytes,7,opt,name=context,proto3" json:"context,omitempty"`
	RiskScore   int32                  `protobuf:"varint,8,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	Resolved    bool                   `protobuf:"varint,9,opt,name=resolved,proto3" json:"resolved,omitempty"`
	ResolvedBy  string                 `protobuf:"bytes,10,opt,name=resolved_by,json=resolvedBy,proto3" json:"resolved_by,omitempty"`
	ResolvedAt  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SecurityEvent) Reset() {
	*x = SecurityEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityEvent) ProtoMessage() {}

func (x *SecurityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityEvent.ProtoReflect.Descriptor instead.
func (*SecurityEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{1}
}

func (x *SecurityEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecurityEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SecurityEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SecurityEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *SecurityEvent) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *SecurityEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SecurityEvent) GetContext() *SecurityContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SecurityEvent) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *SecurityEvent) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

func (x *SecurityEvent) GetResolvedBy() string {
	if x != nil {
		return x.ResolvedBy
	}
	return ""
}

func (x *SecurityEvent) GetResolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedAt
	}
	return nil
}

func (x *SecurityEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SecurityEvent) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SecurityContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress      string                 `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	UserAgent      string                 `protobuf:"bytes,2,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Country        string                 `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	FailedAttempts int32                  `protobuf:"varint,4,opt,name=failed_attempts,json=failedAttempts,proto3" json:"failed_attempts,omitempty"`
	LastSuccess    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_success,json=lastSuccess,proto3" json:"last_success,omitempty"`
	Patterns       *structpb.Struct       `protobuf:"bytes,6,opt,name=patterns,proto3" json:"patterns,omitempty"`
}

func (x *SecurityContext) Reset() {
	*x = SecurityContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityContext) ProtoMessage() {}

func (x *SecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityContext.ProtoReflect.Descriptor instead.
func (*SecurityContext) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{2}
}

func (x *SecurityContext) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *SecurityContext) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *SecurityContext) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SecurityContext) GetFailedAttempts() int32 {
	if x != nil {
		return x.FailedAttempts
	}
	return 0
}

func (x *SecurityContext) GetLastSuccess() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSuccess
	}
	return nil
}

func (x *SecurityContext) GetPatterns() *structpb.Struct {
	if x != nil {
		return x.Patterns
	}
	return nil
}

type UserBehaviorAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId            string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TimeRange            string                 `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	TotalActivities      int64                  `protobuf:"varint,4,opt,name=total_activities,json=totalActivities,proto3" json:"total_activities,omitempty"`
	UniqueActions        int32                  `protobuf:"varint,5,opt,name=unique_actions,json=uniqueActions,proto3" json:"unique_actions,omitempty"`
	SessionCount         int32                  `protobuf:"varint,6,opt,name=session_count,json=sessionCount,proto3" json:"session_count,omitempty"`
	AvgSessionDurationMs int64                  `protobuf:"varint,7,opt,name=avg_session_duration_ms,json=avgSessionDurationMs,proto3" json:"avg_session_duration_ms,omitempty"`
	CategoryBreakdown    *structpb.Struct       `protobuf:"bytes,8,opt,name=category_breakdown,json=categoryBreakdown,proto3" json:"category_breakdown,omitempty"`
	ActionFrequency      *structpb.Struct       `protobuf:"bytes,9,opt,name=action_frequency,json=actionFrequency,proto3" json:"action_frequency,omitempty"`
	HourlyPattern        []*HourlyActivity      `protobuf:"bytes,10,rep,name=hourly_pattern,json=hourlyPattern,proto3" json:"hourly_pattern,omitempty"`
	DeviceUsage          *structpb.Struct       `protobuf:"bytes,11,opt,name=device_usage,json=deviceUsage,proto3" json:"device_usage,omitempty"`
	LocationPattern      []*LocationActivity    `protobuf:"bytes,12,rep,name=location_pattern,json=locationPattern,proto3" json:"location_pattern,omitempty"`
	EngagementScore      float64                `protobuf:"fixed64,13,opt,name=engagement_score,json=engagementScore,proto3" json:"engagement_score,omitempty"`
	RiskScore            int32                  `protobuf:"varint,14,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
	LastActivity         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UserBehaviorAnalytics) Reset() {
	*x = UserBehaviorAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBehaviorAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBehaviorAnalytics) ProtoMessage() {}

func (x *UserBehaviorAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBehaviorAnalytics.ProtoReflect.Descriptor instead.
func (*UserBehaviorAnalytics) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{3}
}

func (x *UserBehaviorAnalytics) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserBehaviorAnalytics) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserBehaviorAnalytics) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *UserBehaviorAnalytics) GetTotalActivities() int64 {
	if x != nil {
		return x.TotalActivities
	}
	return 0
}

func (x *UserBehaviorAnalytics) GetUniqueActions() int32 {
	if x != nil {
		return x.UniqueActions
	}
	return 0
}

func (x *UserBehaviorAnalytics) GetSessionCount() int32 {
	if x != nil {
		return x.SessionCount
	}
	return 0
}

func (x *UserBehaviorAnalytics) GetAvgSessionDurationMs() int64 {
	if x != nil {
		return x.AvgSessionDurationMs
	}
	return 0
}

func (x *UserBehaviorAnalytics) GetCategoryBreakdown() *structpb.Struct {
	if x != nil {
		return x.CategoryBreakdown
	}
	return nil
}

func (x *UserBehaviorAnalytics) GetActionFrequency() *structpb.Struct {
	if x != nil {
		return x.ActionFrequency
	}
	return nil
}

func (x *UserBehaviorAnalytics) GetHourlyPattern() []*HourlyActivity {
	if x != nil {
		return x.HourlyPattern
	}
	return nil
}

func (x *UserBehaviorAnalytics) GetDeviceUsage() *structpb.Struct {
	if x != nil {
		return x.DeviceUsage
	}
	return nil
}

func (x *UserBehaviorAnalytics) GetLocationPattern() []*LocationActivity {
	if x != nil {
		return x.LocationPattern
	}
	return nil
}

func (x *UserBehaviorAnalytics) GetEngagementScore() float64 {
	if x != nil {
		return x.EngagementScore
	}
	return 0
}

func (x *UserBehaviorAnalytics) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

func (x *UserBehaviorAnalytics) GetLastActivity() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivity
	}
	return nil
}

func (x *UserBehaviorAnalytics) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserBehaviorAnalytics) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type HourlyActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour  int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *HourlyActivity) Reset() {
	*x = HourlyActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HourlyActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HourlyActivity) ProtoMessage() {}

func (x *HourlyActivity) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HourlyActivity.ProtoReflect.Descriptor instead.
func (*HourlyActivity) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{4}
}

func (x *HourlyActivity) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *HourlyActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type LocationActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Count   int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *LocationActivity) Reset() {
	*x = LocationActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationActivity) ProtoMessage() {}

func (x *LocationActivity) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationActivity.ProtoReflect.Descriptor instead.
func (*LocationActivity) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{5}
}

func (x *LocationActivity) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *LocationActivity) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ReadingBehaviorAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId           string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId        string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ContentId        string                 `protobuf:"bytes,4,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	SessionId        string                 `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ScrollDepth      float64                `protobuf:"fixed64,6,opt,name=scroll_depth,json=scrollDepth,proto3" json:"scroll_depth,omitempty"`
	ReadingSpeed     float64                `protobuf:"fixed64,7,opt,name=reading_speed,json=readingSpeed,proto3" json:"reading_speed,omitempty"`
	DwellTimeMs      int64                  `protobuf:"varint,8,opt,name=dwell_time_ms,json=dwellTimeMs,proto3" json:"dwell_time_ms,omitempty"`
	CompletionRate   float64                `protobuf:"fixed64,9,opt,name=completion_rate,json=completionRate,proto3" json:"completion_rate,omitempty"`
	ReturnVisits     int32                  `protobuf:"varint,10,opt,name=return_visits,json=returnVisits,proto3" json:"return_visits,omitempty"`
	WordCount        int32                  `protobuf:"varint,11,opt,name=word_count,json=wordCount,proto3" json:"word_count,omitempty"`
	ReadabilityScore float64                `protobuf:"fixed64,12,opt,name=readability_score,json=readabilityScore,proto3" json:"readability_score,omitempty"`
	DeviceType       DeviceType             `protobuf:"varint,13,opt,name=device_type,json=deviceType,proto3,enum=activity_svc.DeviceType" json:"device_type,omitempty"`
	TimeOfDay        int32                  `protobuf:"varint,14,opt,name=time_of_day,json=timeOfDay,proto3" json:"time_of_day,omitempty"`
	IsWeekend        bool                   `protobuf:"varint,15,opt,name=is_weekend,json=isWeekend,proto3" json:"is_weekend,omitempty"`
	ContentFormat    string                 `protobuf:"bytes,16,opt,name=content_format,json=contentFormat,proto3" json:"content_format,omitempty"`
	HasImages        bool                   `protobuf:"varint,17,opt,name=has_images,json=hasImages,proto3" json:"has_images,omitempty"`
	HasLinks         bool                   `protobuf:"varint,18,opt,name=has_links,json=hasLinks,proto3" json:"has_links,omitempty"`
	LinkClicks       int32                  `protobuf:"varint,19,opt,name=link_clicks,json=linkClicks,proto3" json:"link_clicks,omitempty"`
	ImageViews       int32                  `protobuf:"varint,20,opt,name=image_views,json=imageViews,proto3" json:"image_views,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ReadingBehaviorAnalytics) Reset() {
	*x = ReadingBehaviorAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadingBehaviorAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadingBehaviorAnalytics) ProtoMessage() {}

func (x *ReadingBehaviorAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadingBehaviorAnalytics.ProtoReflect.Descriptor instead.
func (*ReadingBehaviorAnalytics) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{6}
}

func (x *ReadingBehaviorAnalytics) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReadingBehaviorAnalytics) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReadingBehaviorAnalytics) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReadingBehaviorAnalytics) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *ReadingBehaviorAnalytics) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ReadingBehaviorAnalytics) GetScrollDepth() float64 {
	if x != nil {
		return x.ScrollDepth
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetReadingSpeed() float64 {
	if x != nil {
		return x.ReadingSpeed
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetDwellTimeMs() int64 {
	if x != nil {
		return x.DwellTimeMs
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetCompletionRate() float64 {
	if x != nil {
		return x.CompletionRate
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetReturnVisits() int32 {
	if x != nil {
		return x.ReturnVisits
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetWordCount() int32 {
	if x != nil {
		return x.WordCount
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetReadabilityScore() float64 {
	if x != nil {
		return x.ReadabilityScore
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_UNSPECIFIED
}

func (x *ReadingBehaviorAnalytics) GetTimeOfDay() int32 {
	if x != nil {
		return x.TimeOfDay
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetIsWeekend() bool {
	if x != nil {
		return x.IsWeekend
	}
	return false
}

func (x *ReadingBehaviorAnalytics) GetContentFormat() string {
	if x != nil {
		return x.ContentFormat
	}
	return ""
}

func (x *ReadingBehaviorAnalytics) GetHasImages() bool {
	if x != nil {
		return x.HasImages
	}
	return false
}

func (x *ReadingBehaviorAnalytics) GetHasLinks() bool {
	if x != nil {
		return x.HasLinks
	}
	return false
}

func (x *ReadingBehaviorAnalytics) GetLinkClicks() int32 {
	if x != nil {
		return x.LinkClicks
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetImageViews() int32 {
	if x != nil {
		return x.ImageViews
	}
	return 0
}

func (x *ReadingBehaviorAnalytics) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ReadingBehaviorAnalytics) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type RecommendationInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId             string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId          string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SessionId          string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RecommendationType string                 `protobuf:"bytes,5,opt,name=recommendation_type,json=recommendationType,proto3" json:"recommendation_type,omitempty"`
	ItemId             string                 `protobuf:"bytes,6,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Position           int32                  `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
	Action             string                 `protobuf:"bytes,8,opt,name=action,proto3" json:"action,omitempty"`
	Context            *structpb.Struct       `protobuf:"bytes,9,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *RecommendationInteraction) Reset() {
	*x = RecommendationInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendationInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendationInteraction) ProtoMessage() {}

func (x *RecommendationInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendationInteraction.ProtoReflect.Descriptor instead.
func (*RecommendationInteraction) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{7}
}

func (x *RecommendationInteraction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecommendationInteraction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RecommendationInteraction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *RecommendationInteraction) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RecommendationInteraction) GetRecommendationType() string {
	if x != nil {
		return x.RecommendationType
	}
	return ""
}

func (x *RecommendationInteraction) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *RecommendationInteraction) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *RecommendationInteraction) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RecommendationInteraction) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RecommendationInteraction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RecommendationInteraction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ContentInteraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId       string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ContentId       string                 `protobuf:"bytes,4,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	ContentType     string                 `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	InteractionType string                 `protobuf:"bytes,6,opt,name=interaction_type,json=interactionType,proto3" json:"interaction_type,omitempty"`
	DurationMs      int64                  `protobuf:"varint,7,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	ScrollDepth     float64                `protobuf:"fixed64,8,opt,name=scroll_depth,json=scrollDepth,proto3" json:"scroll_depth,omitempty"`
	ReadingSpeed    float64                `protobuf:"fixed64,9,opt,name=reading_speed,json=readingSpeed,proto3" json:"reading_speed,omitempty"`
	CompletionRate  float64                `protobuf:"fixed64,10,opt,name=completion_rate,json=completionRate,proto3" json:"completion_rate,omitempty"`
	Context         *structpb.Struct       `protobuf:"bytes,11,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ContentInteraction) Reset() {
	*x = ContentInteraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentInteraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentInteraction) ProtoMessage() {}

func (x *ContentInteraction) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentInteraction.ProtoReflect.Descriptor instead.
func (*ContentInteraction) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{8}
}

func (x *ContentInteraction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContentInteraction) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ContentInteraction) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ContentInteraction) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *ContentInteraction) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *ContentInteraction) GetInteractionType() string {
	if x != nil {
		return x.InteractionType
	}
	return ""
}

func (x *ContentInteraction) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *ContentInteraction) GetScrollDepth() float64 {
	if x != nil {
		return x.ScrollDepth
	}
	return 0
}

func (x *ContentInteraction) GetReadingSpeed() float64 {
	if x != nil {
		return x.ReadingSpeed
	}
	return 0
}

func (x *ContentInteraction) GetCompletionRate() float64 {
	if x != nil {
		return x.CompletionRate
	}
	return 0
}

func (x *ContentInteraction) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ContentInteraction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ContentInteraction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type SearchActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId      string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SessionId      string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Query          string                 `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Filters        *structpb.Struct       `protobuf:"bytes,6,opt,name=filters,proto3" json:"filters,omitempty"`
	ResultCount    int32                  `protobuf:"varint,7,opt,name=result_count,json=resultCount,proto3" json:"result_count,omitempty"`
	ClickedResults []string               `protobuf:"bytes,8,rep,name=clicked_results,json=clickedResults,proto3" json:"clicked_results,omitempty"`
	NoResults      bool                   `protobuf:"varint,9,opt,name=no_results,json=noResults,proto3" json:"no_results,omitempty"`
	Context        *structpb.Struct       `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *SearchActivity) Reset() {
	*x = SearchActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchActivity) ProtoMessage() {}

func (x *SearchActivity) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchActivity.ProtoReflect.Descriptor instead.
func (*SearchActivity) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{9}
}

func (x *SearchActivity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SearchActivity) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SearchActivity) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *SearchActivity) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SearchActivity) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchActivity) GetFilters() *structpb.Struct {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SearchActivity) GetResultCount() int32 {
	if x != nil {
		return x.ResultCount
	}
	return 0
}

func (x *SearchActivity) GetClickedResults() []string {
	if x != nil {
		return x.ClickedResults
	}
	return nil
}

func (x *SearchActivity) GetNoResults() bool {
	if x != nil {
		return x.NoResults
	}
	return false
}

func (x *SearchActivity) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SearchActivity) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SearchActivity) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type NotificationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId       string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Type            NotificationType       `protobuf:"varint,4,opt,name=type,proto3,enum=activity_svc.NotificationType" json:"type,omitempty"`
	Channel         NotificationChannel    `protobuf:"varint,5,opt,name=channel,proto3,enum=activity_svc.NotificationChannel" json:"channel,omitempty"`
	Template        string                 `protobuf:"bytes,6,opt,name=template,proto3" json:"template,omitempty"`
	Subject         string                 `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Status          string                 `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	DeliveryTimeMs  int64                  `protobuf:"varint,9,opt,name=delivery_time_ms,json=deliveryTimeMs,proto3" json:"delivery_time_ms,omitempty"`
	OpenTime        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	ClickTime       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=click_time,json=clickTime,proto3" json:"click_time,omitempty"`
	ClickedLinks    []string               `protobuf:"bytes,12,rep,name=clicked_links,json=clickedLinks,proto3" json:"clicked_links,omitempty"`
	DeviceInfo      *structpb.Struct       `protobuf:"bytes,13,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	LocationInfo    *structpb.Struct       `protobuf:"bytes,14,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`
	BounceReason    string                 `protobuf:"bytes,15,opt,name=bounce_reason,json=bounceReason,proto3" json:"bounce_reason,omitempty"`
	UnsubscribeTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=unsubscribe_time,json=unsubscribeTime,proto3" json:"unsubscribe_time,omitempty"`
	Context         *structpb.Struct       `protobuf:"bytes,17,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *NotificationEvent) Reset() {
	*x = NotificationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationEvent) ProtoMessage() {}

func (x *NotificationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationEvent.ProtoReflect.Descriptor instead.
func (*NotificationEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{10}
}

func (x *NotificationEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NotificationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NotificationEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *NotificationEvent) GetType() NotificationType {
	if x != nil {
		return x.Type
	}
	return NotificationType_NOTIFICATION_TYPE_UNSPECIFIED
}

func (x *NotificationEvent) GetChannel() NotificationChannel {
	if x != nil {
		return x.Channel
	}
	return NotificationChannel_NOTIFICATION_CHANNEL_UNSPECIFIED
}

func (x *NotificationEvent) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *NotificationEvent) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *NotificationEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NotificationEvent) GetDeliveryTimeMs() int64 {
	if x != nil {
		return x.DeliveryTimeMs
	}
	return 0
}

func (x *NotificationEvent) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *NotificationEvent) GetClickTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ClickTime
	}
	return nil
}

func (x *NotificationEvent) GetClickedLinks() []string {
	if x != nil {
		return x.ClickedLinks
	}
	return nil
}

func (x *NotificationEvent) GetDeviceInfo() *structpb.Struct {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *NotificationEvent) GetLocationInfo() *structpb.Struct {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

func (x *NotificationEvent) GetBounceReason() string {
	if x != nil {
		return x.BounceReason
	}
	return ""
}

func (x *NotificationEvent) GetUnsubscribeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UnsubscribeTime
	}
	return nil
}

func (x *NotificationEvent) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *NotificationEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NotificationEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NotificationEvent) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type FinancialEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId       string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TransactionType string                 `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Amount          float64                `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency        string                 `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Status          string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	PaymentMethod   string                 `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	TransactionId   string                 `protobuf:"bytes,9,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	SubscriptionId  string                 `protobuf:"bytes,10,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	PlanId          string                 `protobuf:"bytes,11,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	BillingCycle    string                 `protobuf:"bytes,12,opt,name=billing_cycle,json=billingCycle,proto3" json:"billing_cycle,omitempty"`
	TrialDays       int32                  `protobuf:"varint,13,opt,name=trial_days,json=trialDays,proto3" json:"trial_days,omitempty"`
	DiscountCode    string                 `protobuf:"bytes,14,opt,name=discount_code,json=discountCode,proto3" json:"discount_code,omitempty"`
	DiscountAmount  float64                `protobuf:"fixed64,15,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	TaxAmount       float64                `protobuf:"fixed64,16,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	ProcessingFee   float64                `protobuf:"fixed64,17,opt,name=processing_fee,json=processingFee,proto3" json:"processing_fee,omitempty"`
	FailureReason   string                 `protobuf:"bytes,18,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	RefundReason    string                 `protobuf:"bytes,19,opt,name=refund_reason,json=refundReason,proto3" json:"refund_reason,omitempty"`
	Context         *structpb.Struct       `protobuf:"bytes,20,opt,name=context,proto3" json:"context,omitempty"`
	ProcessedAt     *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *FinancialEvent) Reset() {
	*x = FinancialEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialEvent) ProtoMessage() {}

func (x *FinancialEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialEvent.ProtoReflect.Descriptor instead.
func (*FinancialEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{11}
}

func (x *FinancialEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FinancialEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FinancialEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *FinancialEvent) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *FinancialEvent) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *FinancialEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *FinancialEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FinancialEvent) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *FinancialEvent) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *FinancialEvent) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *FinancialEvent) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *FinancialEvent) GetBillingCycle() string {
	if x != nil {
		return x.BillingCycle
	}
	return ""
}

func (x *FinancialEvent) GetTrialDays() int32 {
	if x != nil {
		return x.TrialDays
	}
	return 0
}

func (x *FinancialEvent) GetDiscountCode() string {
	if x != nil {
		return x.DiscountCode
	}
	return ""
}

func (x *FinancialEvent) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *FinancialEvent) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *FinancialEvent) GetProcessingFee() float64 {
	if x != nil {
		return x.ProcessingFee
	}
	return 0
}

func (x *FinancialEvent) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *FinancialEvent) GetRefundReason() string {
	if x != nil {
		return x.RefundReason
	}
	return ""
}

func (x *FinancialEvent) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *FinancialEvent) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

func (x *FinancialEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FinancialEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FinancialEvent) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UserJourneyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId     string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	JourneyStage  JourneyStage           `protobuf:"varint,5,opt,name=journey_stage,json=journeyStage,proto3,enum=activity_svc.JourneyStage" json:"journey_stage,omitempty"`
	Funnel        string                 `protobuf:"bytes,6,opt,name=funnel,proto3" json:"funnel,omitempty"`
	Step          int32                  `protobuf:"varint,7,opt,name=step,proto3" json:"step,omitempty"`
	StepName      string                 `protobuf:"bytes,8,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	Conversion    bool                   `protobuf:"varint,9,opt,name=conversion,proto3" json:"conversion,omitempty"`
	DropOff       bool                   `protobuf:"varint,10,opt,name=drop_off,json=dropOff,proto3" json:"drop_off,omitempty"`
	TimeToStepMs  int64                  `protobuf:"varint,11,opt,name=time_to_step_ms,json=timeToStepMs,proto3" json:"time_to_step_ms,omitempty"`
	AbTestVariant string                 `protobuf:"bytes,12,opt,name=ab_test_variant,json=abTestVariant,proto3" json:"ab_test_variant,omitempty"`
	Referrer      string                 `protobuf:"bytes,13,opt,name=referrer,proto3" json:"referrer,omitempty"`
	UtmSource     string                 `protobuf:"bytes,14,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmMedium     string                 `protobuf:"bytes,15,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmCampaign   string                 `protobuf:"bytes,16,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
	Context       *structpb.Struct       `protobuf:"bytes,17,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UserJourneyEvent) Reset() {
	*x = UserJourneyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJourneyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJourneyEvent) ProtoMessage() {}

func (x *UserJourneyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJourneyEvent.ProtoReflect.Descriptor instead.
func (*UserJourneyEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{12}
}

func (x *UserJourneyEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserJourneyEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserJourneyEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *UserJourneyEvent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UserJourneyEvent) GetJourneyStage() JourneyStage {
	if x != nil {
		return x.JourneyStage
	}
	return JourneyStage_JOURNEY_STAGE_UNSPECIFIED
}

func (x *UserJourneyEvent) GetFunnel() string {
	if x != nil {
		return x.Funnel
	}
	return ""
}

func (x *UserJourneyEvent) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *UserJourneyEvent) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *UserJourneyEvent) GetConversion() bool {
	if x != nil {
		return x.Conversion
	}
	return false
}

func (x *UserJourneyEvent) GetDropOff() bool {
	if x != nil {
		return x.DropOff
	}
	return false
}

func (x *UserJourneyEvent) GetTimeToStepMs() int64 {
	if x != nil {
		return x.TimeToStepMs
	}
	return 0
}

func (x *UserJourneyEvent) GetAbTestVariant() string {
	if x != nil {
		return x.AbTestVariant
	}
	return ""
}

func (x *UserJourneyEvent) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *UserJourneyEvent) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *UserJourneyEvent) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *UserJourneyEvent) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *UserJourneyEvent) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UserJourneyEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UserJourneyEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type IntegrationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId           string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId        string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	IntegrationType  string                 `protobuf:"bytes,4,opt,name=integration_type,json=integrationType,proto3" json:"integration_type,omitempty"`
	Service          string                 `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
	Endpoint         string                 `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Method           string                 `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	StatusCode       int32                  `protobuf:"varint,8,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ResponseTimeMs   int64                  `protobuf:"varint,9,opt,name=response_time_ms,json=responseTimeMs,proto3" json:"response_time_ms,omitempty"`
	PayloadSizeBytes int64                  `protobuf:"varint,10,opt,name=payload_size_bytes,json=payloadSizeBytes,proto3" json:"payload_size_bytes,omitempty"`
	ApiKeyHash       string                 `protobuf:"bytes,11,opt,name=api_key_hash,json=apiKeyHash,proto3" json:"api_key_hash,omitempty"`
	OauthTokenHash   string                 `protobuf:"bytes,12,opt,name=oauth_token_hash,json=oauthTokenHash,proto3" json:"oauth_token_hash,omitempty"`
	RetryCount       int32                  `protobuf:"varint,13,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	Success          bool                   `protobuf:"varint,14,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage     string                 `protobuf:"bytes,15,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	RateLimited      bool                   `protobuf:"varint,16,opt,name=rate_limited,json=rateLimited,proto3" json:"rate_limited,omitempty"`
	Context          *structpb.Struct       `protobuf:"bytes,17,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *IntegrationEvent) Reset() {
	*x = IntegrationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationEvent) ProtoMessage() {}

func (x *IntegrationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationEvent.ProtoReflect.Descriptor instead.
func (*IntegrationEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{13}
}

func (x *IntegrationEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IntegrationEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IntegrationEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *IntegrationEvent) GetIntegrationType() string {
	if x != nil {
		return x.IntegrationType
	}
	return ""
}

func (x *IntegrationEvent) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *IntegrationEvent) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *IntegrationEvent) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *IntegrationEvent) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *IntegrationEvent) GetResponseTimeMs() int64 {
	if x != nil {
		return x.ResponseTimeMs
	}
	return 0
}

func (x *IntegrationEvent) GetPayloadSizeBytes() int64 {
	if x != nil {
		return x.PayloadSizeBytes
	}
	return 0
}

func (x *IntegrationEvent) GetApiKeyHash() string {
	if x != nil {
		return x.ApiKeyHash
	}
	return ""
}

func (x *IntegrationEvent) GetOauthTokenHash() string {
	if x != nil {
		return x.OauthTokenHash
	}
	return ""
}

func (x *IntegrationEvent) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *IntegrationEvent) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *IntegrationEvent) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *IntegrationEvent) GetRateLimited() bool {
	if x != nil {
		return x.RateLimited
	}
	return false
}

func (x *IntegrationEvent) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *IntegrationEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *IntegrationEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type IncidentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IncidentId         string                 `protobuf:"bytes,2,opt,name=incident_id,json=incidentId,proto3" json:"incident_id,omitempty"`
	IncidentType       string                 `protobuf:"bytes,3,opt,name=incident_type,json=incidentType,proto3" json:"incident_type,omitempty"`
	Severity           Severity               `protobuf:"varint,4,opt,name=severity,proto3,enum=activity_svc.Severity" json:"severity,omitempty"`
	Status             string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	AffectedUsers      []string               `protobuf:"bytes,6,rep,name=affected_users,json=affectedUsers,proto3" json:"affected_users,omitempty"`
	DataBreach         bool                   `protobuf:"varint,7,opt,name=data_breach,json=dataBreach,proto3" json:"data_breach,omitempty"`
	DataTypes          []string               `protobuf:"bytes,8,rep,name=data_types,json=dataTypes,proto3" json:"data_types,omitempty"`
	DetectionMethod    string                 `protobuf:"bytes,9,opt,name=detection_method,json=detectionMethod,proto3" json:"detection_method,omitempty"`
	Description        string                 `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	ImpactScope        string                 `protobuf:"bytes,11,opt,name=impact_scope,json=impactScope,proto3" json:"impact_scope,omitempty"`
	ResponseTeam       []string               `protobuf:"bytes,12,rep,name=response_team,json=responseTeam,proto3" json:"response_team,omitempty"`
	Actions            []string               `protobuf:"bytes,13,rep,name=actions,proto3" json:"actions,omitempty"`
	NotificationsSent  bool                   `protobuf:"varint,14,opt,name=notifications_sent,json=notificationsSent,proto3" json:"notifications_sent,omitempty"`
	RegulatorsNotified bool                   `protobuf:"varint,15,opt,name=regulators_notified,json=regulatorsNotified,proto3" json:"regulators_notified,omitempty"`
	ForensicData       *structpb.Struct       `protobuf:"bytes,16,opt,name=forensic_data,json=forensicData,proto3" json:"forensic_data,omitempty"`
	ResolutionTimeMs   int64                  `protobuf:"varint,17,opt,name=resolution_time_ms,json=resolutionTimeMs,proto3" json:"resolution_time_ms,omitempty"`
	ResolvedBy         string                 `protobuf:"bytes,18,opt,name=resolved_by,json=resolvedBy,proto3" json:"resolved_by,omitempty"`
	Context            *structpb.Struct       `protobuf:"bytes,19,opt,name=context,proto3" json:"context,omitempty"`
	DetectedAt         *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=detected_at,json=detectedAt,proto3" json:"detected_at,omitempty"`
	ResolvedAt         *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *IncidentEvent) Reset() {
	*x = IncidentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncidentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentEvent) ProtoMessage() {}

func (x *IncidentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentEvent.ProtoReflect.Descriptor instead.
func (*IncidentEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{14}
}

func (x *IncidentEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IncidentEvent) GetIncidentId() string {
	if x != nil {
		return x.IncidentId
	}
	return ""
}

func (x *IncidentEvent) GetIncidentType() string {
	if x != nil {
		return x.IncidentType
	}
	return ""
}

func (x *IncidentEvent) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *IncidentEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IncidentEvent) GetAffectedUsers() []string {
	if x != nil {
		return x.AffectedUsers
	}
	return nil
}

func (x *IncidentEvent) GetDataBreach() bool {
	if x != nil {
		return x.DataBreach
	}
	return false
}

func (x *IncidentEvent) GetDataTypes() []string {
	if x != nil {
		return x.DataTypes
	}
	return nil
}

func (x *IncidentEvent) GetDetectionMethod() string {
	if x != nil {
		return x.DetectionMethod
	}
	return ""
}

func (x *IncidentEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IncidentEvent) GetImpactScope() string {
	if x != nil {
		return x.ImpactScope
	}
	return ""
}

func (x *IncidentEvent) GetResponseTeam() []string {
	if x != nil {
		return x.ResponseTeam
	}
	return nil
}

func (x *IncidentEvent) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *IncidentEvent) GetNotificationsSent() bool {
	if x != nil {
		return x.NotificationsSent
	}
	return false
}

func (x *IncidentEvent) GetRegulatorsNotified() bool {
	if x != nil {
		return x.RegulatorsNotified
	}
	return false
}

func (x *IncidentEvent) GetForensicData() *structpb.Struct {
	if x != nil {
		return x.ForensicData
	}
	return nil
}

func (x *IncidentEvent) GetResolutionTimeMs() int64 {
	if x != nil {
		return x.ResolutionTimeMs
	}
	return 0
}

func (x *IncidentEvent) GetResolvedBy() string {
	if x != nil {
		return x.ResolvedBy
	}
	return ""
}

func (x *IncidentEvent) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *IncidentEvent) GetDetectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectedAt
	}
	return nil
}

func (x *IncidentEvent) GetResolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedAt
	}
	return nil
}

func (x *IncidentEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *IncidentEvent) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ComplianceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId    string                 `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	EventType    string                 `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Status       string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	RequestData  *structpb.Struct       `protobuf:"bytes,6,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
	ResponseData *structpb.Struct       `protobuf:"bytes,7,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`
	ProcessedBy  string                 `protobuf:"bytes,8,opt,name=processed_by,json=processedBy,proto3" json:"processed_by,omitempty"`
	CompletedAt  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ComplianceEvent) Reset() {
	*x = ComplianceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplianceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplianceEvent) ProtoMessage() {}

func (x *ComplianceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplianceEvent.ProtoReflect.Descriptor instead.
func (*ComplianceEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{15}
}

func (x *ComplianceEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComplianceEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ComplianceEvent) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ComplianceEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ComplianceEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ComplianceEvent) GetRequestData() *structpb.Struct {
	if x != nil {
		return x.RequestData
	}
	return nil
}

func (x *ComplianceEvent) GetResponseData() *structpb.Struct {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

func (x *ComplianceEvent) GetProcessedBy() string {
	if x != nil {
		return x.ProcessedBy
	}
	return ""
}

func (x *ComplianceEvent) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ComplianceEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ComplianceEvent) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type PerformanceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Service      string                 `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Operation    string                 `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	UserId       string                 `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DurationMs   int64                  `protobuf:"varint,5,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	StatusCode   int32                  `protobuf:"varint,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ErrorMessage string                 `protobuf:"bytes,7,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Context      *structpb.Struct       `protobuf:"bytes,8,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PerformanceEvent) Reset() {
	*x = PerformanceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceEvent) ProtoMessage() {}

func (x *PerformanceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceEvent.ProtoReflect.Descriptor instead.
func (*PerformanceEvent) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{16}
}

func (x *PerformanceEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PerformanceEvent) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *PerformanceEvent) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *PerformanceEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PerformanceEvent) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *PerformanceEvent) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *PerformanceEvent) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *PerformanceEvent) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PerformanceEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PerformanceEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// Client Information for comprehensive tracking
type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network Information
	IpAddress       string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	UserAgent       string `protobuf:"bytes,2,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	XForwardedFor   string `protobuf:"bytes,3,opt,name=x_forwarded_for,json=xForwardedFor,proto3" json:"x_forwarded_for,omitempty"`
	XRealIp         string `protobuf:"bytes,4,opt,name=x_real_ip,json=xRealIp,proto3" json:"x_real_ip,omitempty"`
	XForwardedProto string `protobuf:"bytes,5,opt,name=x_forwarded_proto,json=xForwardedProto,proto3" json:"x_forwarded_proto,omitempty"`
	XForwardedHost  string `protobuf:"bytes,6,opt,name=x_forwarded_host,json=xForwardedHost,proto3" json:"x_forwarded_host,omitempty"`
	// Browser Information
	AcceptLanguage string `protobuf:"bytes,7,opt,name=accept_language,json=acceptLanguage,proto3" json:"accept_language,omitempty"`
	AcceptEncoding string `protobuf:"bytes,8,opt,name=accept_encoding,json=acceptEncoding,proto3" json:"accept_encoding,omitempty"`
	Accept         string `protobuf:"bytes,9,opt,name=accept,proto3" json:"accept,omitempty"`
	CacheControl   string `protobuf:"bytes,10,opt,name=cache_control,json=cacheControl,proto3" json:"cache_control,omitempty"`
	Connection     string `protobuf:"bytes,11,opt,name=connection,proto3" json:"connection,omitempty"`
	Dnt            string `protobuf:"bytes,12,opt,name=dnt,proto3" json:"dnt,omitempty"` // Do Not Track
	// Security Headers
	SecChUa         string `protobuf:"bytes,13,opt,name=sec_ch_ua,json=secChUa,proto3" json:"sec_ch_ua,omitempty"`
	SecChUaMobile   string `protobuf:"bytes,14,opt,name=sec_ch_ua_mobile,json=secChUaMobile,proto3" json:"sec_ch_ua_mobile,omitempty"`
	SecChUaPlatform string `protobuf:"bytes,15,opt,name=sec_ch_ua_platform,json=secChUaPlatform,proto3" json:"sec_ch_ua_platform,omitempty"`
	SecFetchSite    string `protobuf:"bytes,16,opt,name=sec_fetch_site,json=secFetchSite,proto3" json:"sec_fetch_site,omitempty"`
	SecFetchMode    string `protobuf:"bytes,17,opt,name=sec_fetch_mode,json=secFetchMode,proto3" json:"sec_fetch_mode,omitempty"`
	SecFetchUser    string `protobuf:"bytes,18,opt,name=sec_fetch_user,json=secFetchUser,proto3" json:"sec_fetch_user,omitempty"`
	SecFetchDest    string `protobuf:"bytes,19,opt,name=sec_fetch_dest,json=secFetchDest,proto3" json:"sec_fetch_dest,omitempty"`
	// Referrer Information
	Referer string `protobuf:"bytes,20,opt,name=referer,proto3" json:"referer,omitempty"`
	Origin  string `protobuf:"bytes,21,opt,name=origin,proto3" json:"origin,omitempty"`
	// Cloudflare Headers (if applicable)
	CfConnectingIp string `protobuf:"bytes,22,opt,name=cf_connecting_ip,json=cfConnectingIp,proto3" json:"cf_connecting_ip,omitempty"`
	CfIpcountry    string `protobuf:"bytes,23,opt,name=cf_ipcountry,json=cfIpcountry,proto3" json:"cf_ipcountry,omitempty"`
	CfRay          string `protobuf:"bytes,24,opt,name=cf_ray,json=cfRay,proto3" json:"cf_ray,omitempty"`
	CfVisitor      string `protobuf:"bytes,25,opt,name=cf_visitor,json=cfVisitor,proto3" json:"cf_visitor,omitempty"`
	// UTM Parameters
	UtmSource   string `protobuf:"bytes,26,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmMedium   string `protobuf:"bytes,27,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmCampaign string `protobuf:"bytes,28,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
	UtmTerm     string `protobuf:"bytes,29,opt,name=utm_term,json=utmTerm,proto3" json:"utm_term,omitempty"`
	UtmContent  string `protobuf:"bytes,30,opt,name=utm_content,json=utmContent,proto3" json:"utm_content,omitempty"`
	// Custom Tracking Headers
	XClientId      string `protobuf:"bytes,31,opt,name=x_client_id,json=xClientId,proto3" json:"x_client_id,omitempty"`
	XSessionId     string `protobuf:"bytes,32,opt,name=x_session_id,json=xSessionId,proto3" json:"x_session_id,omitempty"`
	XRequestId     string `protobuf:"bytes,33,opt,name=x_request_id,json=xRequestId,proto3" json:"x_request_id,omitempty"`
	XCorrelationId string `protobuf:"bytes,34,opt,name=x_correlation_id,json=xCorrelationId,proto3" json:"x_correlation_id,omitempty"`
	// Processed Information (derived from headers)
	Platform       Platform   `protobuf:"varint,35,opt,name=platform,proto3,enum=activity_svc.Platform" json:"platform,omitempty"`
	DeviceType     DeviceType `protobuf:"varint,36,opt,name=device_type,json=deviceType,proto3,enum=activity_svc.DeviceType" json:"device_type,omitempty"`
	Browser        string     `protobuf:"bytes,37,opt,name=browser,proto3" json:"browser,omitempty"`
	BrowserVersion string     `protobuf:"bytes,38,opt,name=browser_version,json=browserVersion,proto3" json:"browser_version,omitempty"`
	Os             string     `protobuf:"bytes,39,opt,name=os,proto3" json:"os,omitempty"`
	OsVersion      string     `protobuf:"bytes,40,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Country        string     `protobuf:"bytes,41,opt,name=country,proto3" json:"country,omitempty"`
	City           string     `protobuf:"bytes,42,opt,name=city,proto3" json:"city,omitempty"`
	Timezone       string     `protobuf:"bytes,43,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Languages      []string   `protobuf:"bytes,44,rep,name=languages,proto3" json:"languages,omitempty"`
	IsMobile       bool       `protobuf:"varint,45,opt,name=is_mobile,json=isMobile,proto3" json:"is_mobile,omitempty"`
	IsTablet       bool       `protobuf:"varint,46,opt,name=is_tablet,json=isTablet,proto3" json:"is_tablet,omitempty"`
	IsBot          bool       `protobuf:"varint,47,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	TrustScore     float64    `protobuf:"fixed64,48,opt,name=trust_score,json=trustScore,proto3" json:"trust_score,omitempty"`
	// Behavioral Indicators
	HasAdBlocker  bool   `protobuf:"varint,49,opt,name=has_ad_blocker,json=hasAdBlocker,proto3" json:"has_ad_blocker,omitempty"`
	SupportsWebgl bool   `protobuf:"varint,50,opt,name=supports_webgl,json=supportsWebgl,proto3" json:"supports_webgl,omitempty"`
	SupportsTouch bool   `protobuf:"varint,51,opt,name=supports_touch,json=supportsTouch,proto3" json:"supports_touch,omitempty"`
	ScreenWidth   int32  `protobuf:"varint,52,opt,name=screen_width,json=screenWidth,proto3" json:"screen_width,omitempty"`
	ScreenHeight  int32  `protobuf:"varint,53,opt,name=screen_height,json=screenHeight,proto3" json:"screen_height,omitempty"`
	ColorDepth    int32  `protobuf:"varint,54,opt,name=color_depth,json=colorDepth,proto3" json:"color_depth,omitempty"`
	BrowserEngine string `protobuf:"bytes,55,opt,name=browser_engine,json=browserEngine,proto3" json:"browser_engine,omitempty"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{17}
}

func (x *ClientInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ClientInfo) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ClientInfo) GetXForwardedFor() string {
	if x != nil {
		return x.XForwardedFor
	}
	return ""
}

func (x *ClientInfo) GetXRealIp() string {
	if x != nil {
		return x.XRealIp
	}
	return ""
}

func (x *ClientInfo) GetXForwardedProto() string {
	if x != nil {
		return x.XForwardedProto
	}
	return ""
}

func (x *ClientInfo) GetXForwardedHost() string {
	if x != nil {
		return x.XForwardedHost
	}
	return ""
}

func (x *ClientInfo) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

func (x *ClientInfo) GetAcceptEncoding() string {
	if x != nil {
		return x.AcceptEncoding
	}
	return ""
}

func (x *ClientInfo) GetAccept() string {
	if x != nil {
		return x.Accept
	}
	return ""
}

func (x *ClientInfo) GetCacheControl() string {
	if x != nil {
		return x.CacheControl
	}
	return ""
}

func (x *ClientInfo) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *ClientInfo) GetDnt() string {
	if x != nil {
		return x.Dnt
	}
	return ""
}

func (x *ClientInfo) GetSecChUa() string {
	if x != nil {
		return x.SecChUa
	}
	return ""
}

func (x *ClientInfo) GetSecChUaMobile() string {
	if x != nil {
		return x.SecChUaMobile
	}
	return ""
}

func (x *ClientInfo) GetSecChUaPlatform() string {
	if x != nil {
		return x.SecChUaPlatform
	}
	return ""
}

func (x *ClientInfo) GetSecFetchSite() string {
	if x != nil {
		return x.SecFetchSite
	}
	return ""
}

func (x *ClientInfo) GetSecFetchMode() string {
	if x != nil {
		return x.SecFetchMode
	}
	return ""
}

func (x *ClientInfo) GetSecFetchUser() string {
	if x != nil {
		return x.SecFetchUser
	}
	return ""
}

func (x *ClientInfo) GetSecFetchDest() string {
	if x != nil {
		return x.SecFetchDest
	}
	return ""
}

func (x *ClientInfo) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *ClientInfo) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ClientInfo) GetCfConnectingIp() string {
	if x != nil {
		return x.CfConnectingIp
	}
	return ""
}

func (x *ClientInfo) GetCfIpcountry() string {
	if x != nil {
		return x.CfIpcountry
	}
	return ""
}

func (x *ClientInfo) GetCfRay() string {
	if x != nil {
		return x.CfRay
	}
	return ""
}

func (x *ClientInfo) GetCfVisitor() string {
	if x != nil {
		return x.CfVisitor
	}
	return ""
}

func (x *ClientInfo) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *ClientInfo) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *ClientInfo) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *ClientInfo) GetUtmTerm() string {
	if x != nil {
		return x.UtmTerm
	}
	return ""
}

func (x *ClientInfo) GetUtmContent() string {
	if x != nil {
		return x.UtmContent
	}
	return ""
}

func (x *ClientInfo) GetXClientId() string {
	if x != nil {
		return x.XClientId
	}
	return ""
}

func (x *ClientInfo) GetXSessionId() string {
	if x != nil {
		return x.XSessionId
	}
	return ""
}

func (x *ClientInfo) GetXRequestId() string {
	if x != nil {
		return x.XRequestId
	}
	return ""
}

func (x *ClientInfo) GetXCorrelationId() string {
	if x != nil {
		return x.XCorrelationId
	}
	return ""
}

func (x *ClientInfo) GetPlatform() Platform {
	if x != nil {
		return x.Platform
	}
	return Platform_PLATFORM_UNSPECIFIED
}

func (x *ClientInfo) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_UNSPECIFIED
}

func (x *ClientInfo) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *ClientInfo) GetBrowserVersion() string {
	if x != nil {
		return x.BrowserVersion
	}
	return ""
}

func (x *ClientInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *ClientInfo) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *ClientInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ClientInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ClientInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ClientInfo) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *ClientInfo) GetIsMobile() bool {
	if x != nil {
		return x.IsMobile
	}
	return false
}

func (x *ClientInfo) GetIsTablet() bool {
	if x != nil {
		return x.IsTablet
	}
	return false
}

func (x *ClientInfo) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *ClientInfo) GetTrustScore() float64 {
	if x != nil {
		return x.TrustScore
	}
	return 0
}

func (x *ClientInfo) GetHasAdBlocker() bool {
	if x != nil {
		return x.HasAdBlocker
	}
	return false
}

func (x *ClientInfo) GetSupportsWebgl() bool {
	if x != nil {
		return x.SupportsWebgl
	}
	return false
}

func (x *ClientInfo) GetSupportsTouch() bool {
	if x != nil {
		return x.SupportsTouch
	}
	return false
}

func (x *ClientInfo) GetScreenWidth() int32 {
	if x != nil {
		return x.ScreenWidth
	}
	return 0
}

func (x *ClientInfo) GetScreenHeight() int32 {
	if x != nil {
		return x.ScreenHeight
	}
	return 0
}

func (x *ClientInfo) GetColorDepth() int32 {
	if x != nil {
		return x.ColorDepth
	}
	return 0
}

func (x *ClientInfo) GetBrowserEngine() string {
	if x != nil {
		return x.BrowserEngine
	}
	return ""
}

// Track Activity
type TrackActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId  string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SessionId  string           `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Category   ActivityCategory `protobuf:"varint,4,opt,name=category,proto3,enum=activity_svc.ActivityCategory" json:"category,omitempty"`
	Action     string           `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	Resource   string           `protobuf:"bytes,6,opt,name=resource,proto3" json:"resource,omitempty"`
	ResourceId string           `protobuf:"bytes,7,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ClientInfo *ClientInfo      `protobuf:"bytes,8,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
	Metadata   *structpb.Struct `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Success    bool             `protobuf:"varint,10,opt,name=success,proto3" json:"success,omitempty"`
	DurationMs int64            `protobuf:"varint,11,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
}

func (x *TrackActivityRequest) Reset() {
	*x = TrackActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackActivityRequest) ProtoMessage() {}

func (x *TrackActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackActivityRequest.ProtoReflect.Descriptor instead.
func (*TrackActivityRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{18}
}

func (x *TrackActivityRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackActivityRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackActivityRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrackActivityRequest) GetCategory() ActivityCategory {
	if x != nil {
		return x.Category
	}
	return ActivityCategory_CATEGORY_UNSPECIFIED
}

func (x *TrackActivityRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TrackActivityRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *TrackActivityRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TrackActivityRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *TrackActivityRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TrackActivityRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TrackActivityRequest) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

type TrackActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ActivityId string `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Error      *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackActivityResponse) Reset() {
	*x = TrackActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackActivityResponse) ProtoMessage() {}

func (x *TrackActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackActivityResponse.ProtoReflect.Descriptor instead.
func (*TrackActivityResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{19}
}

func (x *TrackActivityResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackActivityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackActivityResponse) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *TrackActivityResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get User Activities
type GetUserActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Category  ActivityCategory       `protobuf:"varint,3,opt,name=category,proto3,enum=activity_svc.ActivityCategory" json:"category,omitempty"`
	Action    string                 `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit     int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32                  `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetUserActivitiesRequest) Reset() {
	*x = GetUserActivitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserActivitiesRequest) ProtoMessage() {}

func (x *GetUserActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserActivitiesRequest.ProtoReflect.Descriptor instead.
func (*GetUserActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{20}
}

func (x *GetUserActivitiesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserActivitiesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetUserActivitiesRequest) GetCategory() ActivityCategory {
	if x != nil {
		return x.Category
	}
	return ActivityCategory_CATEGORY_UNSPECIFIED
}

func (x *GetUserActivitiesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *GetUserActivitiesRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetUserActivitiesRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetUserActivitiesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUserActivitiesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetUserActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32            `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Activities []*ActivityEvent `protobuf:"bytes,2,rep,name=activities,proto3" json:"activities,omitempty"`
	TotalCount int64            `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Error      *Error           `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetUserActivitiesResponse) Reset() {
	*x = GetUserActivitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserActivitiesResponse) ProtoMessage() {}

func (x *GetUserActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserActivitiesResponse.ProtoReflect.Descriptor instead.
func (*GetUserActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserActivitiesResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetUserActivitiesResponse) GetActivities() []*ActivityEvent {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *GetUserActivitiesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetUserActivitiesResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Activity Analytics
type GetActivityAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId  string             `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TimeRange  string             `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"` // "1h", "24h", "7d", "30d", "90d"
	Categories []ActivityCategory `protobuf:"varint,4,rep,packed,name=categories,proto3,enum=activity_svc.ActivityCategory" json:"categories,omitempty"`
}

func (x *GetActivityAnalyticsRequest) Reset() {
	*x = GetActivityAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityAnalyticsRequest) ProtoMessage() {}

func (x *GetActivityAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetActivityAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{22}
}

func (x *GetActivityAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetActivityAnalyticsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetActivityAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetActivityAnalyticsRequest) GetCategories() []ActivityCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetActivityAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Analytics  *UserBehaviorAnalytics `protobuf:"bytes,2,opt,name=analytics,proto3" json:"analytics,omitempty"`
	Error      *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetActivityAnalyticsResponse) Reset() {
	*x = GetActivityAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityAnalyticsResponse) ProtoMessage() {}

func (x *GetActivityAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetActivityAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{23}
}

func (x *GetActivityAnalyticsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetActivityAnalyticsResponse) GetAnalytics() *UserBehaviorAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *GetActivityAnalyticsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Security Event
type TrackSecurityEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId   string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	EventType   string           `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Severity    Severity         `protobuf:"varint,4,opt,name=severity,proto3,enum=activity_svc.Severity" json:"severity,omitempty"`
	Description string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Context     *SecurityContext `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	RiskScore   int32            `protobuf:"varint,7,opt,name=risk_score,json=riskScore,proto3" json:"risk_score,omitempty"`
}

func (x *TrackSecurityEventRequest) Reset() {
	*x = TrackSecurityEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSecurityEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSecurityEventRequest) ProtoMessage() {}

func (x *TrackSecurityEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSecurityEventRequest.ProtoReflect.Descriptor instead.
func (*TrackSecurityEventRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{24}
}

func (x *TrackSecurityEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackSecurityEventRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackSecurityEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TrackSecurityEventRequest) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *TrackSecurityEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TrackSecurityEventRequest) GetContext() *SecurityContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *TrackSecurityEventRequest) GetRiskScore() int32 {
	if x != nil {
		return x.RiskScore
	}
	return 0
}

type TrackSecurityEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	EventId    string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Error      *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackSecurityEventResponse) Reset() {
	*x = TrackSecurityEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSecurityEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSecurityEventResponse) ProtoMessage() {}

func (x *TrackSecurityEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSecurityEventResponse.ProtoReflect.Descriptor instead.
func (*TrackSecurityEventResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{25}
}

func (x *TrackSecurityEventResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackSecurityEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackSecurityEventResponse) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *TrackSecurityEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Security Events
type GetSecurityEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId   string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	MinSeverity Severity               `protobuf:"varint,3,opt,name=min_severity,json=minSeverity,proto3,enum=activity_svc.Severity" json:"min_severity,omitempty"`
	Resolved    bool                   `protobuf:"varint,4,opt,name=resolved,proto3" json:"resolved,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit       int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32                  `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetSecurityEventsRequest) Reset() {
	*x = GetSecurityEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityEventsRequest) ProtoMessage() {}

func (x *GetSecurityEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityEventsRequest.ProtoReflect.Descriptor instead.
func (*GetSecurityEventsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{26}
}

func (x *GetSecurityEventsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSecurityEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetSecurityEventsRequest) GetMinSeverity() Severity {
	if x != nil {
		return x.MinSeverity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *GetSecurityEventsRequest) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

func (x *GetSecurityEventsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetSecurityEventsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetSecurityEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSecurityEventsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetSecurityEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32            `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Events     []*SecurityEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	TotalCount int64            `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Error      *Error           `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetSecurityEventsResponse) Reset() {
	*x = GetSecurityEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityEventsResponse) ProtoMessage() {}

func (x *GetSecurityEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityEventsResponse.ProtoReflect.Descriptor instead.
func (*GetSecurityEventsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{27}
}

func (x *GetSecurityEventsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetSecurityEventsResponse) GetEvents() []*SecurityEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetSecurityEventsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetSecurityEventsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get User Behavior Analytics
type GetUserBehaviorAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TimeRange string `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *GetUserBehaviorAnalyticsRequest) Reset() {
	*x = GetUserBehaviorAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBehaviorAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBehaviorAnalyticsRequest) ProtoMessage() {}

func (x *GetUserBehaviorAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBehaviorAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetUserBehaviorAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{28}
}

func (x *GetUserBehaviorAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserBehaviorAnalyticsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetUserBehaviorAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

type GetUserBehaviorAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Analytics  *UserBehaviorAnalytics `protobuf:"bytes,2,opt,name=analytics,proto3" json:"analytics,omitempty"`
	Error      *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetUserBehaviorAnalyticsResponse) Reset() {
	*x = GetUserBehaviorAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBehaviorAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBehaviorAnalyticsResponse) ProtoMessage() {}

func (x *GetUserBehaviorAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBehaviorAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetUserBehaviorAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{29}
}

func (x *GetUserBehaviorAnalyticsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetUserBehaviorAnalyticsResponse) GetAnalytics() *UserBehaviorAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *GetUserBehaviorAnalyticsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Reading Behavior
type GetReadingBehaviorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ContentId string `protobuf:"bytes,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	TimeRange string `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Limit     int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetReadingBehaviorRequest) Reset() {
	*x = GetReadingBehaviorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadingBehaviorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadingBehaviorRequest) ProtoMessage() {}

func (x *GetReadingBehaviorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadingBehaviorRequest.ProtoReflect.Descriptor instead.
func (*GetReadingBehaviorRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{30}
}

func (x *GetReadingBehaviorRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetReadingBehaviorRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetReadingBehaviorRequest) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *GetReadingBehaviorRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetReadingBehaviorRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetReadingBehaviorRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetReadingBehaviorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32                       `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Behavior   []*ReadingBehaviorAnalytics `protobuf:"bytes,2,rep,name=behavior,proto3" json:"behavior,omitempty"`
	TotalCount int64                       `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Error      *Error                      `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetReadingBehaviorResponse) Reset() {
	*x = GetReadingBehaviorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReadingBehaviorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReadingBehaviorResponse) ProtoMessage() {}

func (x *GetReadingBehaviorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReadingBehaviorResponse.ProtoReflect.Descriptor instead.
func (*GetReadingBehaviorResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{31}
}

func (x *GetReadingBehaviorResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetReadingBehaviorResponse) GetBehavior() []*ReadingBehaviorAnalytics {
	if x != nil {
		return x.Behavior
	}
	return nil
}

func (x *GetReadingBehaviorResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetReadingBehaviorResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Recommendation Interaction
type TrackRecommendationInteractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId          string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SessionId          string           `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RecommendationType string           `protobuf:"bytes,4,opt,name=recommendation_type,json=recommendationType,proto3" json:"recommendation_type,omitempty"`
	ItemId             string           `protobuf:"bytes,5,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	Position           int32            `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`
	Action             string           `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	Context            *structpb.Struct `protobuf:"bytes,8,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackRecommendationInteractionRequest) Reset() {
	*x = TrackRecommendationInteractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackRecommendationInteractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRecommendationInteractionRequest) ProtoMessage() {}

func (x *TrackRecommendationInteractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRecommendationInteractionRequest.ProtoReflect.Descriptor instead.
func (*TrackRecommendationInteractionRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{32}
}

func (x *TrackRecommendationInteractionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackRecommendationInteractionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackRecommendationInteractionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrackRecommendationInteractionRequest) GetRecommendationType() string {
	if x != nil {
		return x.RecommendationType
	}
	return ""
}

func (x *TrackRecommendationInteractionRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *TrackRecommendationInteractionRequest) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TrackRecommendationInteractionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TrackRecommendationInteractionRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackRecommendationInteractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode    int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	InteractionId string `protobuf:"bytes,3,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	Error         *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackRecommendationInteractionResponse) Reset() {
	*x = TrackRecommendationInteractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackRecommendationInteractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackRecommendationInteractionResponse) ProtoMessage() {}

func (x *TrackRecommendationInteractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackRecommendationInteractionResponse.ProtoReflect.Descriptor instead.
func (*TrackRecommendationInteractionResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{33}
}

func (x *TrackRecommendationInteractionResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackRecommendationInteractionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackRecommendationInteractionResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *TrackRecommendationInteractionResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Recommendation Analytics
type GetRecommendationAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId          string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	RecommendationType string `protobuf:"bytes,3,opt,name=recommendation_type,json=recommendationType,proto3" json:"recommendation_type,omitempty"`
	TimeRange          string `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Limit              int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset             int32  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetRecommendationAnalyticsRequest) Reset() {
	*x = GetRecommendationAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationAnalyticsRequest) ProtoMessage() {}

func (x *GetRecommendationAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetRecommendationAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{34}
}

func (x *GetRecommendationAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetRecommendationAnalyticsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetRecommendationAnalyticsRequest) GetRecommendationType() string {
	if x != nil {
		return x.RecommendationType
	}
	return ""
}

func (x *GetRecommendationAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetRecommendationAnalyticsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRecommendationAnalyticsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetRecommendationAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       int32                        `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Interactions     []*RecommendationInteraction `protobuf:"bytes,2,rep,name=interactions,proto3" json:"interactions,omitempty"`
	TotalCount       int64                        `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	AnalyticsSummary *structpb.Struct             `protobuf:"bytes,4,opt,name=analytics_summary,json=analyticsSummary,proto3" json:"analytics_summary,omitempty"`
	Error            *Error                       `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetRecommendationAnalyticsResponse) Reset() {
	*x = GetRecommendationAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecommendationAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecommendationAnalyticsResponse) ProtoMessage() {}

func (x *GetRecommendationAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecommendationAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetRecommendationAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{35}
}

func (x *GetRecommendationAnalyticsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetRecommendationAnalyticsResponse) GetInteractions() []*RecommendationInteraction {
	if x != nil {
		return x.Interactions
	}
	return nil
}

func (x *GetRecommendationAnalyticsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetRecommendationAnalyticsResponse) GetAnalyticsSummary() *structpb.Struct {
	if x != nil {
		return x.AnalyticsSummary
	}
	return nil
}

func (x *GetRecommendationAnalyticsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Content Analytics
type GetContentAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentId   string `protobuf:"bytes,1,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	AuthorId    string `protobuf:"bytes,2,opt,name=author_id,json=authorId,proto3" json:"author_id,omitempty"`
	ContentType string `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	TimeRange   string `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Limit       int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetContentAnalyticsRequest) Reset() {
	*x = GetContentAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentAnalyticsRequest) ProtoMessage() {}

func (x *GetContentAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetContentAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{36}
}

func (x *GetContentAnalyticsRequest) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *GetContentAnalyticsRequest) GetAuthorId() string {
	if x != nil {
		return x.AuthorId
	}
	return ""
}

func (x *GetContentAnalyticsRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *GetContentAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetContentAnalyticsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetContentAnalyticsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetContentAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       int32                 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Interactions     []*ContentInteraction `protobuf:"bytes,2,rep,name=interactions,proto3" json:"interactions,omitempty"`
	TotalCount       int64                 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	AnalyticsSummary *structpb.Struct      `protobuf:"bytes,4,opt,name=analytics_summary,json=analyticsSummary,proto3" json:"analytics_summary,omitempty"`
	Error            *Error                `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetContentAnalyticsResponse) Reset() {
	*x = GetContentAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentAnalyticsResponse) ProtoMessage() {}

func (x *GetContentAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetContentAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{37}
}

func (x *GetContentAnalyticsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetContentAnalyticsResponse) GetInteractions() []*ContentInteraction {
	if x != nil {
		return x.Interactions
	}
	return nil
}

func (x *GetContentAnalyticsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetContentAnalyticsResponse) GetAnalyticsSummary() *structpb.Struct {
	if x != nil {
		return x.AnalyticsSummary
	}
	return nil
}

func (x *GetContentAnalyticsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Content Interaction
type TrackContentInteractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId       string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ContentId       string           `protobuf:"bytes,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	ContentType     string           `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	InteractionType string           `protobuf:"bytes,5,opt,name=interaction_type,json=interactionType,proto3" json:"interaction_type,omitempty"`
	DurationMs      int64            `protobuf:"varint,6,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	ScrollDepth     float64          `protobuf:"fixed64,7,opt,name=scroll_depth,json=scrollDepth,proto3" json:"scroll_depth,omitempty"`
	ReadingSpeed    float64          `protobuf:"fixed64,8,opt,name=reading_speed,json=readingSpeed,proto3" json:"reading_speed,omitempty"`
	CompletionRate  float64          `protobuf:"fixed64,9,opt,name=completion_rate,json=completionRate,proto3" json:"completion_rate,omitempty"`
	Context         *structpb.Struct `protobuf:"bytes,10,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackContentInteractionRequest) Reset() {
	*x = TrackContentInteractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackContentInteractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackContentInteractionRequest) ProtoMessage() {}

func (x *TrackContentInteractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackContentInteractionRequest.ProtoReflect.Descriptor instead.
func (*TrackContentInteractionRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{38}
}

func (x *TrackContentInteractionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackContentInteractionRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackContentInteractionRequest) GetContentId() string {
	if x != nil {
		return x.ContentId
	}
	return ""
}

func (x *TrackContentInteractionRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *TrackContentInteractionRequest) GetInteractionType() string {
	if x != nil {
		return x.InteractionType
	}
	return ""
}

func (x *TrackContentInteractionRequest) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *TrackContentInteractionRequest) GetScrollDepth() float64 {
	if x != nil {
		return x.ScrollDepth
	}
	return 0
}

func (x *TrackContentInteractionRequest) GetReadingSpeed() float64 {
	if x != nil {
		return x.ReadingSpeed
	}
	return 0
}

func (x *TrackContentInteractionRequest) GetCompletionRate() float64 {
	if x != nil {
		return x.CompletionRate
	}
	return 0
}

func (x *TrackContentInteractionRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackContentInteractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode    int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	InteractionId string `protobuf:"bytes,3,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	Error         *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackContentInteractionResponse) Reset() {
	*x = TrackContentInteractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackContentInteractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackContentInteractionResponse) ProtoMessage() {}

func (x *TrackContentInteractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackContentInteractionResponse.ProtoReflect.Descriptor instead.
func (*TrackContentInteractionResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{39}
}

func (x *TrackContentInteractionResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackContentInteractionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackContentInteractionResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *TrackContentInteractionResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track User Journey
type TrackUserJourneyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId     string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SessionId     string           `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	JourneyStage  JourneyStage     `protobuf:"varint,4,opt,name=journey_stage,json=journeyStage,proto3,enum=activity_svc.JourneyStage" json:"journey_stage,omitempty"`
	Funnel        string           `protobuf:"bytes,5,opt,name=funnel,proto3" json:"funnel,omitempty"`
	Step          int32            `protobuf:"varint,6,opt,name=step,proto3" json:"step,omitempty"`
	StepName      string           `protobuf:"bytes,7,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	Conversion    bool             `protobuf:"varint,8,opt,name=conversion,proto3" json:"conversion,omitempty"`
	DropOff       bool             `protobuf:"varint,9,opt,name=drop_off,json=dropOff,proto3" json:"drop_off,omitempty"`
	TimeToStepMs  int64            `protobuf:"varint,10,opt,name=time_to_step_ms,json=timeToStepMs,proto3" json:"time_to_step_ms,omitempty"`
	AbTestVariant string           `protobuf:"bytes,11,opt,name=ab_test_variant,json=abTestVariant,proto3" json:"ab_test_variant,omitempty"`
	Referrer      string           `protobuf:"bytes,12,opt,name=referrer,proto3" json:"referrer,omitempty"`
	UtmSource     string           `protobuf:"bytes,13,opt,name=utm_source,json=utmSource,proto3" json:"utm_source,omitempty"`
	UtmMedium     string           `protobuf:"bytes,14,opt,name=utm_medium,json=utmMedium,proto3" json:"utm_medium,omitempty"`
	UtmCampaign   string           `protobuf:"bytes,15,opt,name=utm_campaign,json=utmCampaign,proto3" json:"utm_campaign,omitempty"`
	Context       *structpb.Struct `protobuf:"bytes,16,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackUserJourneyRequest) Reset() {
	*x = TrackUserJourneyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackUserJourneyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUserJourneyRequest) ProtoMessage() {}

func (x *TrackUserJourneyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUserJourneyRequest.ProtoReflect.Descriptor instead.
func (*TrackUserJourneyRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{40}
}

func (x *TrackUserJourneyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetJourneyStage() JourneyStage {
	if x != nil {
		return x.JourneyStage
	}
	return JourneyStage_JOURNEY_STAGE_UNSPECIFIED
}

func (x *TrackUserJourneyRequest) GetFunnel() string {
	if x != nil {
		return x.Funnel
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *TrackUserJourneyRequest) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetConversion() bool {
	if x != nil {
		return x.Conversion
	}
	return false
}

func (x *TrackUserJourneyRequest) GetDropOff() bool {
	if x != nil {
		return x.DropOff
	}
	return false
}

func (x *TrackUserJourneyRequest) GetTimeToStepMs() int64 {
	if x != nil {
		return x.TimeToStepMs
	}
	return 0
}

func (x *TrackUserJourneyRequest) GetAbTestVariant() string {
	if x != nil {
		return x.AbTestVariant
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetUtmSource() string {
	if x != nil {
		return x.UtmSource
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetUtmMedium() string {
	if x != nil {
		return x.UtmMedium
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetUtmCampaign() string {
	if x != nil {
		return x.UtmCampaign
	}
	return ""
}

func (x *TrackUserJourneyRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackUserJourneyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	JourneyId  string `protobuf:"bytes,3,opt,name=journey_id,json=journeyId,proto3" json:"journey_id,omitempty"`
	Error      *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackUserJourneyResponse) Reset() {
	*x = TrackUserJourneyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackUserJourneyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUserJourneyResponse) ProtoMessage() {}

func (x *TrackUserJourneyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUserJourneyResponse.ProtoReflect.Descriptor instead.
func (*TrackUserJourneyResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{41}
}

func (x *TrackUserJourneyResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackUserJourneyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackUserJourneyResponse) GetJourneyId() string {
	if x != nil {
		return x.JourneyId
	}
	return ""
}

func (x *TrackUserJourneyResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get User Journey Analytics
type GetUserJourneyAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId string       `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Funnel    string       `protobuf:"bytes,3,opt,name=funnel,proto3" json:"funnel,omitempty"`
	Stage     JourneyStage `protobuf:"varint,4,opt,name=stage,proto3,enum=activity_svc.JourneyStage" json:"stage,omitempty"`
	TimeRange string       `protobuf:"bytes,5,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Limit     int32        `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32        `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetUserJourneyAnalyticsRequest) Reset() {
	*x = GetUserJourneyAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserJourneyAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserJourneyAnalyticsRequest) ProtoMessage() {}

func (x *GetUserJourneyAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserJourneyAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetUserJourneyAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{42}
}

func (x *GetUserJourneyAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserJourneyAnalyticsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetUserJourneyAnalyticsRequest) GetFunnel() string {
	if x != nil {
		return x.Funnel
	}
	return ""
}

func (x *GetUserJourneyAnalyticsRequest) GetStage() JourneyStage {
	if x != nil {
		return x.Stage
	}
	return JourneyStage_JOURNEY_STAGE_UNSPECIFIED
}

func (x *GetUserJourneyAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetUserJourneyAnalyticsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUserJourneyAnalyticsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetUserJourneyAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode      int32               `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Journeys        []*UserJourneyEvent `protobuf:"bytes,2,rep,name=journeys,proto3" json:"journeys,omitempty"`
	TotalCount      int64               `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	FunnelAnalytics *structpb.Struct    `protobuf:"bytes,4,opt,name=funnel_analytics,json=funnelAnalytics,proto3" json:"funnel_analytics,omitempty"`
	Error           *Error              `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetUserJourneyAnalyticsResponse) Reset() {
	*x = GetUserJourneyAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserJourneyAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserJourneyAnalyticsResponse) ProtoMessage() {}

func (x *GetUserJourneyAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserJourneyAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetUserJourneyAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{43}
}

func (x *GetUserJourneyAnalyticsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetUserJourneyAnalyticsResponse) GetJourneys() []*UserJourneyEvent {
	if x != nil {
		return x.Journeys
	}
	return nil
}

func (x *GetUserJourneyAnalyticsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetUserJourneyAnalyticsResponse) GetFunnelAnalytics() *structpb.Struct {
	if x != nil {
		return x.FunnelAnalytics
	}
	return nil
}

func (x *GetUserJourneyAnalyticsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Notification Event
type TrackNotificationEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId      string              `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Type           NotificationType    `protobuf:"varint,3,opt,name=type,proto3,enum=activity_svc.NotificationType" json:"type,omitempty"`
	Channel        NotificationChannel `protobuf:"varint,4,opt,name=channel,proto3,enum=activity_svc.NotificationChannel" json:"channel,omitempty"`
	Template       string              `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty"`
	Subject        string              `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	Status         string              `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	DeliveryTimeMs int64               `protobuf:"varint,8,opt,name=delivery_time_ms,json=deliveryTimeMs,proto3" json:"delivery_time_ms,omitempty"`
	ClickedLinks   []string            `protobuf:"bytes,9,rep,name=clicked_links,json=clickedLinks,proto3" json:"clicked_links,omitempty"`
	DeviceInfo     *structpb.Struct    `protobuf:"bytes,10,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	LocationInfo   *structpb.Struct    `protobuf:"bytes,11,opt,name=location_info,json=locationInfo,proto3" json:"location_info,omitempty"`
	BounceReason   string              `protobuf:"bytes,12,opt,name=bounce_reason,json=bounceReason,proto3" json:"bounce_reason,omitempty"`
	Context        *structpb.Struct    `protobuf:"bytes,13,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackNotificationEventRequest) Reset() {
	*x = TrackNotificationEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackNotificationEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackNotificationEventRequest) ProtoMessage() {}

func (x *TrackNotificationEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackNotificationEventRequest.ProtoReflect.Descriptor instead.
func (*TrackNotificationEventRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{44}
}

func (x *TrackNotificationEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackNotificationEventRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackNotificationEventRequest) GetType() NotificationType {
	if x != nil {
		return x.Type
	}
	return NotificationType_NOTIFICATION_TYPE_UNSPECIFIED
}

func (x *TrackNotificationEventRequest) GetChannel() NotificationChannel {
	if x != nil {
		return x.Channel
	}
	return NotificationChannel_NOTIFICATION_CHANNEL_UNSPECIFIED
}

func (x *TrackNotificationEventRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *TrackNotificationEventRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *TrackNotificationEventRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TrackNotificationEventRequest) GetDeliveryTimeMs() int64 {
	if x != nil {
		return x.DeliveryTimeMs
	}
	return 0
}

func (x *TrackNotificationEventRequest) GetClickedLinks() []string {
	if x != nil {
		return x.ClickedLinks
	}
	return nil
}

func (x *TrackNotificationEventRequest) GetDeviceInfo() *structpb.Struct {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *TrackNotificationEventRequest) GetLocationInfo() *structpb.Struct {
	if x != nil {
		return x.LocationInfo
	}
	return nil
}

func (x *TrackNotificationEventRequest) GetBounceReason() string {
	if x != nil {
		return x.BounceReason
	}
	return ""
}

func (x *TrackNotificationEventRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackNotificationEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode     int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NotificationId string `protobuf:"bytes,3,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	Error          *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackNotificationEventResponse) Reset() {
	*x = TrackNotificationEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackNotificationEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackNotificationEventResponse) ProtoMessage() {}

func (x *TrackNotificationEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackNotificationEventResponse.ProtoReflect.Descriptor instead.
func (*TrackNotificationEventResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{45}
}

func (x *TrackNotificationEventResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackNotificationEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackNotificationEventResponse) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

func (x *TrackNotificationEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Notification Analytics
type GetNotificationAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId string              `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Type      NotificationType    `protobuf:"varint,3,opt,name=type,proto3,enum=activity_svc.NotificationType" json:"type,omitempty"`
	Channel   NotificationChannel `protobuf:"varint,4,opt,name=channel,proto3,enum=activity_svc.NotificationChannel" json:"channel,omitempty"`
	TimeRange string              `protobuf:"bytes,5,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Limit     int32               `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32               `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetNotificationAnalyticsRequest) Reset() {
	*x = GetNotificationAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotificationAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationAnalyticsRequest) ProtoMessage() {}

func (x *GetNotificationAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetNotificationAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{46}
}

func (x *GetNotificationAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetNotificationAnalyticsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetNotificationAnalyticsRequest) GetType() NotificationType {
	if x != nil {
		return x.Type
	}
	return NotificationType_NOTIFICATION_TYPE_UNSPECIFIED
}

func (x *GetNotificationAnalyticsRequest) GetChannel() NotificationChannel {
	if x != nil {
		return x.Channel
	}
	return NotificationChannel_NOTIFICATION_CHANNEL_UNSPECIFIED
}

func (x *GetNotificationAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetNotificationAnalyticsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetNotificationAnalyticsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetNotificationAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       int32                `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Notifications    []*NotificationEvent `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
	TotalCount       int64                `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	AnalyticsSummary *structpb.Struct     `protobuf:"bytes,4,opt,name=analytics_summary,json=analyticsSummary,proto3" json:"analytics_summary,omitempty"`
	Error            *Error               `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetNotificationAnalyticsResponse) Reset() {
	*x = GetNotificationAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotificationAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationAnalyticsResponse) ProtoMessage() {}

func (x *GetNotificationAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetNotificationAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{47}
}

func (x *GetNotificationAnalyticsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetNotificationAnalyticsResponse) GetNotifications() []*NotificationEvent {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *GetNotificationAnalyticsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetNotificationAnalyticsResponse) GetAnalyticsSummary() *structpb.Struct {
	if x != nil {
		return x.AnalyticsSummary
	}
	return nil
}

func (x *GetNotificationAnalyticsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Financial Event
type TrackFinancialEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId       string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TransactionType string           `protobuf:"bytes,3,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Amount          float64          `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency        string           `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Status          string           `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	PaymentMethod   string           `protobuf:"bytes,7,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	TransactionId   string           `protobuf:"bytes,8,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	SubscriptionId  string           `protobuf:"bytes,9,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	PlanId          string           `protobuf:"bytes,10,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	BillingCycle    string           `protobuf:"bytes,11,opt,name=billing_cycle,json=billingCycle,proto3" json:"billing_cycle,omitempty"`
	TrialDays       int32            `protobuf:"varint,12,opt,name=trial_days,json=trialDays,proto3" json:"trial_days,omitempty"`
	DiscountCode    string           `protobuf:"bytes,13,opt,name=discount_code,json=discountCode,proto3" json:"discount_code,omitempty"`
	DiscountAmount  float64          `protobuf:"fixed64,14,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	TaxAmount       float64          `protobuf:"fixed64,15,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	ProcessingFee   float64          `protobuf:"fixed64,16,opt,name=processing_fee,json=processingFee,proto3" json:"processing_fee,omitempty"`
	FailureReason   string           `protobuf:"bytes,17,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	RefundReason    string           `protobuf:"bytes,18,opt,name=refund_reason,json=refundReason,proto3" json:"refund_reason,omitempty"`
	Context         *structpb.Struct `protobuf:"bytes,19,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackFinancialEventRequest) Reset() {
	*x = TrackFinancialEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackFinancialEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackFinancialEventRequest) ProtoMessage() {}

func (x *TrackFinancialEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackFinancialEventRequest.ProtoReflect.Descriptor instead.
func (*TrackFinancialEventRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{48}
}

func (x *TrackFinancialEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TrackFinancialEventRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetBillingCycle() string {
	if x != nil {
		return x.BillingCycle
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetTrialDays() int32 {
	if x != nil {
		return x.TrialDays
	}
	return 0
}

func (x *TrackFinancialEventRequest) GetDiscountCode() string {
	if x != nil {
		return x.DiscountCode
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *TrackFinancialEventRequest) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *TrackFinancialEventRequest) GetProcessingFee() float64 {
	if x != nil {
		return x.ProcessingFee
	}
	return 0
}

func (x *TrackFinancialEventRequest) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetRefundReason() string {
	if x != nil {
		return x.RefundReason
	}
	return ""
}

func (x *TrackFinancialEventRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackFinancialEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message          string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FinancialEventId string `protobuf:"bytes,3,opt,name=financial_event_id,json=financialEventId,proto3" json:"financial_event_id,omitempty"`
	Error            *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackFinancialEventResponse) Reset() {
	*x = TrackFinancialEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackFinancialEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackFinancialEventResponse) ProtoMessage() {}

func (x *TrackFinancialEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackFinancialEventResponse.ProtoReflect.Descriptor instead.
func (*TrackFinancialEventResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{49}
}

func (x *TrackFinancialEventResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackFinancialEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackFinancialEventResponse) GetFinancialEventId() string {
	if x != nil {
		return x.FinancialEventId
	}
	return ""
}

func (x *TrackFinancialEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Financial Events
type GetFinancialEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId       string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TransactionType string                 `protobuf:"bytes,3,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	Status          string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit           int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32                  `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetFinancialEventsRequest) Reset() {
	*x = GetFinancialEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialEventsRequest) ProtoMessage() {}

func (x *GetFinancialEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialEventsRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialEventsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{50}
}

func (x *GetFinancialEventsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetFinancialEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetFinancialEventsRequest) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *GetFinancialEventsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetFinancialEventsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetFinancialEventsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetFinancialEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetFinancialEventsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetFinancialEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       int32             `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Events           []*FinancialEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	TotalCount       int64             `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	FinancialSummary *structpb.Struct  `protobuf:"bytes,4,opt,name=financial_summary,json=financialSummary,proto3" json:"financial_summary,omitempty"`
	Error            *Error            `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetFinancialEventsResponse) Reset() {
	*x = GetFinancialEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialEventsResponse) ProtoMessage() {}

func (x *GetFinancialEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialEventsResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialEventsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{51}
}

func (x *GetFinancialEventsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetFinancialEventsResponse) GetEvents() []*FinancialEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetFinancialEventsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetFinancialEventsResponse) GetFinancialSummary() *structpb.Struct {
	if x != nil {
		return x.FinancialSummary
	}
	return nil
}

func (x *GetFinancialEventsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Integration Event
type TrackIntegrationEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId        string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	IntegrationType  string           `protobuf:"bytes,3,opt,name=integration_type,json=integrationType,proto3" json:"integration_type,omitempty"`
	Service          string           `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Endpoint         string           `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Method           string           `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
	StatusCode       int32            `protobuf:"varint,7,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ResponseTimeMs   int64            `protobuf:"varint,8,opt,name=response_time_ms,json=responseTimeMs,proto3" json:"response_time_ms,omitempty"`
	PayloadSizeBytes int64            `protobuf:"varint,9,opt,name=payload_size_bytes,json=payloadSizeBytes,proto3" json:"payload_size_bytes,omitempty"`
	ApiKeyHash       string           `protobuf:"bytes,10,opt,name=api_key_hash,json=apiKeyHash,proto3" json:"api_key_hash,omitempty"`
	OauthTokenHash   string           `protobuf:"bytes,11,opt,name=oauth_token_hash,json=oauthTokenHash,proto3" json:"oauth_token_hash,omitempty"`
	RetryCount       int32            `protobuf:"varint,12,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	Success          bool             `protobuf:"varint,13,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage     string           `protobuf:"bytes,14,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	RateLimited      bool             `protobuf:"varint,15,opt,name=rate_limited,json=rateLimited,proto3" json:"rate_limited,omitempty"`
	Context          *structpb.Struct `protobuf:"bytes,16,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackIntegrationEventRequest) Reset() {
	*x = TrackIntegrationEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackIntegrationEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIntegrationEventRequest) ProtoMessage() {}

func (x *TrackIntegrationEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIntegrationEventRequest.ProtoReflect.Descriptor instead.
func (*TrackIntegrationEventRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{52}
}

func (x *TrackIntegrationEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetIntegrationType() string {
	if x != nil {
		return x.IntegrationType
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackIntegrationEventRequest) GetResponseTimeMs() int64 {
	if x != nil {
		return x.ResponseTimeMs
	}
	return 0
}

func (x *TrackIntegrationEventRequest) GetPayloadSizeBytes() int64 {
	if x != nil {
		return x.PayloadSizeBytes
	}
	return 0
}

func (x *TrackIntegrationEventRequest) GetApiKeyHash() string {
	if x != nil {
		return x.ApiKeyHash
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetOauthTokenHash() string {
	if x != nil {
		return x.OauthTokenHash
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *TrackIntegrationEventRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TrackIntegrationEventRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TrackIntegrationEventRequest) GetRateLimited() bool {
	if x != nil {
		return x.RateLimited
	}
	return false
}

func (x *TrackIntegrationEventRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackIntegrationEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode         int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message            string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IntegrationEventId string `protobuf:"bytes,3,opt,name=integration_event_id,json=integrationEventId,proto3" json:"integration_event_id,omitempty"`
	Error              *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackIntegrationEventResponse) Reset() {
	*x = TrackIntegrationEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackIntegrationEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIntegrationEventResponse) ProtoMessage() {}

func (x *TrackIntegrationEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIntegrationEventResponse.ProtoReflect.Descriptor instead.
func (*TrackIntegrationEventResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{53}
}

func (x *TrackIntegrationEventResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackIntegrationEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackIntegrationEventResponse) GetIntegrationEventId() string {
	if x != nil {
		return x.IntegrationEventId
	}
	return ""
}

func (x *TrackIntegrationEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Integration Events
type GetIntegrationEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId       string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	IntegrationType string                 `protobuf:"bytes,3,opt,name=integration_type,json=integrationType,proto3" json:"integration_type,omitempty"`
	Service         string                 `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Success         bool                   `protobuf:"varint,5,opt,name=success,proto3" json:"success,omitempty"`
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit           int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32                  `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetIntegrationEventsRequest) Reset() {
	*x = GetIntegrationEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntegrationEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegrationEventsRequest) ProtoMessage() {}

func (x *GetIntegrationEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegrationEventsRequest.ProtoReflect.Descriptor instead.
func (*GetIntegrationEventsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{54}
}

func (x *GetIntegrationEventsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetIntegrationEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetIntegrationEventsRequest) GetIntegrationType() string {
	if x != nil {
		return x.IntegrationType
	}
	return ""
}

func (x *GetIntegrationEventsRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetIntegrationEventsRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetIntegrationEventsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetIntegrationEventsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetIntegrationEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetIntegrationEventsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetIntegrationEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode         int32               `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Events             []*IntegrationEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	TotalCount         int64               `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	IntegrationSummary *structpb.Struct    `protobuf:"bytes,4,opt,name=integration_summary,json=integrationSummary,proto3" json:"integration_summary,omitempty"`
	Error              *Error              `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetIntegrationEventsResponse) Reset() {
	*x = GetIntegrationEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntegrationEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegrationEventsResponse) ProtoMessage() {}

func (x *GetIntegrationEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegrationEventsResponse.ProtoReflect.Descriptor instead.
func (*GetIntegrationEventsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{55}
}

func (x *GetIntegrationEventsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetIntegrationEventsResponse) GetEvents() []*IntegrationEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetIntegrationEventsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetIntegrationEventsResponse) GetIntegrationSummary() *structpb.Struct {
	if x != nil {
		return x.IntegrationSummary
	}
	return nil
}

func (x *GetIntegrationEventsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Incident Event
type TrackIncidentEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncidentId         string           `protobuf:"bytes,1,opt,name=incident_id,json=incidentId,proto3" json:"incident_id,omitempty"`
	IncidentType       string           `protobuf:"bytes,2,opt,name=incident_type,json=incidentType,proto3" json:"incident_type,omitempty"`
	Severity           Severity         `protobuf:"varint,3,opt,name=severity,proto3,enum=activity_svc.Severity" json:"severity,omitempty"`
	Status             string           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	AffectedUsers      []string         `protobuf:"bytes,5,rep,name=affected_users,json=affectedUsers,proto3" json:"affected_users,omitempty"`
	DataBreach         bool             `protobuf:"varint,6,opt,name=data_breach,json=dataBreach,proto3" json:"data_breach,omitempty"`
	DataTypes          []string         `protobuf:"bytes,7,rep,name=data_types,json=dataTypes,proto3" json:"data_types,omitempty"`
	DetectionMethod    string           `protobuf:"bytes,8,opt,name=detection_method,json=detectionMethod,proto3" json:"detection_method,omitempty"`
	Description        string           `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	ImpactScope        string           `protobuf:"bytes,10,opt,name=impact_scope,json=impactScope,proto3" json:"impact_scope,omitempty"`
	ResponseTeam       []string         `protobuf:"bytes,11,rep,name=response_team,json=responseTeam,proto3" json:"response_team,omitempty"`
	Actions            []string         `protobuf:"bytes,12,rep,name=actions,proto3" json:"actions,omitempty"`
	NotificationsSent  bool             `protobuf:"varint,13,opt,name=notifications_sent,json=notificationsSent,proto3" json:"notifications_sent,omitempty"`
	RegulatorsNotified bool             `protobuf:"varint,14,opt,name=regulators_notified,json=regulatorsNotified,proto3" json:"regulators_notified,omitempty"`
	ForensicData       *structpb.Struct `protobuf:"bytes,15,opt,name=forensic_data,json=forensicData,proto3" json:"forensic_data,omitempty"`
	ResolutionTimeMs   int64            `protobuf:"varint,16,opt,name=resolution_time_ms,json=resolutionTimeMs,proto3" json:"resolution_time_ms,omitempty"`
	ResolvedBy         string           `protobuf:"bytes,17,opt,name=resolved_by,json=resolvedBy,proto3" json:"resolved_by,omitempty"`
	Context            *structpb.Struct `protobuf:"bytes,18,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackIncidentEventRequest) Reset() {
	*x = TrackIncidentEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackIncidentEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIncidentEventRequest) ProtoMessage() {}

func (x *TrackIncidentEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIncidentEventRequest.ProtoReflect.Descriptor instead.
func (*TrackIncidentEventRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{56}
}

func (x *TrackIncidentEventRequest) GetIncidentId() string {
	if x != nil {
		return x.IncidentId
	}
	return ""
}

func (x *TrackIncidentEventRequest) GetIncidentType() string {
	if x != nil {
		return x.IncidentType
	}
	return ""
}

func (x *TrackIncidentEventRequest) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *TrackIncidentEventRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TrackIncidentEventRequest) GetAffectedUsers() []string {
	if x != nil {
		return x.AffectedUsers
	}
	return nil
}

func (x *TrackIncidentEventRequest) GetDataBreach() bool {
	if x != nil {
		return x.DataBreach
	}
	return false
}

func (x *TrackIncidentEventRequest) GetDataTypes() []string {
	if x != nil {
		return x.DataTypes
	}
	return nil
}

func (x *TrackIncidentEventRequest) GetDetectionMethod() string {
	if x != nil {
		return x.DetectionMethod
	}
	return ""
}

func (x *TrackIncidentEventRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TrackIncidentEventRequest) GetImpactScope() string {
	if x != nil {
		return x.ImpactScope
	}
	return ""
}

func (x *TrackIncidentEventRequest) GetResponseTeam() []string {
	if x != nil {
		return x.ResponseTeam
	}
	return nil
}

func (x *TrackIncidentEventRequest) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TrackIncidentEventRequest) GetNotificationsSent() bool {
	if x != nil {
		return x.NotificationsSent
	}
	return false
}

func (x *TrackIncidentEventRequest) GetRegulatorsNotified() bool {
	if x != nil {
		return x.RegulatorsNotified
	}
	return false
}

func (x *TrackIncidentEventRequest) GetForensicData() *structpb.Struct {
	if x != nil {
		return x.ForensicData
	}
	return nil
}

func (x *TrackIncidentEventRequest) GetResolutionTimeMs() int64 {
	if x != nil {
		return x.ResolutionTimeMs
	}
	return 0
}

func (x *TrackIncidentEventRequest) GetResolvedBy() string {
	if x != nil {
		return x.ResolvedBy
	}
	return ""
}

func (x *TrackIncidentEventRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackIncidentEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode      int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message         string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IncidentEventId string `protobuf:"bytes,3,opt,name=incident_event_id,json=incidentEventId,proto3" json:"incident_event_id,omitempty"`
	Error           *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackIncidentEventResponse) Reset() {
	*x = TrackIncidentEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackIncidentEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIncidentEventResponse) ProtoMessage() {}

func (x *TrackIncidentEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIncidentEventResponse.ProtoReflect.Descriptor instead.
func (*TrackIncidentEventResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{57}
}

func (x *TrackIncidentEventResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackIncidentEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackIncidentEventResponse) GetIncidentEventId() string {
	if x != nil {
		return x.IncidentEventId
	}
	return ""
}

func (x *TrackIncidentEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Incident Events
type GetIncidentEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncidentId   string                 `protobuf:"bytes,1,opt,name=incident_id,json=incidentId,proto3" json:"incident_id,omitempty"`
	IncidentType string                 `protobuf:"bytes,2,opt,name=incident_type,json=incidentType,proto3" json:"incident_type,omitempty"`
	MinSeverity  Severity               `protobuf:"varint,3,opt,name=min_severity,json=minSeverity,proto3,enum=activity_svc.Severity" json:"min_severity,omitempty"`
	Status       string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	DataBreach   bool                   `protobuf:"varint,5,opt,name=data_breach,json=dataBreach,proto3" json:"data_breach,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit        int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int32                  `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetIncidentEventsRequest) Reset() {
	*x = GetIncidentEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIncidentEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncidentEventsRequest) ProtoMessage() {}

func (x *GetIncidentEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncidentEventsRequest.ProtoReflect.Descriptor instead.
func (*GetIncidentEventsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{58}
}

func (x *GetIncidentEventsRequest) GetIncidentId() string {
	if x != nil {
		return x.IncidentId
	}
	return ""
}

func (x *GetIncidentEventsRequest) GetIncidentType() string {
	if x != nil {
		return x.IncidentType
	}
	return ""
}

func (x *GetIncidentEventsRequest) GetMinSeverity() Severity {
	if x != nil {
		return x.MinSeverity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *GetIncidentEventsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetIncidentEventsRequest) GetDataBreach() bool {
	if x != nil {
		return x.DataBreach
	}
	return false
}

func (x *GetIncidentEventsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetIncidentEventsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetIncidentEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetIncidentEventsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetIncidentEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode      int32            `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Events          []*IncidentEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	TotalCount      int64            `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	IncidentSummary *structpb.Struct `protobuf:"bytes,4,opt,name=incident_summary,json=incidentSummary,proto3" json:"incident_summary,omitempty"`
	Error           *Error           `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetIncidentEventsResponse) Reset() {
	*x = GetIncidentEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIncidentEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncidentEventsResponse) ProtoMessage() {}

func (x *GetIncidentEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncidentEventsResponse.ProtoReflect.Descriptor instead.
func (*GetIncidentEventsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{59}
}

func (x *GetIncidentEventsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetIncidentEventsResponse) GetEvents() []*IncidentEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetIncidentEventsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetIncidentEventsResponse) GetIncidentSummary() *structpb.Struct {
	if x != nil {
		return x.IncidentSummary
	}
	return nil
}

func (x *GetIncidentEventsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Compliance Event
type TrackComplianceEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId    string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	EventType    string           `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Status       string           `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	RequestData  *structpb.Struct `protobuf:"bytes,5,opt,name=request_data,json=requestData,proto3" json:"request_data,omitempty"`
	ResponseData *structpb.Struct `protobuf:"bytes,6,opt,name=response_data,json=responseData,proto3" json:"response_data,omitempty"`
	ProcessedBy  string           `protobuf:"bytes,7,opt,name=processed_by,json=processedBy,proto3" json:"processed_by,omitempty"`
}

func (x *TrackComplianceEventRequest) Reset() {
	*x = TrackComplianceEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackComplianceEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackComplianceEventRequest) ProtoMessage() {}

func (x *TrackComplianceEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackComplianceEventRequest.ProtoReflect.Descriptor instead.
func (*TrackComplianceEventRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{60}
}

func (x *TrackComplianceEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackComplianceEventRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackComplianceEventRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TrackComplianceEventRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TrackComplianceEventRequest) GetRequestData() *structpb.Struct {
	if x != nil {
		return x.RequestData
	}
	return nil
}

func (x *TrackComplianceEventRequest) GetResponseData() *structpb.Struct {
	if x != nil {
		return x.ResponseData
	}
	return nil
}

func (x *TrackComplianceEventRequest) GetProcessedBy() string {
	if x != nil {
		return x.ProcessedBy
	}
	return ""
}

type TrackComplianceEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode        int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message           string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ComplianceEventId string `protobuf:"bytes,3,opt,name=compliance_event_id,json=complianceEventId,proto3" json:"compliance_event_id,omitempty"`
	Error             *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackComplianceEventResponse) Reset() {
	*x = TrackComplianceEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackComplianceEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackComplianceEventResponse) ProtoMessage() {}

func (x *TrackComplianceEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackComplianceEventResponse.ProtoReflect.Descriptor instead.
func (*TrackComplianceEventResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{61}
}

func (x *TrackComplianceEventResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackComplianceEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackComplianceEventResponse) GetComplianceEventId() string {
	if x != nil {
		return x.ComplianceEventId
	}
	return ""
}

func (x *TrackComplianceEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Compliance Events
type GetComplianceEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	EventType string                 `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Status    string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit     int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32                  `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetComplianceEventsRequest) Reset() {
	*x = GetComplianceEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComplianceEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComplianceEventsRequest) ProtoMessage() {}

func (x *GetComplianceEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComplianceEventsRequest.ProtoReflect.Descriptor instead.
func (*GetComplianceEventsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{62}
}

func (x *GetComplianceEventsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetComplianceEventsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetComplianceEventsRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *GetComplianceEventsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetComplianceEventsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetComplianceEventsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetComplianceEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetComplianceEventsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetComplianceEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32              `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Events     []*ComplianceEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	TotalCount int64              `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Error      *Error             `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetComplianceEventsResponse) Reset() {
	*x = GetComplianceEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComplianceEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComplianceEventsResponse) ProtoMessage() {}

func (x *GetComplianceEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComplianceEventsResponse.ProtoReflect.Descriptor instead.
func (*GetComplianceEventsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{63}
}

func (x *GetComplianceEventsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetComplianceEventsResponse) GetEvents() []*ComplianceEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetComplianceEventsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetComplianceEventsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Search Activity
type TrackSearchActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId      string           `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	SessionId      string           `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Query          string           `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Filters        *structpb.Struct `protobuf:"bytes,5,opt,name=filters,proto3" json:"filters,omitempty"`
	ResultCount    int32            `protobuf:"varint,6,opt,name=result_count,json=resultCount,proto3" json:"result_count,omitempty"`
	ClickedResults []string         `protobuf:"bytes,7,rep,name=clicked_results,json=clickedResults,proto3" json:"clicked_results,omitempty"`
	NoResults      bool             `protobuf:"varint,8,opt,name=no_results,json=noResults,proto3" json:"no_results,omitempty"`
	Context        *structpb.Struct `protobuf:"bytes,9,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackSearchActivityRequest) Reset() {
	*x = TrackSearchActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSearchActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSearchActivityRequest) ProtoMessage() {}

func (x *TrackSearchActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSearchActivityRequest.ProtoReflect.Descriptor instead.
func (*TrackSearchActivityRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{64}
}

func (x *TrackSearchActivityRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackSearchActivityRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *TrackSearchActivityRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrackSearchActivityRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TrackSearchActivityRequest) GetFilters() *structpb.Struct {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *TrackSearchActivityRequest) GetResultCount() int32 {
	if x != nil {
		return x.ResultCount
	}
	return 0
}

func (x *TrackSearchActivityRequest) GetClickedResults() []string {
	if x != nil {
		return x.ClickedResults
	}
	return nil
}

func (x *TrackSearchActivityRequest) GetNoResults() bool {
	if x != nil {
		return x.NoResults
	}
	return false
}

func (x *TrackSearchActivityRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackSearchActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode       int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message          string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	SearchActivityId string `protobuf:"bytes,3,opt,name=search_activity_id,json=searchActivityId,proto3" json:"search_activity_id,omitempty"`
	Error            *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackSearchActivityResponse) Reset() {
	*x = TrackSearchActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackSearchActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackSearchActivityResponse) ProtoMessage() {}

func (x *TrackSearchActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackSearchActivityResponse.ProtoReflect.Descriptor instead.
func (*TrackSearchActivityResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{65}
}

func (x *TrackSearchActivityResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackSearchActivityResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackSearchActivityResponse) GetSearchActivityId() string {
	if x != nil {
		return x.SearchActivityId
	}
	return ""
}

func (x *TrackSearchActivityResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Search Analytics
type GetSearchAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Query     string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	NoResults bool   `protobuf:"varint,4,opt,name=no_results,json=noResults,proto3" json:"no_results,omitempty"`
	TimeRange string `protobuf:"bytes,5,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Limit     int32  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetSearchAnalyticsRequest) Reset() {
	*x = GetSearchAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchAnalyticsRequest) ProtoMessage() {}

func (x *GetSearchAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetSearchAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{66}
}

func (x *GetSearchAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSearchAnalyticsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetSearchAnalyticsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetSearchAnalyticsRequest) GetNoResults() bool {
	if x != nil {
		return x.NoResults
	}
	return false
}

func (x *GetSearchAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetSearchAnalyticsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSearchAnalyticsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetSearchAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode    int32             `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Searches      []*SearchActivity `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
	TotalCount    int64             `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	SearchSummary *structpb.Struct  `protobuf:"bytes,4,opt,name=search_summary,json=searchSummary,proto3" json:"search_summary,omitempty"`
	Error         *Error            `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetSearchAnalyticsResponse) Reset() {
	*x = GetSearchAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchAnalyticsResponse) ProtoMessage() {}

func (x *GetSearchAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetSearchAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{67}
}

func (x *GetSearchAnalyticsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetSearchAnalyticsResponse) GetSearches() []*SearchActivity {
	if x != nil {
		return x.Searches
	}
	return nil
}

func (x *GetSearchAnalyticsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetSearchAnalyticsResponse) GetSearchSummary() *structpb.Struct {
	if x != nil {
		return x.SearchSummary
	}
	return nil
}

func (x *GetSearchAnalyticsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Track Performance Event
type TrackPerformanceEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service      string           `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Operation    string           `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	UserId       string           `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DurationMs   int64            `protobuf:"varint,4,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	StatusCode   int32            `protobuf:"varint,5,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	ErrorMessage string           `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	Context      *structpb.Struct `protobuf:"bytes,7,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *TrackPerformanceEventRequest) Reset() {
	*x = TrackPerformanceEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPerformanceEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPerformanceEventRequest) ProtoMessage() {}

func (x *TrackPerformanceEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPerformanceEventRequest.ProtoReflect.Descriptor instead.
func (*TrackPerformanceEventRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{68}
}

func (x *TrackPerformanceEventRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *TrackPerformanceEventRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *TrackPerformanceEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackPerformanceEventRequest) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *TrackPerformanceEventRequest) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackPerformanceEventRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TrackPerformanceEventRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

type TrackPerformanceEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode         int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message            string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	PerformanceEventId string `protobuf:"bytes,3,opt,name=performance_event_id,json=performanceEventId,proto3" json:"performance_event_id,omitempty"`
	Error              *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TrackPerformanceEventResponse) Reset() {
	*x = TrackPerformanceEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPerformanceEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPerformanceEventResponse) ProtoMessage() {}

func (x *TrackPerformanceEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPerformanceEventResponse.ProtoReflect.Descriptor instead.
func (*TrackPerformanceEventResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{69}
}

func (x *TrackPerformanceEventResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TrackPerformanceEventResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TrackPerformanceEventResponse) GetPerformanceEventId() string {
	if x != nil {
		return x.PerformanceEventId
	}
	return ""
}

func (x *TrackPerformanceEventResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get Performance Analytics
type GetPerformanceAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Operation     string                 `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MinStatusCode int32                  `protobuf:"varint,4,opt,name=min_status_code,json=minStatusCode,proto3" json:"min_status_code,omitempty"`
	MaxStatusCode int32                  `protobuf:"varint,5,opt,name=max_status_code,json=maxStatusCode,proto3" json:"max_status_code,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Limit         int32                  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetPerformanceAnalyticsRequest) Reset() {
	*x = GetPerformanceAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceAnalyticsRequest) ProtoMessage() {}

func (x *GetPerformanceAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetPerformanceAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{70}
}

func (x *GetPerformanceAnalyticsRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetPerformanceAnalyticsRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *GetPerformanceAnalyticsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetPerformanceAnalyticsRequest) GetMinStatusCode() int32 {
	if x != nil {
		return x.MinStatusCode
	}
	return 0
}

func (x *GetPerformanceAnalyticsRequest) GetMaxStatusCode() int32 {
	if x != nil {
		return x.MaxStatusCode
	}
	return 0
}

func (x *GetPerformanceAnalyticsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetPerformanceAnalyticsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetPerformanceAnalyticsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPerformanceAnalyticsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetPerformanceAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode         int32               `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Events             []*PerformanceEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	TotalCount         int64               `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	PerformanceSummary *structpb.Struct    `protobuf:"bytes,4,opt,name=performance_summary,json=performanceSummary,proto3" json:"performance_summary,omitempty"`
	Error              *Error              `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *GetPerformanceAnalyticsResponse) Reset() {
	*x = GetPerformanceAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPerformanceAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPerformanceAnalyticsResponse) ProtoMessage() {}

func (x *GetPerformanceAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPerformanceAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetPerformanceAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{71}
}

func (x *GetPerformanceAnalyticsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetPerformanceAnalyticsResponse) GetEvents() []*PerformanceEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetPerformanceAnalyticsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetPerformanceAnalyticsResponse) GetPerformanceSummary() *structpb.Struct {
	if x != nil {
		return x.PerformanceSummary
	}
	return nil
}

func (x *GetPerformanceAnalyticsResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Health Check
type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{72}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode  int32                  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Status      string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	ServiceName string                 `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Version     string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{73}
}

func (x *HealthCheckResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *HealthCheckResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthCheckResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Common Error Message
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP(), []int{74}
}

func (x *Error) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_apis_serviceconn_gateway_activity_pb_gw_activity_proto protoreflect.FileDescriptor

var file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDesc = []byte{
	0x0a, 0x36, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2f, 0x70, 0x62, 0x2f, 0x67, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x04, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x94, 0x04, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x22,
	0xf5, 0x06, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x76, 0x67, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x61, 0x76, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x46,
	0x0a, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x11, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x68, 0x6f,
	0x75, 0x72, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x0d, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x3a, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3a, 0x0a, 0x0e, 0x48, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x06, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x77, 0x65, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x56, 0x69,
	0x73, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xa8, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x83, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd3, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa4, 0x07, 0x0a, 0x11,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x75, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xa5, 0x07, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb2, 0x05, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x4f, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x65, 0x70,
	0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x62, 0x54,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xc3, 0x05, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd7, 0x07, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x61,
	0x6d, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x65, 0x6e, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0c, 0x66, 0x6f, 0x72, 0x65, 0x6e, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xe2, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xce, 0x0e, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x78, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x09, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x78, 0x52, 0x65, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x78, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x78, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x78, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x68, 0x5f, 0x75, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x43, 0x68, 0x55, 0x61, 0x12, 0x27, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x68, 0x5f, 0x75, 0x61, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x43, 0x68, 0x55, 0x61,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x68,
	0x5f, 0x75, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x43, 0x68, 0x55, 0x61, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x69, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x63,
	0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x5f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x66, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x66, 0x5f, 0x69, 0x70,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x66, 0x49, 0x70, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x66,
	0x5f, 0x72, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x66, 0x52, 0x61,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x66, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x66, 0x56, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x74, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x74, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x74, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x74, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0b, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x78, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x78, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x39, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x68, 0x61, 0x73, 0x41, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x65, 0x62, 0x67, 0x6c, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x57, 0x65,
	0x62, 0x67, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f,
	0x74, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0xa9, 0x03, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc6, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xc5, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xad, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xa0, 0x02, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xc9, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xbd,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x78,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xbf, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xcd,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42,
	0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xaf,
	0x02, 0x0a, 0x25, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xb5, 0x01, 0x0a, 0x26, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd9, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x8a, 0x03, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xae, 0x01, 0x0a,
	0x1f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb4, 0x04,
	0x0a, 0x17, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0d, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x72,
	0x6f, 0x70, 0x4f, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x62, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x74, 0x6d, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x6d, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x74, 0x6d, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x6d, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xef, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x66, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x66,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x29,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb5, 0x04, 0x0a, 0x1d, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xaf, 0x01, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9c, 0x02,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb2, 0x05, 0x0a,
	0x1a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb6, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x85,
	0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xca, 0x04, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd4, 0x02,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xe3, 0x05, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x61, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x66, 0x6f,
	0x72, 0x65, 0x6e, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65,
	0x6e, 0x73, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1a, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf4, 0x02, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x42, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x81, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xda, 0x02, 0x0a, 0x1a,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd5, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x89, 0x02, 0x0a, 0x1c, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xe1, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc5, 0x01,
	0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x4f, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x9c, 0x03, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x05, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x56, 0x49, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x49,
	0x41, 0x4c, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x10, 0x0f, 0x2a, 0x75, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0xdd, 0x01, 0x0a,
	0x0c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x4e,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x4f,
	0x55, 0x52, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4a, 0x4f, 0x55, 0x52,
	0x4e, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x45,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x45, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x48, 0x55, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0x88, 0x01, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x57, 0x45, 0x42, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52,
	0x4d, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x50, 0x49, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x44, 0x45,
	0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x2a, 0xa0, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x42, 0x49,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x10,
	0x04, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x2a, 0xdb, 0x01, 0x0a, 0x13, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x53, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x57,
	0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x05, 0x2a, 0xd6, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10,
	0x05, 0x32, 0xa4, 0x18, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x29, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x2d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x2f, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x25,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x65, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x28, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x76, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x76, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x2e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescOnce sync.Once
	file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescData = file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDesc
)

func file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescGZIP() []byte {
	file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescOnce.Do(func() {
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescData)
	})
	return file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDescData
}

var file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_goTypes = []interface{}{
	(ActivityCategory)(0),                          // 0: activity_svc.ActivityCategory
	(Severity)(0),                                  // 1: activity_svc.Severity
	(JourneyStage)(0),                              // 2: activity_svc.JourneyStage
	(Platform)(0),                                  // 3: activity_svc.Platform
	(DeviceType)(0),                                // 4: activity_svc.DeviceType
	(NotificationChannel)(0),                       // 5: activity_svc.NotificationChannel
	(NotificationType)(0),                          // 6: activity_svc.NotificationType
	(*ActivityEvent)(nil),                          // 7: activity_svc.ActivityEvent
	(*SecurityEvent)(nil),                          // 8: activity_svc.SecurityEvent
	(*SecurityContext)(nil),                        // 9: activity_svc.SecurityContext
	(*UserBehaviorAnalytics)(nil),                  // 10: activity_svc.UserBehaviorAnalytics
	(*HourlyActivity)(nil),                         // 11: activity_svc.HourlyActivity
	(*LocationActivity)(nil),                       // 12: activity_svc.LocationActivity
	(*ReadingBehaviorAnalytics)(nil),               // 13: activity_svc.ReadingBehaviorAnalytics
	(*RecommendationInteraction)(nil),              // 14: activity_svc.RecommendationInteraction
	(*ContentInteraction)(nil),                     // 15: activity_svc.ContentInteraction
	(*SearchActivity)(nil),                         // 16: activity_svc.SearchActivity
	(*NotificationEvent)(nil),                      // 17: activity_svc.NotificationEvent
	(*FinancialEvent)(nil),                         // 18: activity_svc.FinancialEvent
	(*UserJourneyEvent)(nil),                       // 19: activity_svc.UserJourneyEvent
	(*IntegrationEvent)(nil),                       // 20: activity_svc.IntegrationEvent
	(*IncidentEvent)(nil),                          // 21: activity_svc.IncidentEvent
	(*ComplianceEvent)(nil),                        // 22: activity_svc.ComplianceEvent
	(*PerformanceEvent)(nil),                       // 23: activity_svc.PerformanceEvent
	(*ClientInfo)(nil),                             // 24: activity_svc.ClientInfo
	(*TrackActivityRequest)(nil),                   // 25: activity_svc.TrackActivityRequest
	(*TrackActivityResponse)(nil),                  // 26: activity_svc.TrackActivityResponse
	(*GetUserActivitiesRequest)(nil),               // 27: activity_svc.GetUserActivitiesRequest
	(*GetUserActivitiesResponse)(nil),              // 28: activity_svc.GetUserActivitiesResponse
	(*GetActivityAnalyticsRequest)(nil),            // 29: activity_svc.GetActivityAnalyticsRequest
	(*GetActivityAnalyticsResponse)(nil),           // 30: activity_svc.GetActivityAnalyticsResponse
	(*TrackSecurityEventRequest)(nil),              // 31: activity_svc.TrackSecurityEventRequest
	(*TrackSecurityEventResponse)(nil),             // 32: activity_svc.TrackSecurityEventResponse
	(*GetSecurityEventsRequest)(nil),               // 33: activity_svc.GetSecurityEventsRequest
	(*GetSecurityEventsResponse)(nil),              // 34: activity_svc.GetSecurityEventsResponse
	(*GetUserBehaviorAnalyticsRequest)(nil),        // 35: activity_svc.GetUserBehaviorAnalyticsRequest
	(*GetUserBehaviorAnalyticsResponse)(nil),       // 36: activity_svc.GetUserBehaviorAnalyticsResponse
	(*GetReadingBehaviorRequest)(nil),              // 37: activity_svc.GetReadingBehaviorRequest
	(*GetReadingBehaviorResponse)(nil),             // 38: activity_svc.GetReadingBehaviorResponse
	(*TrackRecommendationInteractionRequest)(nil),  // 39: activity_svc.TrackRecommendationInteractionRequest
	(*TrackRecommendationInteractionResponse)(nil), // 40: activity_svc.TrackRecommendationInteractionResponse
	(*GetRecommendationAnalyticsRequest)(nil),      // 41: activity_svc.GetRecommendationAnalyticsRequest
	(*GetRecommendationAnalyticsResponse)(nil),     // 42: activity_svc.GetRecommendationAnalyticsResponse
	(*GetContentAnalyticsRequest)(nil),             // 43: activity_svc.GetContentAnalyticsRequest
	(*GetContentAnalyticsResponse)(nil),            // 44: activity_svc.GetContentAnalyticsResponse
	(*TrackContentInteractionRequest)(nil),         // 45: activity_svc.TrackContentInteractionRequest
	(*TrackContentInteractionResponse)(nil),        // 46: activity_svc.TrackContentInteractionResponse
	(*TrackUserJourneyRequest)(nil),                // 47: activity_svc.TrackUserJourneyRequest
	(*TrackUserJourneyResponse)(nil),               // 48: activity_svc.TrackUserJourneyResponse
	(*GetUserJourneyAnalyticsRequest)(nil),         // 49: activity_svc.GetUserJourneyAnalyticsRequest
	(*GetUserJourneyAnalyticsResponse)(nil),        // 50: activity_svc.GetUserJourneyAnalyticsResponse
	(*TrackNotificationEventRequest)(nil),          // 51: activity_svc.TrackNotificationEventRequest
	(*TrackNotificationEventResponse)(nil),         // 52: activity_svc.TrackNotificationEventResponse
	(*GetNotificationAnalyticsRequest)(nil),        // 53: activity_svc.GetNotificationAnalyticsRequest
	(*GetNotificationAnalyticsResponse)(nil),       // 54: activity_svc.GetNotificationAnalyticsResponse
	(*TrackFinancialEventRequest)(nil),             // 55: activity_svc.TrackFinancialEventRequest
	(*TrackFinancialEventResponse)(nil),            // 56: activity_svc.TrackFinancialEventResponse
	(*GetFinancialEventsRequest)(nil),              // 57: activity_svc.GetFinancialEventsRequest
	(*GetFinancialEventsResponse)(nil),             // 58: activity_svc.GetFinancialEventsResponse
	(*TrackIntegrationEventRequest)(nil),           // 59: activity_svc.TrackIntegrationEventRequest
	(*TrackIntegrationEventResponse)(nil),          // 60: activity_svc.TrackIntegrationEventResponse
	(*GetIntegrationEventsRequest)(nil),            // 61: activity_svc.GetIntegrationEventsRequest
	(*GetIntegrationEventsResponse)(nil),           // 62: activity_svc.GetIntegrationEventsResponse
	(*TrackIncidentEventRequest)(nil),              // 63: activity_svc.TrackIncidentEventRequest
	(*TrackIncidentEventResponse)(nil),             // 64: activity_svc.TrackIncidentEventResponse
	(*GetIncidentEventsRequest)(nil),               // 65: activity_svc.GetIncidentEventsRequest
	(*GetIncidentEventsResponse)(nil),              // 66: activity_svc.GetIncidentEventsResponse
	(*TrackComplianceEventRequest)(nil),            // 67: activity_svc.TrackComplianceEventRequest
	(*TrackComplianceEventResponse)(nil),           // 68: activity_svc.TrackComplianceEventResponse
	(*GetComplianceEventsRequest)(nil),             // 69: activity_svc.GetComplianceEventsRequest
	(*GetComplianceEventsResponse)(nil),            // 70: activity_svc.GetComplianceEventsResponse
	(*TrackSearchActivityRequest)(nil),             // 71: activity_svc.TrackSearchActivityRequest
	(*TrackSearchActivityResponse)(nil),            // 72: activity_svc.TrackSearchActivityResponse
	(*GetSearchAnalyticsRequest)(nil),              // 73: activity_svc.GetSearchAnalyticsRequest
	(*GetSearchAnalyticsResponse)(nil),             // 74: activity_svc.GetSearchAnalyticsResponse
	(*TrackPerformanceEventRequest)(nil),           // 75: activity_svc.TrackPerformanceEventRequest
	(*TrackPerformanceEventResponse)(nil),          // 76: activity_svc.TrackPerformanceEventResponse
	(*GetPerformanceAnalyticsRequest)(nil),         // 77: activity_svc.GetPerformanceAnalyticsRequest
	(*GetPerformanceAnalyticsResponse)(nil),        // 78: activity_svc.GetPerformanceAnalyticsResponse
	(*HealthCheckRequest)(nil),                     // 79: activity_svc.HealthCheckRequest
	(*HealthCheckResponse)(nil),                    // 80: activity_svc.HealthCheckResponse
	(*Error)(nil),                                  // 81: activity_svc.Error
	(*structpb.Struct)(nil),                        // 82: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                  // 83: google.protobuf.Timestamp
}
var file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_depIdxs = []int32{
	0,   // 0: activity_svc.ActivityEvent.category:type_name -> activity_svc.ActivityCategory
	24,  // 1: activity_svc.ActivityEvent.client_info:type_name -> activity_svc.ClientInfo
	82,  // 2: activity_svc.ActivityEvent.metadata:type_name -> google.protobuf.Struct
	83,  // 3: activity_svc.ActivityEvent.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 4: activity_svc.ActivityEvent.created_at:type_name -> google.protobuf.Timestamp
	1,   // 5: activity_svc.SecurityEvent.severity:type_name -> activity_svc.Severity
	9,   // 6: activity_svc.SecurityEvent.context:type_name -> activity_svc.SecurityContext
	83,  // 7: activity_svc.SecurityEvent.resolved_at:type_name -> google.protobuf.Timestamp
	83,  // 8: activity_svc.SecurityEvent.created_at:type_name -> google.protobuf.Timestamp
	83,  // 9: activity_svc.SecurityEvent.updated_at:type_name -> google.protobuf.Timestamp
	83,  // 10: activity_svc.SecurityContext.last_success:type_name -> google.protobuf.Timestamp
	82,  // 11: activity_svc.SecurityContext.patterns:type_name -> google.protobuf.Struct
	82,  // 12: activity_svc.UserBehaviorAnalytics.category_breakdown:type_name -> google.protobuf.Struct
	82,  // 13: activity_svc.UserBehaviorAnalytics.action_frequency:type_name -> google.protobuf.Struct
	11,  // 14: activity_svc.UserBehaviorAnalytics.hourly_pattern:type_name -> activity_svc.HourlyActivity
	82,  // 15: activity_svc.UserBehaviorAnalytics.device_usage:type_name -> google.protobuf.Struct
	12,  // 16: activity_svc.UserBehaviorAnalytics.location_pattern:type_name -> activity_svc.LocationActivity
	83,  // 17: activity_svc.UserBehaviorAnalytics.last_activity:type_name -> google.protobuf.Timestamp
	83,  // 18: activity_svc.UserBehaviorAnalytics.created_at:type_name -> google.protobuf.Timestamp
	83,  // 19: activity_svc.UserBehaviorAnalytics.updated_at:type_name -> google.protobuf.Timestamp
	4,   // 20: activity_svc.ReadingBehaviorAnalytics.device_type:type_name -> activity_svc.DeviceType
	83,  // 21: activity_svc.ReadingBehaviorAnalytics.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 22: activity_svc.ReadingBehaviorAnalytics.created_at:type_name -> google.protobuf.Timestamp
	82,  // 23: activity_svc.RecommendationInteraction.context:type_name -> google.protobuf.Struct
	83,  // 24: activity_svc.RecommendationInteraction.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 25: activity_svc.RecommendationInteraction.created_at:type_name -> google.protobuf.Timestamp
	82,  // 26: activity_svc.ContentInteraction.context:type_name -> google.protobuf.Struct
	83,  // 27: activity_svc.ContentInteraction.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 28: activity_svc.ContentInteraction.created_at:type_name -> google.protobuf.Timestamp
	82,  // 29: activity_svc.SearchActivity.filters:type_name -> google.protobuf.Struct
	82,  // 30: activity_svc.SearchActivity.context:type_name -> google.protobuf.Struct
	83,  // 31: activity_svc.SearchActivity.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 32: activity_svc.SearchActivity.created_at:type_name -> google.protobuf.Timestamp
	6,   // 33: activity_svc.NotificationEvent.type:type_name -> activity_svc.NotificationType
	5,   // 34: activity_svc.NotificationEvent.channel:type_name -> activity_svc.NotificationChannel
	83,  // 35: activity_svc.NotificationEvent.open_time:type_name -> google.protobuf.Timestamp
	83,  // 36: activity_svc.NotificationEvent.click_time:type_name -> google.protobuf.Timestamp
	82,  // 37: activity_svc.NotificationEvent.device_info:type_name -> google.protobuf.Struct
	82,  // 38: activity_svc.NotificationEvent.location_info:type_name -> google.protobuf.Struct
	83,  // 39: activity_svc.NotificationEvent.unsubscribe_time:type_name -> google.protobuf.Timestamp
	82,  // 40: activity_svc.NotificationEvent.context:type_name -> google.protobuf.Struct
	83,  // 41: activity_svc.NotificationEvent.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 42: activity_svc.NotificationEvent.created_at:type_name -> google.protobuf.Timestamp
	83,  // 43: activity_svc.NotificationEvent.updated_at:type_name -> google.protobuf.Timestamp
	82,  // 44: activity_svc.FinancialEvent.context:type_name -> google.protobuf.Struct
	83,  // 45: activity_svc.FinancialEvent.processed_at:type_name -> google.protobuf.Timestamp
	83,  // 46: activity_svc.FinancialEvent.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 47: activity_svc.FinancialEvent.created_at:type_name -> google.protobuf.Timestamp
	83,  // 48: activity_svc.FinancialEvent.updated_at:type_name -> google.protobuf.Timestamp
	2,   // 49: activity_svc.UserJourneyEvent.journey_stage:type_name -> activity_svc.JourneyStage
	82,  // 50: activity_svc.UserJourneyEvent.context:type_name -> google.protobuf.Struct
	83,  // 51: activity_svc.UserJourneyEvent.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 52: activity_svc.UserJourneyEvent.created_at:type_name -> google.protobuf.Timestamp
	82,  // 53: activity_svc.IntegrationEvent.context:type_name -> google.protobuf.Struct
	83,  // 54: activity_svc.IntegrationEvent.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 55: activity_svc.IntegrationEvent.created_at:type_name -> google.protobuf.Timestamp
	1,   // 56: activity_svc.IncidentEvent.severity:type_name -> activity_svc.Severity
	82,  // 57: activity_svc.IncidentEvent.forensic_data:type_name -> google.protobuf.Struct
	82,  // 58: activity_svc.IncidentEvent.context:type_name -> google.protobuf.Struct
	83,  // 59: activity_svc.IncidentEvent.detected_at:type_name -> google.protobuf.Timestamp
	83,  // 60: activity_svc.IncidentEvent.resolved_at:type_name -> google.protobuf.Timestamp
	83,  // 61: activity_svc.IncidentEvent.created_at:type_name -> google.protobuf.Timestamp
	83,  // 62: activity_svc.IncidentEvent.updated_at:type_name -> google.protobuf.Timestamp
	82,  // 63: activity_svc.ComplianceEvent.request_data:type_name -> google.protobuf.Struct
	82,  // 64: activity_svc.ComplianceEvent.response_data:type_name -> google.protobuf.Struct
	83,  // 65: activity_svc.ComplianceEvent.completed_at:type_name -> google.protobuf.Timestamp
	83,  // 66: activity_svc.ComplianceEvent.created_at:type_name -> google.protobuf.Timestamp
	83,  // 67: activity_svc.ComplianceEvent.updated_at:type_name -> google.protobuf.Timestamp
	82,  // 68: activity_svc.PerformanceEvent.context:type_name -> google.protobuf.Struct
	83,  // 69: activity_svc.PerformanceEvent.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 70: activity_svc.PerformanceEvent.created_at:type_name -> google.protobuf.Timestamp
	3,   // 71: activity_svc.ClientInfo.platform:type_name -> activity_svc.Platform
	4,   // 72: activity_svc.ClientInfo.device_type:type_name -> activity_svc.DeviceType
	0,   // 73: activity_svc.TrackActivityRequest.category:type_name -> activity_svc.ActivityCategory
	24,  // 74: activity_svc.TrackActivityRequest.client_info:type_name -> activity_svc.ClientInfo
	82,  // 75: activity_svc.TrackActivityRequest.metadata:type_name -> google.protobuf.Struct
	81,  // 76: activity_svc.TrackActivityResponse.error:type_name -> activity_svc.Error
	0,   // 77: activity_svc.GetUserActivitiesRequest.category:type_name -> activity_svc.ActivityCategory
	83,  // 78: activity_svc.GetUserActivitiesRequest.start_time:type_name -> google.protobuf.Timestamp
	83,  // 79: activity_svc.GetUserActivitiesRequest.end_time:type_name -> google.protobuf.Timestamp
	7,   // 80: activity_svc.GetUserActivitiesResponse.activities:type_name -> activity_svc.ActivityEvent
	81,  // 81: activity_svc.GetUserActivitiesResponse.error:type_name -> activity_svc.Error
	0,   // 82: activity_svc.GetActivityAnalyticsRequest.categories:type_name -> activity_svc.ActivityCategory
	10,  // 83: activity_svc.GetActivityAnalyticsResponse.analytics:type_name -> activity_svc.UserBehaviorAnalytics
	81,  // 84: activity_svc.GetActivityAnalyticsResponse.error:type_name -> activity_svc.Error
	1,   // 85: activity_svc.TrackSecurityEventRequest.severity:type_name -> activity_svc.Severity
	9,   // 86: activity_svc.TrackSecurityEventRequest.context:type_name -> activity_svc.SecurityContext
	81,  // 87: activity_svc.TrackSecurityEventResponse.error:type_name -> activity_svc.Error
	1,   // 88: activity_svc.GetSecurityEventsRequest.min_severity:type_name -> activity_svc.Severity
	83,  // 89: activity_svc.GetSecurityEventsRequest.start_time:type_name -> google.protobuf.Timestamp
	83,  // 90: activity_svc.GetSecurityEventsRequest.end_time:type_name -> google.protobuf.Timestamp
	8,   // 91: activity_svc.GetSecurityEventsResponse.events:type_name -> activity_svc.SecurityEvent
	81,  // 92: activity_svc.GetSecurityEventsResponse.error:type_name -> activity_svc.Error
	10,  // 93: activity_svc.GetUserBehaviorAnalyticsResponse.analytics:type_name -> activity_svc.UserBehaviorAnalytics
	81,  // 94: activity_svc.GetUserBehaviorAnalyticsResponse.error:type_name -> activity_svc.Error
	13,  // 95: activity_svc.GetReadingBehaviorResponse.behavior:type_name -> activity_svc.ReadingBehaviorAnalytics
	81,  // 96: activity_svc.GetReadingBehaviorResponse.error:type_name -> activity_svc.Error
	82,  // 97: activity_svc.TrackRecommendationInteractionRequest.context:type_name -> google.protobuf.Struct
	81,  // 98: activity_svc.TrackRecommendationInteractionResponse.error:type_name -> activity_svc.Error
	14,  // 99: activity_svc.GetRecommendationAnalyticsResponse.interactions:type_name -> activity_svc.RecommendationInteraction
	82,  // 100: activity_svc.GetRecommendationAnalyticsResponse.analytics_summary:type_name -> google.protobuf.Struct
	81,  // 101: activity_svc.GetRecommendationAnalyticsResponse.error:type_name -> activity_svc.Error
	15,  // 102: activity_svc.GetContentAnalyticsResponse.interactions:type_name -> activity_svc.ContentInteraction
	82,  // 103: activity_svc.GetContentAnalyticsResponse.analytics_summary:type_name -> google.protobuf.Struct
	81,  // 104: activity_svc.GetContentAnalyticsResponse.error:type_name -> activity_svc.Error
	82,  // 105: activity_svc.TrackContentInteractionRequest.context:type_name -> google.protobuf.Struct
	81,  // 106: activity_svc.TrackContentInteractionResponse.error:type_name -> activity_svc.Error
	2,   // 107: activity_svc.TrackUserJourneyRequest.journey_stage:type_name -> activity_svc.JourneyStage
	82,  // 108: activity_svc.TrackUserJourneyRequest.context:type_name -> google.protobuf.Struct
	81,  // 109: activity_svc.TrackUserJourneyResponse.error:type_name -> activity_svc.Error
	2,   // 110: activity_svc.GetUserJourneyAnalyticsRequest.stage:type_name -> activity_svc.JourneyStage
	19,  // 111: activity_svc.GetUserJourneyAnalyticsResponse.journeys:type_name -> activity_svc.UserJourneyEvent
	82,  // 112: activity_svc.GetUserJourneyAnalyticsResponse.funnel_analytics:type_name -> google.protobuf.Struct
	81,  // 113: activity_svc.GetUserJourneyAnalyticsResponse.error:type_name -> activity_svc.Error
	6,   // 114: activity_svc.TrackNotificationEventRequest.type:type_name -> activity_svc.NotificationType
	5,   // 115: activity_svc.TrackNotificationEventRequest.channel:type_name -> activity_svc.NotificationChannel
	82,  // 116: activity_svc.TrackNotificationEventRequest.device_info:type_name -> google.protobuf.Struct
	82,  // 117: activity_svc.TrackNotificationEventRequest.location_info:type_name -> google.protobuf.Struct
	82,  // 118: activity_svc.TrackNotificationEventRequest.context:type_name -> google.protobuf.Struct
	81,  // 119: activity_svc.TrackNotificationEventResponse.error:type_name -> activity_svc.Error
	6,   // 120: activity_svc.GetNotificationAnalyticsRequest.type:type_name -> activity_svc.NotificationType
	5,   // 121: activity_svc.GetNotificationAnalyticsRequest.channel:type_name -> activity_svc.NotificationChannel
	17,  // 122: activity_svc.GetNotificationAnalyticsResponse.notifications:type_name -> activity_svc.NotificationEvent
	82,  // 123: activity_svc.GetNotificationAnalyticsResponse.analytics_summary:type_name -> google.protobuf.Struct
	81,  // 124: activity_svc.GetNotificationAnalyticsResponse.error:type_name -> activity_svc.Error
	82,  // 125: activity_svc.TrackFinancialEventRequest.context:type_name -> google.protobuf.Struct
	81,  // 126: activity_svc.TrackFinancialEventResponse.error:type_name -> activity_svc.Error
	83,  // 127: activity_svc.GetFinancialEventsRequest.start_time:type_name -> google.protobuf.Timestamp
	83,  // 128: activity_svc.GetFinancialEventsRequest.end_time:type_name -> google.protobuf.Timestamp
	18,  // 129: activity_svc.GetFinancialEventsResponse.events:type_name -> activity_svc.FinancialEvent
	82,  // 130: activity_svc.GetFinancialEventsResponse.financial_summary:type_name -> google.protobuf.Struct
	81,  // 131: activity_svc.GetFinancialEventsResponse.error:type_name -> activity_svc.Error
	82,  // 132: activity_svc.TrackIntegrationEventRequest.context:type_name -> google.protobuf.Struct
	81,  // 133: activity_svc.TrackIntegrationEventResponse.error:type_name -> activity_svc.Error
	83,  // 134: activity_svc.GetIntegrationEventsRequest.start_time:type_name -> google.protobuf.Timestamp
	83,  // 135: activity_svc.GetIntegrationEventsRequest.end_time:type_name -> google.protobuf.Timestamp
	20,  // 136: activity_svc.GetIntegrationEventsResponse.events:type_name -> activity_svc.IntegrationEvent
	82,  // 137: activity_svc.GetIntegrationEventsResponse.integration_summary:type_name -> google.protobuf.Struct
	81,  // 138: activity_svc.GetIntegrationEventsResponse.error:type_name -> activity_svc.Error
	1,   // 139: activity_svc.TrackIncidentEventRequest.severity:type_name -> activity_svc.Severity
	82,  // 140: activity_svc.TrackIncidentEventRequest.forensic_data:type_name -> google.protobuf.Struct
	82,  // 141: activity_svc.TrackIncidentEventRequest.context:type_name -> google.protobuf.Struct
	81,  // 142: activity_svc.TrackIncidentEventResponse.error:type_name -> activity_svc.Error
	1,   // 143: activity_svc.GetIncidentEventsRequest.min_severity:type_name -> activity_svc.Severity
	83,  // 144: activity_svc.GetIncidentEventsRequest.start_time:type_name -> google.protobuf.Timestamp
	83,  // 145: activity_svc.GetIncidentEventsRequest.end_time:type_name -> google.protobuf.Timestamp
	21,  // 146: activity_svc.GetIncidentEventsResponse.events:type_name -> activity_svc.IncidentEvent
	82,  // 147: activity_svc.GetIncidentEventsResponse.incident_summary:type_name -> google.protobuf.Struct
	81,  // 148: activity_svc.GetIncidentEventsResponse.error:type_name -> activity_svc.Error
	82,  // 149: activity_svc.TrackComplianceEventRequest.request_data:type_name -> google.protobuf.Struct
	82,  // 150: activity_svc.TrackComplianceEventRequest.response_data:type_name -> google.protobuf.Struct
	81,  // 151: activity_svc.TrackComplianceEventResponse.error:type_name -> activity_svc.Error
	83,  // 152: activity_svc.GetComplianceEventsRequest.start_time:type_name -> google.protobuf.Timestamp
	83,  // 153: activity_svc.GetComplianceEventsRequest.end_time:type_name -> google.protobuf.Timestamp
	22,  // 154: activity_svc.GetComplianceEventsResponse.events:type_name -> activity_svc.ComplianceEvent
	81,  // 155: activity_svc.GetComplianceEventsResponse.error:type_name -> activity_svc.Error
	82,  // 156: activity_svc.TrackSearchActivityRequest.filters:type_name -> google.protobuf.Struct
	82,  // 157: activity_svc.TrackSearchActivityRequest.context:type_name -> google.protobuf.Struct
	81,  // 158: activity_svc.TrackSearchActivityResponse.error:type_name -> activity_svc.Error
	16,  // 159: activity_svc.GetSearchAnalyticsResponse.searches:type_name -> activity_svc.SearchActivity
	82,  // 160: activity_svc.GetSearchAnalyticsResponse.search_summary:type_name -> google.protobuf.Struct
	81,  // 161: activity_svc.GetSearchAnalyticsResponse.error:type_name -> activity_svc.Error
	82,  // 162: activity_svc.TrackPerformanceEventRequest.context:type_name -> google.protobuf.Struct
	81,  // 163: activity_svc.TrackPerformanceEventResponse.error:type_name -> activity_svc.Error
	83,  // 164: activity_svc.GetPerformanceAnalyticsRequest.start_time:type_name -> google.protobuf.Timestamp
	83,  // 165: activity_svc.GetPerformanceAnalyticsRequest.end_time:type_name -> google.protobuf.Timestamp
	23,  // 166: activity_svc.GetPerformanceAnalyticsResponse.events:type_name -> activity_svc.PerformanceEvent
	82,  // 167: activity_svc.GetPerformanceAnalyticsResponse.performance_summary:type_name -> google.protobuf.Struct
	81,  // 168: activity_svc.GetPerformanceAnalyticsResponse.error:type_name -> activity_svc.Error
	83,  // 169: activity_svc.HealthCheckResponse.timestamp:type_name -> google.protobuf.Timestamp
	25,  // 170: activity_svc.ActivityService.TrackActivity:input_type -> activity_svc.TrackActivityRequest
	27,  // 171: activity_svc.ActivityService.GetUserActivities:input_type -> activity_svc.GetUserActivitiesRequest
	29,  // 172: activity_svc.ActivityService.GetActivityAnalytics:input_type -> activity_svc.GetActivityAnalyticsRequest
	31,  // 173: activity_svc.ActivityService.TrackSecurityEvent:input_type -> activity_svc.TrackSecurityEventRequest
	33,  // 174: activity_svc.ActivityService.GetSecurityEvents:input_type -> activity_svc.GetSecurityEventsRequest
	35,  // 175: activity_svc.ActivityService.GetUserBehaviorAnalytics:input_type -> activity_svc.GetUserBehaviorAnalyticsRequest
	37,  // 176: activity_svc.ActivityService.GetReadingBehavior:input_type -> activity_svc.GetReadingBehaviorRequest
	39,  // 177: activity_svc.ActivityService.TrackRecommendationInteraction:input_type -> activity_svc.TrackRecommendationInteractionRequest
	41,  // 178: activity_svc.ActivityService.GetRecommendationAnalytics:input_type -> activity_svc.GetRecommendationAnalyticsRequest
	43,  // 179: activity_svc.ActivityService.GetContentAnalytics:input_type -> activity_svc.GetContentAnalyticsRequest
	45,  // 180: activity_svc.ActivityService.TrackContentInteraction:input_type -> activity_svc.TrackContentInteractionRequest
	47,  // 181: activity_svc.ActivityService.TrackUserJourney:input_type -> activity_svc.TrackUserJourneyRequest
	49,  // 182: activity_svc.ActivityService.GetUserJourneyAnalytics:input_type -> activity_svc.GetUserJourneyAnalyticsRequest
	51,  // 183: activity_svc.ActivityService.TrackNotificationEvent:input_type -> activity_svc.TrackNotificationEventRequest
	53,  // 184: activity_svc.ActivityService.GetNotificationAnalytics:input_type -> activity_svc.GetNotificationAnalyticsRequest
	55,  // 185: activity_svc.ActivityService.TrackFinancialEvent:input_type -> activity_svc.TrackFinancialEventRequest
	57,  // 186: activity_svc.ActivityService.GetFinancialEvents:input_type -> activity_svc.GetFinancialEventsRequest
	59,  // 187: activity_svc.ActivityService.TrackIntegrationEvent:input_type -> activity_svc.TrackIntegrationEventRequest
	61,  // 188: activity_svc.ActivityService.GetIntegrationEvents:input_type -> activity_svc.GetIntegrationEventsRequest
	63,  // 189: activity_svc.ActivityService.TrackIncidentEvent:input_type -> activity_svc.TrackIncidentEventRequest
	65,  // 190: activity_svc.ActivityService.GetIncidentEvents:input_type -> activity_svc.GetIncidentEventsRequest
	67,  // 191: activity_svc.ActivityService.TrackComplianceEvent:input_type -> activity_svc.TrackComplianceEventRequest
	69,  // 192: activity_svc.ActivityService.GetComplianceEvents:input_type -> activity_svc.GetComplianceEventsRequest
	71,  // 193: activity_svc.ActivityService.TrackSearchActivity:input_type -> activity_svc.TrackSearchActivityRequest
	73,  // 194: activity_svc.ActivityService.GetSearchAnalytics:input_type -> activity_svc.GetSearchAnalyticsRequest
	75,  // 195: activity_svc.ActivityService.TrackPerformanceEvent:input_type -> activity_svc.TrackPerformanceEventRequest
	77,  // 196: activity_svc.ActivityService.GetPerformanceAnalytics:input_type -> activity_svc.GetPerformanceAnalyticsRequest
	79,  // 197: activity_svc.ActivityService.HealthCheck:input_type -> activity_svc.HealthCheckRequest
	26,  // 198: activity_svc.ActivityService.TrackActivity:output_type -> activity_svc.TrackActivityResponse
	28,  // 199: activity_svc.ActivityService.GetUserActivities:output_type -> activity_svc.GetUserActivitiesResponse
	30,  // 200: activity_svc.ActivityService.GetActivityAnalytics:output_type -> activity_svc.GetActivityAnalyticsResponse
	32,  // 201: activity_svc.ActivityService.TrackSecurityEvent:output_type -> activity_svc.TrackSecurityEventResponse
	34,  // 202: activity_svc.ActivityService.GetSecurityEvents:output_type -> activity_svc.GetSecurityEventsResponse
	36,  // 203: activity_svc.ActivityService.GetUserBehaviorAnalytics:output_type -> activity_svc.GetUserBehaviorAnalyticsResponse
	38,  // 204: activity_svc.ActivityService.GetReadingBehavior:output_type -> activity_svc.GetReadingBehaviorResponse
	40,  // 205: activity_svc.ActivityService.TrackRecommendationInteraction:output_type -> activity_svc.TrackRecommendationInteractionResponse
	42,  // 206: activity_svc.ActivityService.GetRecommendationAnalytics:output_type -> activity_svc.GetRecommendationAnalyticsResponse
	44,  // 207: activity_svc.ActivityService.GetContentAnalytics:output_type -> activity_svc.GetContentAnalyticsResponse
	46,  // 208: activity_svc.ActivityService.TrackContentInteraction:output_type -> activity_svc.TrackContentInteractionResponse
	48,  // 209: activity_svc.ActivityService.TrackUserJourney:output_type -> activity_svc.TrackUserJourneyResponse
	50,  // 210: activity_svc.ActivityService.GetUserJourneyAnalytics:output_type -> activity_svc.GetUserJourneyAnalyticsResponse
	52,  // 211: activity_svc.ActivityService.TrackNotificationEvent:output_type -> activity_svc.TrackNotificationEventResponse
	54,  // 212: activity_svc.ActivityService.GetNotificationAnalytics:output_type -> activity_svc.GetNotificationAnalyticsResponse
	56,  // 213: activity_svc.ActivityService.TrackFinancialEvent:output_type -> activity_svc.TrackFinancialEventResponse
	58,  // 214: activity_svc.ActivityService.GetFinancialEvents:output_type -> activity_svc.GetFinancialEventsResponse
	60,  // 215: activity_svc.ActivityService.TrackIntegrationEvent:output_type -> activity_svc.TrackIntegrationEventResponse
	62,  // 216: activity_svc.ActivityService.GetIntegrationEvents:output_type -> activity_svc.GetIntegrationEventsResponse
	64,  // 217: activity_svc.ActivityService.TrackIncidentEvent:output_type -> activity_svc.TrackIncidentEventResponse
	66,  // 218: activity_svc.ActivityService.GetIncidentEvents:output_type -> activity_svc.GetIncidentEventsResponse
	68,  // 219: activity_svc.ActivityService.TrackComplianceEvent:output_type -> activity_svc.TrackComplianceEventResponse
	70,  // 220: activity_svc.ActivityService.GetComplianceEvents:output_type -> activity_svc.GetComplianceEventsResponse
	72,  // 221: activity_svc.ActivityService.TrackSearchActivity:output_type -> activity_svc.TrackSearchActivityResponse
	74,  // 222: activity_svc.ActivityService.GetSearchAnalytics:output_type -> activity_svc.GetSearchAnalyticsResponse
	76,  // 223: activity_svc.ActivityService.TrackPerformanceEvent:output_type -> activity_svc.TrackPerformanceEventResponse
	78,  // 224: activity_svc.ActivityService.GetPerformanceAnalytics:output_type -> activity_svc.GetPerformanceAnalyticsResponse
	80,  // 225: activity_svc.ActivityService.HealthCheck:output_type -> activity_svc.HealthCheckResponse
	198, // [198:226] is the sub-list for method output_type
	170, // [170:198] is the sub-list for method input_type
	170, // [170:170] is the sub-list for extension type_name
	170, // [170:170] is the sub-list for extension extendee
	0,   // [0:170] is the sub-list for field type_name
}

func init() { file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_init() }
func file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_init() {
	if File_apis_serviceconn_gateway_activity_pb_gw_activity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBehaviorAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HourlyActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadingBehaviorAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendationInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentInteraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJourneyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncidentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplianceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserActivitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserActivitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSecurityEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSecurityEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBehaviorAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBehaviorAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadingBehaviorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReadingBehaviorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackRecommendationInteractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackRecommendationInteractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendationAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecommendationAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackContentInteractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackContentInteractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackUserJourneyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackUserJourneyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserJourneyAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserJourneyAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackNotificationEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackNotificationEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotificationAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotificationAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackFinancialEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackFinancialEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFinancialEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackIntegrationEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackIntegrationEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntegrationEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntegrationEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackIncidentEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackIncidentEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIncidentEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIncidentEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackComplianceEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackComplianceEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetComplianceEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetComplianceEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSearchActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackSearchActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSearchAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSearchAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPerformanceEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPerformanceEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPerformanceAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_goTypes,
		DependencyIndexes: file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_depIdxs,
		EnumInfos:         file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_enumTypes,
		MessageInfos:      file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_msgTypes,
	}.Build()
	File_apis_serviceconn_gateway_activity_pb_gw_activity_proto = out.File
	file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_rawDesc = nil
	file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_goTypes = nil
	file_apis_serviceconn_gateway_activity_pb_gw_activity_proto_depIdxs = nil
}
