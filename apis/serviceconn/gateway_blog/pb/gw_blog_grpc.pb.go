// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: apis/serviceconn/gateway_blog/pb/gw_blog.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlogService_GetBlogsMetadata_FullMethodName               = "/blog_svc.BlogService/GetBlogsMetadata"
	BlogService_SearchBlogsMetadata_FullMethodName            = "/blog_svc.BlogService/SearchBlogsMetadata"
	BlogService_PublishBlog_FullMethodName                    = "/blog_svc.BlogService/PublishBlog"
	BlogService_DraftBlog_FullMethodName                      = "/blog_svc.BlogService/DraftBlog"
	BlogService_GetPublishedBlogById_FullMethodName           = "/blog_svc.BlogService/GetPublishedBlogById"
	BlogService_GetDraftBlogById_FullMethodName               = "/blog_svc.BlogService/GetDraftBlogById"
	BlogService_ArchiveBlogById_FullMethodName                = "/blog_svc.BlogService/ArchiveBlogById"
	BlogService_GetPublishedBlogsByTagsName_FullMethodName    = "/blog_svc.BlogService/GetPublishedBlogsByTagsName"
	BlogService_GetDraftBlogsByAccId_FullMethodName           = "/blog_svc.BlogService/GetDraftBlogsByAccId"
	BlogService_GetPublishedBlogsByAccID_FullMethodName       = "/blog_svc.BlogService/GetPublishedBlogsByAccID"
	BlogService_GetLatest100Blogs_FullMethodName              = "/blog_svc.BlogService/GetLatest100Blogs"
	BlogService_GetPublishedBlogByIdAndOwnerId_FullMethodName = "/blog_svc.BlogService/GetPublishedBlogByIdAndOwnerId"
	BlogService_GetAllBlogsByBlogIds_FullMethodName           = "/blog_svc.BlogService/GetAllBlogsByBlogIds"
	BlogService_CheckIfBlogsExist_FullMethodName              = "/blog_svc.BlogService/CheckIfBlogsExist"
	BlogService_DeleteABlogByBlogId_FullMethodName            = "/blog_svc.BlogService/DeleteABlogByBlogId"
	BlogService_GetDraftBlogByBlogId_FullMethodName           = "/blog_svc.BlogService/GetDraftBlogByBlogId"
	BlogService_DraftBlogV2_FullMethodName                    = "/blog_svc.BlogService/DraftBlogV2"
	BlogService_BlogsOfFollowingAccounts_FullMethodName       = "/blog_svc.BlogService/BlogsOfFollowingAccounts"
	BlogService_GetBlogs_FullMethodName                       = "/blog_svc.BlogService/GetBlogs"
	BlogService_GetBlog_FullMethodName                        = "/blog_svc.BlogService/GetBlog"
	BlogService_MoveBlogToDraftStatus_FullMethodName          = "/blog_svc.BlogService/MoveBlogToDraftStatus"
	BlogService_GetBlogsBySlice_FullMethodName                = "/blog_svc.BlogService/GetBlogsBySlice"
	BlogService_GetFeedBlogs_FullMethodName                   = "/blog_svc.BlogService/GetFeedBlogs"
)

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	// Metadata may contain the blog id, owner account id, title, first paragraph,
	// tags, first image, publish time, author name, etc.
	GetBlogsMetadata(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error)
	SearchBlogsMetadata(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error)
	PublishBlog(ctx context.Context, in *PublishBlogReq, opts ...grpc.CallOption) (*PublishBlogResp, error)
	// --------------------------------------------------------------------- Deprecated APIs ---------------------------------------------------------------------
	// TODO: Remove the deprecated APIs
	DraftBlog(ctx context.Context, in *DraftBlogRequest, opts ...grpc.CallOption) (*BlogResponse, error)
	GetPublishedBlogById(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogByIdRes, error)
	GetDraftBlogById(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogByIdRes, error)
	ArchiveBlogById(ctx context.Context, in *ArchiveBlogReq, opts ...grpc.CallOption) (*ArchiveBlogResp, error)
	GetPublishedBlogsByTagsName(ctx context.Context, in *GetBlogsByTagsNameReq, opts ...grpc.CallOption) (*GetBlogsByTagsNameRes, error)
	GetDraftBlogsByAccId(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*GetDraftBlogsRes, error)
	GetPublishedBlogsByAccID(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*GetPublishedBlogsRes, error)
	GetLatest100Blogs(ctx context.Context, in *GetBlogsByTagsNameReq, opts ...grpc.CallOption) (*GetBlogsByTagsNameRes, error)
	GetPublishedBlogByIdAndOwnerId(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogByIdRes, error)
	GetAllBlogsByBlogIds(ctx context.Context, in *GetBlogsByBlogIds, opts ...grpc.CallOption) (*GetBlogsRes, error)
	CheckIfBlogsExist(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogExistsRes, error)
	DeleteABlogByBlogId(ctx context.Context, in *DeleteBlogReq, opts ...grpc.CallOption) (*DeleteBlogResp, error)
	// Corrected APIS
	GetDraftBlogByBlogId(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogByIdRes, error)
	// --------------------------------------------------------------------- V2 APIs ---------------------------------------------------------------------
	DraftBlogV2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[anypb.Any, anypb.Any], error)
	BlogsOfFollowingAccounts(ctx context.Context, in *FollowingAccounts, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error)
	GetBlogs(ctx context.Context, in *GetBlogsReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error)
	GetBlog(ctx context.Context, in *BlogReq, opts ...grpc.CallOption) (*anypb.Any, error)
	MoveBlogToDraftStatus(ctx context.Context, in *BlogReq, opts ...grpc.CallOption) (*BlogResp, error)
	GetBlogsBySlice(ctx context.Context, in *GetBlogsBySliceReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error)
	GetFeedBlogs(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) GetBlogsMetadata(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[0], BlogService_GetBlogsMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FeedReq, anypb.Any]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_GetBlogsMetadataClient = grpc.ServerStreamingClient[anypb.Any]

func (c *blogServiceClient) SearchBlogsMetadata(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[1], BlogService_SearchBlogsMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SearchReq, anypb.Any]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_SearchBlogsMetadataClient = grpc.ServerStreamingClient[anypb.Any]

func (c *blogServiceClient) PublishBlog(ctx context.Context, in *PublishBlogReq, opts ...grpc.CallOption) (*PublishBlogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishBlogResp)
	err := c.cc.Invoke(ctx, BlogService_PublishBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DraftBlog(ctx context.Context, in *DraftBlogRequest, opts ...grpc.CallOption) (*BlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogResponse)
	err := c.cc.Invoke(ctx, BlogService_DraftBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetPublishedBlogById(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogByIdRes)
	err := c.cc.Invoke(ctx, BlogService_GetPublishedBlogById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetDraftBlogById(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogByIdRes)
	err := c.cc.Invoke(ctx, BlogService_GetDraftBlogById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ArchiveBlogById(ctx context.Context, in *ArchiveBlogReq, opts ...grpc.CallOption) (*ArchiveBlogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveBlogResp)
	err := c.cc.Invoke(ctx, BlogService_ArchiveBlogById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetPublishedBlogsByTagsName(ctx context.Context, in *GetBlogsByTagsNameReq, opts ...grpc.CallOption) (*GetBlogsByTagsNameRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogsByTagsNameRes)
	err := c.cc.Invoke(ctx, BlogService_GetPublishedBlogsByTagsName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetDraftBlogsByAccId(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*GetDraftBlogsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDraftBlogsRes)
	err := c.cc.Invoke(ctx, BlogService_GetDraftBlogsByAccId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetPublishedBlogsByAccID(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*GetPublishedBlogsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublishedBlogsRes)
	err := c.cc.Invoke(ctx, BlogService_GetPublishedBlogsByAccID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetLatest100Blogs(ctx context.Context, in *GetBlogsByTagsNameReq, opts ...grpc.CallOption) (*GetBlogsByTagsNameRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogsByTagsNameRes)
	err := c.cc.Invoke(ctx, BlogService_GetLatest100Blogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetPublishedBlogByIdAndOwnerId(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogByIdRes)
	err := c.cc.Invoke(ctx, BlogService_GetPublishedBlogByIdAndOwnerId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetAllBlogsByBlogIds(ctx context.Context, in *GetBlogsByBlogIds, opts ...grpc.CallOption) (*GetBlogsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogsRes)
	err := c.cc.Invoke(ctx, BlogService_GetAllBlogsByBlogIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) CheckIfBlogsExist(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogExistsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogExistsRes)
	err := c.cc.Invoke(ctx, BlogService_CheckIfBlogsExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteABlogByBlogId(ctx context.Context, in *DeleteBlogReq, opts ...grpc.CallOption) (*DeleteBlogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlogResp)
	err := c.cc.Invoke(ctx, BlogService_DeleteABlogByBlogId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetDraftBlogByBlogId(ctx context.Context, in *BlogByIdReq, opts ...grpc.CallOption) (*BlogByIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogByIdRes)
	err := c.cc.Invoke(ctx, BlogService_GetDraftBlogByBlogId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DraftBlogV2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[anypb.Any, anypb.Any], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[2], BlogService_DraftBlogV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[anypb.Any, anypb.Any]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_DraftBlogV2Client = grpc.BidiStreamingClient[anypb.Any, anypb.Any]

func (c *blogServiceClient) BlogsOfFollowingAccounts(ctx context.Context, in *FollowingAccounts, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[3], BlogService_BlogsOfFollowingAccounts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FollowingAccounts, anypb.Any]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_BlogsOfFollowingAccountsClient = grpc.ServerStreamingClient[anypb.Any]

func (c *blogServiceClient) GetBlogs(ctx context.Context, in *GetBlogsReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[4], BlogService_GetBlogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlogsReq, anypb.Any]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_GetBlogsClient = grpc.ServerStreamingClient[anypb.Any]

func (c *blogServiceClient) GetBlog(ctx context.Context, in *BlogReq, opts ...grpc.CallOption) (*anypb.Any, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, BlogService_GetBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) MoveBlogToDraftStatus(ctx context.Context, in *BlogReq, opts ...grpc.CallOption) (*BlogResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogResp)
	err := c.cc.Invoke(ctx, BlogService_MoveBlogToDraftStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetBlogsBySlice(ctx context.Context, in *GetBlogsBySliceReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[5], BlogService_GetBlogsBySlice_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlogsBySliceReq, anypb.Any]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_GetBlogsBySliceClient = grpc.ServerStreamingClient[anypb.Any]

func (c *blogServiceClient) GetFeedBlogs(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[anypb.Any], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BlogService_ServiceDesc.Streams[6], BlogService_GetFeedBlogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FeedReq, anypb.Any]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_GetFeedBlogsClient = grpc.ServerStreamingClient[anypb.Any]

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility.
type BlogServiceServer interface {
	// Metadata may contain the blog id, owner account id, title, first paragraph,
	// tags, first image, publish time, author name, etc.
	GetBlogsMetadata(*FeedReq, grpc.ServerStreamingServer[anypb.Any]) error
	SearchBlogsMetadata(*SearchReq, grpc.ServerStreamingServer[anypb.Any]) error
	PublishBlog(context.Context, *PublishBlogReq) (*PublishBlogResp, error)
	// --------------------------------------------------------------------- Deprecated APIs ---------------------------------------------------------------------
	// TODO: Remove the deprecated APIs
	DraftBlog(context.Context, *DraftBlogRequest) (*BlogResponse, error)
	GetPublishedBlogById(context.Context, *BlogByIdReq) (*BlogByIdRes, error)
	GetDraftBlogById(context.Context, *BlogByIdReq) (*BlogByIdRes, error)
	ArchiveBlogById(context.Context, *ArchiveBlogReq) (*ArchiveBlogResp, error)
	GetPublishedBlogsByTagsName(context.Context, *GetBlogsByTagsNameReq) (*GetBlogsByTagsNameRes, error)
	GetDraftBlogsByAccId(context.Context, *BlogByIdReq) (*GetDraftBlogsRes, error)
	GetPublishedBlogsByAccID(context.Context, *BlogByIdReq) (*GetPublishedBlogsRes, error)
	GetLatest100Blogs(context.Context, *GetBlogsByTagsNameReq) (*GetBlogsByTagsNameRes, error)
	GetPublishedBlogByIdAndOwnerId(context.Context, *BlogByIdReq) (*BlogByIdRes, error)
	GetAllBlogsByBlogIds(context.Context, *GetBlogsByBlogIds) (*GetBlogsRes, error)
	CheckIfBlogsExist(context.Context, *BlogByIdReq) (*BlogExistsRes, error)
	DeleteABlogByBlogId(context.Context, *DeleteBlogReq) (*DeleteBlogResp, error)
	// Corrected APIS
	GetDraftBlogByBlogId(context.Context, *BlogByIdReq) (*BlogByIdRes, error)
	// --------------------------------------------------------------------- V2 APIs ---------------------------------------------------------------------
	DraftBlogV2(grpc.BidiStreamingServer[anypb.Any, anypb.Any]) error
	BlogsOfFollowingAccounts(*FollowingAccounts, grpc.ServerStreamingServer[anypb.Any]) error
	GetBlogs(*GetBlogsReq, grpc.ServerStreamingServer[anypb.Any]) error
	GetBlog(context.Context, *BlogReq) (*anypb.Any, error)
	MoveBlogToDraftStatus(context.Context, *BlogReq) (*BlogResp, error)
	GetBlogsBySlice(*GetBlogsBySliceReq, grpc.ServerStreamingServer[anypb.Any]) error
	GetFeedBlogs(*FeedReq, grpc.ServerStreamingServer[anypb.Any]) error
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogServiceServer struct{}

func (UnimplementedBlogServiceServer) GetBlogsMetadata(*FeedReq, grpc.ServerStreamingServer[anypb.Any]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlogsMetadata not implemented")
}
func (UnimplementedBlogServiceServer) SearchBlogsMetadata(*SearchReq, grpc.ServerStreamingServer[anypb.Any]) error {
	return status.Errorf(codes.Unimplemented, "method SearchBlogsMetadata not implemented")
}
func (UnimplementedBlogServiceServer) PublishBlog(context.Context, *PublishBlogReq) (*PublishBlogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishBlog not implemented")
}
func (UnimplementedBlogServiceServer) DraftBlog(context.Context, *DraftBlogRequest) (*BlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DraftBlog not implemented")
}
func (UnimplementedBlogServiceServer) GetPublishedBlogById(context.Context, *BlogByIdReq) (*BlogByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedBlogById not implemented")
}
func (UnimplementedBlogServiceServer) GetDraftBlogById(context.Context, *BlogByIdReq) (*BlogByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraftBlogById not implemented")
}
func (UnimplementedBlogServiceServer) ArchiveBlogById(context.Context, *ArchiveBlogReq) (*ArchiveBlogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveBlogById not implemented")
}
func (UnimplementedBlogServiceServer) GetPublishedBlogsByTagsName(context.Context, *GetBlogsByTagsNameReq) (*GetBlogsByTagsNameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedBlogsByTagsName not implemented")
}
func (UnimplementedBlogServiceServer) GetDraftBlogsByAccId(context.Context, *BlogByIdReq) (*GetDraftBlogsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraftBlogsByAccId not implemented")
}
func (UnimplementedBlogServiceServer) GetPublishedBlogsByAccID(context.Context, *BlogByIdReq) (*GetPublishedBlogsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedBlogsByAccID not implemented")
}
func (UnimplementedBlogServiceServer) GetLatest100Blogs(context.Context, *GetBlogsByTagsNameReq) (*GetBlogsByTagsNameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatest100Blogs not implemented")
}
func (UnimplementedBlogServiceServer) GetPublishedBlogByIdAndOwnerId(context.Context, *BlogByIdReq) (*BlogByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedBlogByIdAndOwnerId not implemented")
}
func (UnimplementedBlogServiceServer) GetAllBlogsByBlogIds(context.Context, *GetBlogsByBlogIds) (*GetBlogsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlogsByBlogIds not implemented")
}
func (UnimplementedBlogServiceServer) CheckIfBlogsExist(context.Context, *BlogByIdReq) (*BlogExistsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfBlogsExist not implemented")
}
func (UnimplementedBlogServiceServer) DeleteABlogByBlogId(context.Context, *DeleteBlogReq) (*DeleteBlogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteABlogByBlogId not implemented")
}
func (UnimplementedBlogServiceServer) GetDraftBlogByBlogId(context.Context, *BlogByIdReq) (*BlogByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraftBlogByBlogId not implemented")
}
func (UnimplementedBlogServiceServer) DraftBlogV2(grpc.BidiStreamingServer[anypb.Any, anypb.Any]) error {
	return status.Errorf(codes.Unimplemented, "method DraftBlogV2 not implemented")
}
func (UnimplementedBlogServiceServer) BlogsOfFollowingAccounts(*FollowingAccounts, grpc.ServerStreamingServer[anypb.Any]) error {
	return status.Errorf(codes.Unimplemented, "method BlogsOfFollowingAccounts not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogs(*GetBlogsReq, grpc.ServerStreamingServer[anypb.Any]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlogs not implemented")
}
func (UnimplementedBlogServiceServer) GetBlog(context.Context, *BlogReq) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlog not implemented")
}
func (UnimplementedBlogServiceServer) MoveBlogToDraftStatus(context.Context, *BlogReq) (*BlogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveBlogToDraftStatus not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogsBySlice(*GetBlogsBySliceReq, grpc.ServerStreamingServer[anypb.Any]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlogsBySlice not implemented")
}
func (UnimplementedBlogServiceServer) GetFeedBlogs(*FeedReq, grpc.ServerStreamingServer[anypb.Any]) error {
	return status.Errorf(codes.Unimplemented, "method GetFeedBlogs not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}
func (UnimplementedBlogServiceServer) testEmbeddedByValue()                     {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_GetBlogsMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeedReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).GetBlogsMetadata(m, &grpc.GenericServerStream[FeedReq, anypb.Any]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_GetBlogsMetadataServer = grpc.ServerStreamingServer[anypb.Any]

func _BlogService_SearchBlogsMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).SearchBlogsMetadata(m, &grpc.GenericServerStream[SearchReq, anypb.Any]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_SearchBlogsMetadataServer = grpc.ServerStreamingServer[anypb.Any]

func _BlogService_PublishBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).PublishBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_PublishBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).PublishBlog(ctx, req.(*PublishBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DraftBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DraftBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DraftBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DraftBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DraftBlog(ctx, req.(*DraftBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetPublishedBlogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetPublishedBlogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetPublishedBlogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetPublishedBlogById(ctx, req.(*BlogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetDraftBlogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetDraftBlogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetDraftBlogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetDraftBlogById(ctx, req.(*BlogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ArchiveBlogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ArchiveBlogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_ArchiveBlogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ArchiveBlogById(ctx, req.(*ArchiveBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetPublishedBlogsByTagsName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogsByTagsNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetPublishedBlogsByTagsName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetPublishedBlogsByTagsName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetPublishedBlogsByTagsName(ctx, req.(*GetBlogsByTagsNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetDraftBlogsByAccId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetDraftBlogsByAccId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetDraftBlogsByAccId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetDraftBlogsByAccId(ctx, req.(*BlogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetPublishedBlogsByAccID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetPublishedBlogsByAccID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetPublishedBlogsByAccID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetPublishedBlogsByAccID(ctx, req.(*BlogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetLatest100Blogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogsByTagsNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetLatest100Blogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetLatest100Blogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetLatest100Blogs(ctx, req.(*GetBlogsByTagsNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetPublishedBlogByIdAndOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetPublishedBlogByIdAndOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetPublishedBlogByIdAndOwnerId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetPublishedBlogByIdAndOwnerId(ctx, req.(*BlogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetAllBlogsByBlogIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogsByBlogIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetAllBlogsByBlogIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetAllBlogsByBlogIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetAllBlogsByBlogIds(ctx, req.(*GetBlogsByBlogIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_CheckIfBlogsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CheckIfBlogsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_CheckIfBlogsExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CheckIfBlogsExist(ctx, req.(*BlogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteABlogByBlogId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteABlogByBlogId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteABlogByBlogId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteABlogByBlogId(ctx, req.(*DeleteBlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetDraftBlogByBlogId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetDraftBlogByBlogId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetDraftBlogByBlogId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetDraftBlogByBlogId(ctx, req.(*BlogByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DraftBlogV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlogServiceServer).DraftBlogV2(&grpc.GenericServerStream[anypb.Any, anypb.Any]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_DraftBlogV2Server = grpc.BidiStreamingServer[anypb.Any, anypb.Any]

func _BlogService_BlogsOfFollowingAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FollowingAccounts)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).BlogsOfFollowingAccounts(m, &grpc.GenericServerStream[FollowingAccounts, anypb.Any]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_BlogsOfFollowingAccountsServer = grpc.ServerStreamingServer[anypb.Any]

func _BlogService_GetBlogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlogsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).GetBlogs(m, &grpc.GenericServerStream[GetBlogsReq, anypb.Any]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_GetBlogsServer = grpc.ServerStreamingServer[anypb.Any]

func _BlogService_GetBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetBlog(ctx, req.(*BlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_MoveBlogToDraftStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).MoveBlogToDraftStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_MoveBlogToDraftStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).MoveBlogToDraftStatus(ctx, req.(*BlogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetBlogsBySlice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlogsBySliceReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).GetBlogsBySlice(m, &grpc.GenericServerStream[GetBlogsBySliceReq, anypb.Any]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_GetBlogsBySliceServer = grpc.ServerStreamingServer[anypb.Any]

func _BlogService_GetFeedBlogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeedReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlogServiceServer).GetFeedBlogs(m, &grpc.GenericServerStream[FeedReq, anypb.Any]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BlogService_GetFeedBlogsServer = grpc.ServerStreamingServer[anypb.Any]

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog_svc.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishBlog",
			Handler:    _BlogService_PublishBlog_Handler,
		},
		{
			MethodName: "DraftBlog",
			Handler:    _BlogService_DraftBlog_Handler,
		},
		{
			MethodName: "GetPublishedBlogById",
			Handler:    _BlogService_GetPublishedBlogById_Handler,
		},
		{
			MethodName: "GetDraftBlogById",
			Handler:    _BlogService_GetDraftBlogById_Handler,
		},
		{
			MethodName: "ArchiveBlogById",
			Handler:    _BlogService_ArchiveBlogById_Handler,
		},
		{
			MethodName: "GetPublishedBlogsByTagsName",
			Handler:    _BlogService_GetPublishedBlogsByTagsName_Handler,
		},
		{
			MethodName: "GetDraftBlogsByAccId",
			Handler:    _BlogService_GetDraftBlogsByAccId_Handler,
		},
		{
			MethodName: "GetPublishedBlogsByAccID",
			Handler:    _BlogService_GetPublishedBlogsByAccID_Handler,
		},
		{
			MethodName: "GetLatest100Blogs",
			Handler:    _BlogService_GetLatest100Blogs_Handler,
		},
		{
			MethodName: "GetPublishedBlogByIdAndOwnerId",
			Handler:    _BlogService_GetPublishedBlogByIdAndOwnerId_Handler,
		},
		{
			MethodName: "GetAllBlogsByBlogIds",
			Handler:    _BlogService_GetAllBlogsByBlogIds_Handler,
		},
		{
			MethodName: "CheckIfBlogsExist",
			Handler:    _BlogService_CheckIfBlogsExist_Handler,
		},
		{
			MethodName: "DeleteABlogByBlogId",
			Handler:    _BlogService_DeleteABlogByBlogId_Handler,
		},
		{
			MethodName: "GetDraftBlogByBlogId",
			Handler:    _BlogService_GetDraftBlogByBlogId_Handler,
		},
		{
			MethodName: "GetBlog",
			Handler:    _BlogService_GetBlog_Handler,
		},
		{
			MethodName: "MoveBlogToDraftStatus",
			Handler:    _BlogService_MoveBlogToDraftStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlogsMetadata",
			Handler:       _BlogService_GetBlogsMetadata_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchBlogsMetadata",
			Handler:       _BlogService_SearchBlogsMetadata_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DraftBlogV2",
			Handler:       _BlogService_DraftBlogV2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BlogsOfFollowingAccounts",
			Handler:       _BlogService_BlogsOfFollowingAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlogs",
			Handler:       _BlogService_GetBlogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlogsBySlice",
			Handler:       _BlogService_GetBlogsBySlice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFeedBlogs",
			Handler:       _BlogService_GetFeedBlogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/serviceconn/gateway_blog/pb/gw_blog.proto",
}
