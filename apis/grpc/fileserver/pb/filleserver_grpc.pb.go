// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: apis/grpc/fileserver/filleserver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	// Lets an user upload profile pic into the file server
	UploadProfilePic(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadProfilePicClient, error)
	// Lets an user get profile pic into the file server
	GetProfilePic(ctx context.Context, in *GetProfilePicReq, opts ...grpc.CallOption) (FileService_GetProfilePicClient, error)
	// Lets a user delete the profile picture
	DeleteProfilePic(ctx context.Context, in *DeleteProfilePicReq, opts ...grpc.CallOption) (*DeleteProfilePicRes, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) UploadProfilePic(ctx context.Context, opts ...grpc.CallOption) (FileService_UploadProfilePicClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/auth.FileService/UploadProfilePic", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceUploadProfilePicClient{stream}
	return x, nil
}

type FileService_UploadProfilePicClient interface {
	Send(*UploadProfilePicReq) error
	CloseAndRecv() (*UploadProfilePicRes, error)
	grpc.ClientStream
}

type fileServiceUploadProfilePicClient struct {
	grpc.ClientStream
}

func (x *fileServiceUploadProfilePicClient) Send(m *UploadProfilePicReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceUploadProfilePicClient) CloseAndRecv() (*UploadProfilePicRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadProfilePicRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) GetProfilePic(ctx context.Context, in *GetProfilePicReq, opts ...grpc.CallOption) (FileService_GetProfilePicClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/auth.FileService/GetProfilePic", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceGetProfilePicClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_GetProfilePicClient interface {
	Recv() (*GetProfilePicRes, error)
	grpc.ClientStream
}

type fileServiceGetProfilePicClient struct {
	grpc.ClientStream
}

func (x *fileServiceGetProfilePicClient) Recv() (*GetProfilePicRes, error) {
	m := new(GetProfilePicRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) DeleteProfilePic(ctx context.Context, in *DeleteProfilePicReq, opts ...grpc.CallOption) (*DeleteProfilePicRes, error) {
	out := new(DeleteProfilePicRes)
	err := c.cc.Invoke(ctx, "/auth.FileService/DeleteProfilePic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	// Lets an user upload profile pic into the file server
	UploadProfilePic(FileService_UploadProfilePicServer) error
	// Lets an user get profile pic into the file server
	GetProfilePic(*GetProfilePicReq, FileService_GetProfilePicServer) error
	// Lets a user delete the profile picture
	DeleteProfilePic(context.Context, *DeleteProfilePicReq) (*DeleteProfilePicRes, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) UploadProfilePic(FileService_UploadProfilePicServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadProfilePic not implemented")
}
func (UnimplementedFileServiceServer) GetProfilePic(*GetProfilePicReq, FileService_GetProfilePicServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProfilePic not implemented")
}
func (UnimplementedFileServiceServer) DeleteProfilePic(context.Context, *DeleteProfilePicReq) (*DeleteProfilePicRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfilePic not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_UploadProfilePic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).UploadProfilePic(&fileServiceUploadProfilePicServer{stream})
}

type FileService_UploadProfilePicServer interface {
	SendAndClose(*UploadProfilePicRes) error
	Recv() (*UploadProfilePicReq, error)
	grpc.ServerStream
}

type fileServiceUploadProfilePicServer struct {
	grpc.ServerStream
}

func (x *fileServiceUploadProfilePicServer) SendAndClose(m *UploadProfilePicRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceUploadProfilePicServer) Recv() (*UploadProfilePicReq, error) {
	m := new(UploadProfilePicReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_GetProfilePic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProfilePicReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).GetProfilePic(m, &fileServiceGetProfilePicServer{stream})
}

type FileService_GetProfilePicServer interface {
	Send(*GetProfilePicRes) error
	grpc.ServerStream
}

type fileServiceGetProfilePicServer struct {
	grpc.ServerStream
}

func (x *fileServiceGetProfilePicServer) Send(m *GetProfilePicRes) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_DeleteProfilePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfilePicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteProfilePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.FileService/DeleteProfilePic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteProfilePic(ctx, req.(*DeleteProfilePicReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteProfilePic",
			Handler:    _FileService_DeleteProfilePic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadProfilePic",
			Handler:       _FileService_UploadProfilePic_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetProfilePic",
			Handler:       _FileService_GetProfilePic_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "apis/grpc/fileserver/filleserver.proto",
}
